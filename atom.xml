<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>靳中</title>
  
  <subtitle>靳中的博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://baofengketang.com/"/>
  <updated>2018-06-15T02:21:11.000Z</updated>
  <id>http://baofengketang.com/</id>
  
  <author>
    <name>[object Object]</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://baofengketang.com/2018/06/15/tools/webstrom/"/>
    <id>http://baofengketang.com/2018/06/15/tools/webstrom/</id>
    <published>2018-06-15T02:21:06.000Z</published>
    <updated>2018-06-15T02:21:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>title: webstrom的安装<br>cover: <a href="http://p6wdo7p1v.bkt.clouddn.com/1529029191.png" target="_blank" rel="noopener">http://p6wdo7p1v.bkt.clouddn.com/1529029191.png</a><br>author:<br>  nick: 靳中<br>  link: <a href="http://www.baofengketang.com" target="_blank" rel="noopener">http://www.baofengketang.com</a><br>categories: 开发工具<br>tags:</p><ul><li>开发工具<h1><span id="ru-guo-wen-zhang-wei-zhuan-zai-wen-zhang-xu-yao-duo-jia-wen-zhang-chu-chu-xiang">如果文章为转载文章，需要多加文章出处项</span><a href="#ru-guo-wen-zhang-wei-zhuan-zai-wen-zhang-xu-yao-duo-jia-wen-zhang-chu-chu-xiang" class="header-anchor">#</a></h1>editor:<br>name: 靳中<br>link: <a href="http://www.baofengketang.com" target="_blank" rel="noopener">http://www.baofengketang.com</a></li></ul><h1><span id="shou-ye-mei-pian-wen-zhang-de-zi-biao-ti">首页每篇文章的子标题</span><a href="#shou-ye-mei-pian-wen-zhang-de-zi-biao-ti" class="header-anchor">#</a></h1><p>subtitle: webstorm的安装与配置<br>markdown:<br>  render:<br>    html: true</p><p>webstorm的安装与使用</p><p>简介</p><p>WebStorm 是jetbrains公司旗下一款JavaScript 开发工具。被广大中国JS开发者誉为”Web前端开发神器”、”最强大的HTML5编辑器”、”最智能的JavaScript IDE”等。</p><p>安装</p><p>点击进入官网下载最新版本进行安装.</p><p>下载之后进行安装</p><p>一路next即可</p><p>激活</p><p>下载相关jar包：JetbrainsCrack-2.6.10-release-enc.jar，将jar包拷贝到C:\Program Files\JetBrains\WebStorm 2017.3.3\bin目录中</p><p>还是在bin目录下，找到idea.exe.vmoptions和idea64.exe.vmoptions，用记事本打开它们，在两个文件最后分别加上：</p><pre><code>-javaagent:C:\Program Files\JetBrains\WebStorm 2017.3.3\bin\JetbrainsCrack-2.6.10-release-enc.jar</code></pre><p>重新启动webstrom，然后输入以下代码</p><pre><code>ThisCrackLicenseId-{&quot;licenseId&quot;:&quot;ThisCrackLicenseId&quot;,&quot;licenseeName&quot;:&quot;你想要的用户名&quot;,&quot;assigneeName&quot;:&quot;&quot;,&quot;assigneeEmail&quot;:&quot;随便填一个邮箱(我填的:183588002@qq.com)&quot;,&quot;licenseRestriction&quot;:&quot;For This Crack, Only Test! Please support genuine!!!&quot;,&quot;checkConcurrentUse&quot;:false,&quot;products&quot;:[{&quot;code&quot;:&quot;II&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;},{&quot;code&quot;:&quot;DM&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;},{&quot;code&quot;:&quot;AC&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;},{&quot;code&quot;:&quot;RS0&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;},{&quot;code&quot;:&quot;WS&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;},{&quot;code&quot;:&quot;DPN&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;},{&quot;code&quot;:&quot;RC&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;},{&quot;code&quot;:&quot;PS&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;},{&quot;code&quot;:&quot;DC&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;},{&quot;code&quot;:&quot;RM&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;},{&quot;code&quot;:&quot;CL&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;},{&quot;code&quot;:&quot;PC&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;}],&quot;hash&quot;:&quot;2911276/0&quot;,&quot;gracePeriodDays&quot;:7,&quot;autoProlongated&quot;:false}</code></pre><p>至此，webstrom就安装完毕了~，下面就可以开始骚气的玩耍了~~~</p><p>欢迎扫描我的微信，进行技术交流</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;title: webstrom的安装&lt;br&gt;cover: &lt;a href=&quot;http://p6wdo7p1v.bkt.clouddn.com/1529029191.png&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://p6wdo7p1v.bk
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>jquery基础（一）</title>
    <link href="http://baofengketang.com/2018/06/07/jquery/jquery_01/"/>
    <id>http://baofengketang.com/2018/06/07/jquery/jquery_01/</id>
    <published>2018-06-07T02:54:08.000Z</published>
    <updated>2018-06-07T08:41:42.000Z</updated>
    
    <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#jquery-ji-chu">Jquery基础</a><ul><li><a href="#wei-shi-me-yao-xue-xi-jquery">为什么要学习Jquery</a></li><li><a href="#jquery-de-you-shi">Jquery的优势</a></li><li><a href="#shi-yong-jquery-jie-jue-shang-mian-de-wen-ti">使用jquery解决上面的问题</a></li><li><a href="#jquery-de-ji-ben-shi-yong">Jquery的基本使用</a><ul><li><a href="#shi-me-shi-jquery">什么是Jquery</a></li><li><a href="#xia-zai-jquery-yuan-ma">下载Jquery源码</a></li><li><a href="#yin-ru-jquery">引入jquery</a></li><li><a href="#ru-kou-han-shu">入口函数</a></li><li><a href="#shi-jian-chu-li">事件处理</a></li></ul></li><li><a href="#jquery-xiang-xi-jie-shao">Jquery详细介绍</a><ul><li><a href="#fu-hao-jie-shao">$符号介绍</a></li><li><a href="#jquery-ru-kou-han-shu">jquery入口函数</a></li></ul></li><li><a href="#jquery-zhong-xuan-ze-qi-can-kao-api">Jquery中选择器（参考api）</a><ul><li><a href="#ji-ben-xuan-ze-qi">基本选择器</a></li><li><a href="#ceng-ji-xuan-ze-qi">层级选择器</a></li><li><a href="#guo-lu-xuan-ze-qi">过滤选择器</a></li><li><a href="#shu-xing-xuan-ze-qi">属性选择器</a></li></ul></li></ul></li></ul><!-- tocstop --></div><h1><span id="jquery-ji-chu">Jquery基础</span><a href="#jquery-ji-chu" class="header-anchor">#</a></h1><h2><span id="wei-shi-me-yao-xue-xi-jquery">为什么要学习Jquery</span><a href="#wei-shi-me-yao-xue-xi-jquery" class="header-anchor">#</a></h2><p>在看这个问题前，我们先来看一段代码.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>回顾js<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        * &#123;</span></span><br><span class="line"><span class="undefined">            margin: 0;</span></span><br><span class="line"><span class="undefined">            padding: 0;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        div &#123;</span></span><br><span class="line"><span class="undefined">            height: 200px;</span></span><br><span class="line"><span class="undefined">            background: pink;</span></span><br><span class="line"><span class="undefined">            margin-bottom: 10px;</span></span><br><span class="line"><span class="undefined">            display: none;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        window.onload = function () &#123;</span></span><br><span class="line"><span class="undefined">            document.getElementById("demo").onclick = function () &#123;</span></span><br><span class="line"><span class="undefined">                var divs = document.getElementsByTagName("div");</span></span><br><span class="line"><span class="undefined">                for(var i = 0; i &lt; divs.length; i++)&#123;</span></span><br><span class="line"><span class="undefined">                    divs[i].style.display = "block";</span></span><br><span class="line"><span class="undefined">                    divs[i].innerHTML = "javascript回顾";</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        /*window.onload = function () &#123;</span></span><br><span class="line"><span class="undefined">            alert("我是第二个onload");</span></span><br><span class="line"><span class="undefined">        &#125;*/</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"测试"</span> <span class="attr">id</span>=<span class="string">"demo"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>window.onload 事件有个事件覆盖的问题，我们只能写一个，代码容错性差，浏览器兼容性问题，书写很繁琐，代码量多，动画效果实现起来也是比较复杂等</p><h2><span id="jquery-de-you-shi">Jquery的优势</span><a href="#jquery-de-you-shi" class="header-anchor">#</a></h2><p> 1、轻量级</p><p>​     JQuery非常轻巧，采用Dean Edwards编写的Packer压缩后，大小不到30KB,如果使用Min版并且在服务器端启用Gzip压缩后，大小只有18KB。</p><p> 2、强大的选择器</p><p>​    JQuery允许开发者使用从CSS1到CSS3几乎所有的选择器，以及JQuery独创的高级而且复杂的选择器，另外还可以加入插件使其支持XPath选择器，甚至开发者可以编写属于自己的选择器。由于JQuery支持选择器这一特性，因此有一定CSS经验的开发人员可以很容易的切入到JQuery的学习中来。</p><p>  3、出色的DOM操作的封装</p><p>​    JQuery封装了大量常用的DOM操作，使开发者在编写DOM操作相关程序的时候能够得心应手。JQuery轻松地完成各种原本非常复杂的操作，让JavaScript新手也能写出出色的程序。</p><p>  4、可靠的事件处理机制</p><p>​     JQuery的事件处理机制吸收了JavaScript专家Dean Edwards编写的事件处理函数的精华，是的JQuery在处理事件绑定的时候相当可靠。在预留退路、循序渐进以及非入侵式编程思想方面，JQuery也做得非常不错。</p><p>  5、完善的Ajax</p><p>​     JQuery将所有的Ajax操作封装到一个函数$.ajax()里，使得开发者处理Ajax的时候能够专心处理业务逻辑而无需关心复杂的浏览器兼容性和XMLHttpRequest对象的创建和使用的问题。</p><p>  6、不污染顶级变量</p><p>​     JQuery只建立一个名为JQuery的对象，其所有的函数方法都在这个对象之下。其别名$也可以随时交流控制权，绝对不会污染其他的对象。该特性是JQuery可以与其他JavaScript库共存，在项目中放心地引用而不需要考虑到后期的冲突。</p><p>  7、出色的浏览器兼容性</p><p>​    作为一个流行的JavaScript库，浏览器的兼容性是必须具备的条件之一。JQuery能够在IE6.0+,FF 2+,Safari2.+和Opera9.0+下正常运行。JQuery同时修复了一些浏览器之间的的差异，使开发者不必在开展项目前建立浏览器兼容库。</p><p>  8、链式操作方式</p><p>​     JQuery中最有特色的莫过于它的链式操作方式——即对发生在同一个JQuery对象上的一组动作，可以直接接连写无需要重复获取对象。这一特点使得JQuery的代码无比优雅。</p><p>  9.隐式迭代</p><p>​    当用JQuery找到带有“.myClass”类的全部元素，然后隐藏他们时。无需循环遍历每一个返回的元素。相反，JQuery里的方法都被设计成自动操作的对象集合，而不是单独的对象，这使得大量的循环结构变得不再必要，从而大幅度地减少代码量。</p><p>  10、行为层与结构层的分离</p><p>​    开发者可以使用选择器选中元素，然后直接给元素添加事件。这种将行为层与结构层完全分离的思想，可以使JQuery开发人员和HTML或其他页面开发人员各司其职，摆脱过去开发冲突或个人单干的开发模式。同时，后期维护也非常方便，不需要在HTML代码中寻找某些函数和重复修改HTML代码。</p><p>   11、丰富的插件支持</p><p>​    JQuery的易扩展性，吸引了来自全球开发者来编写JQuery的扩展插件。目前已经有超过几百种官方插件支持，而且还不断有新插件面试。</p><p>   12、完善的文档</p><p>​    JQuery的文档非常丰富，现阶段多位英文文档，中文文档相对较少。很多热爱JQuery的团队都在努力完善JQuery中文文档，例如JQuery的中文API。</p><p>   13、开源: JQuery是一个开源的产品，任何人都可以自由地使用并提出修改意见</p><h2><span id="shi-yong-jquery-jie-jue-shang-mian-de-wen-ti">使用jquery解决上面的问题</span><a href="#shi-yong-jquery-jie-jue-shang-mian-de-wen-ti" class="header-anchor">#</a></h2><p>对于这个案例目前只需要看的懂即可，后面会详细介绍</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>jQuery解决问题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        * &#123;</span></span><br><span class="line"><span class="undefined">            margin: 0;</span></span><br><span class="line"><span class="undefined">            padding: 0;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        div &#123;</span></span><br><span class="line"><span class="undefined">            height: 200px;</span></span><br><span class="line"><span class="undefined">            background: pink;</span></span><br><span class="line"><span class="undefined">            margin-bottom: 10px;</span></span><br><span class="line"><span class="undefined">            display: none;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.11.1.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        // 1. 入口函数的方式</span></span><br><span class="line"><span class="undefined">        $(document).ready(function () &#123;</span></span><br><span class="line"><span class="undefined">            $("#demo").click(function () &#123;</span></span><br><span class="line"><span class="undefined">                $("div").show(1000).html("我是内容");</span></span><br><span class="line"><span class="undefined">            &#125;);</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">        // 2.函数定义的第二种方式</span></span><br><span class="line"><span class="undefined">        $(function () &#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">        //可以写多个入口函数</span></span><br><span class="line"><span class="undefined">        /*$(document).ready(function () &#123;</span></span><br><span class="line"><span class="undefined">            alert("我是第二个onload");</span></span><br><span class="line"><span class="undefined">        &#125;);*/</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"我是按钮"</span> <span class="attr">id</span>=<span class="string">"demo"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2><span id="jquery-de-ji-ben-shi-yong">Jquery的基本使用</span><a href="#jquery-de-ji-ben-shi-yong" class="header-anchor">#</a></h2><h3><span id="shi-me-shi-jquery">什么是Jquery</span><a href="#shi-me-shi-jquery" class="header-anchor">#</a></h3><p>jQuery就是javascript的一个库，把我们常用的一些功能进行了封装，方便我们来调用，提高我们的开发效率</p><p>Javascript是一门编程语言，我们用它来编写客户端浏览器脚本。</p><p>jQuery是javascript的一个库，包含多个可重用的函数，用来辅助我们简化javascript开发</p><p>jQuery能做的javascipt都能做到，而javascript能做的事情，jQuery不一定能做到。</p><h3><span id="xia-zai-jquery-yuan-ma">下载Jquery源码</span><a href="#xia-zai-jquery-yuan-ma" class="header-anchor">#</a></h3><p><img src="http://p6wdo7p1v.bkt.clouddn.com/blog/180606/GLJbhemFHc.png?imageslim" alt="mark"></p><p>jquery提供了2个形式</p><p>jquery-1.11.1.js主要用于开发环境，学习我们主要使用此版本</p><p>jquery-1.11.1.min.js:主要用于线上环境</p><h3><span id="yin-ru-jquery">引入jquery</span><a href="#yin-ru-jquery" class="header-anchor">#</a></h3><p>要把我们的jQuery源文件拿到我们的项目里面来，在我们的页面中引用jQuery文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.11.1.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3><span id="ru-kou-han-shu">入口函数</span><a href="#ru-kou-han-shu" class="header-anchor">#</a></h3><p>定义方式一：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">"helloworld"</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>定义方式二：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">alert(<span class="string">"helloworld"</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3><span id="shi-jian-chu-li">事件处理</span><a href="#shi-jian-chu-li" class="header-anchor">#</a></h3><p>JavaScript事件的处理方式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>).onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">           </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Jquery的事件处理机制</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#demo"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     alert(<span class="string">"jquery的形式"</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>案例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        *&#123;</span></span><br><span class="line"><span class="undefined">            margin: 0px;</span></span><br><span class="line"><span class="undefined">            padding: 0px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        div &#123;</span></span><br><span class="line"><span class="undefined">            height: 200px;</span></span><br><span class="line"><span class="undefined">            background: blueviolet;</span></span><br><span class="line"><span class="undefined">            margin-bottom: 10px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.11.1.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">"#demo"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                $(<span class="string">"div"</span>).hide(<span class="number">1000</span>)</span></span><br><span class="line"><span class="undefined">            &#125;)</span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"我是按钮"</span> <span class="attr">id</span>=<span class="string">"demo"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2><span id="jquery-xiang-xi-jie-shao">Jquery详细介绍</span><a href="#jquery-xiang-xi-jie-shao" class="header-anchor">#</a></h2><h3><span id="fu-hao-jie-shao">$符号介绍</span><a href="#fu-hao-jie-shao" class="header-anchor">#</a></h3><p>在js中的变量命名：下划线、字母、$、数字组成，但是不能以数字开头</p><p>在jquery中，它占用了我们js中的2个变量分别是：$ 和 jQuery</p><p>补充:模拟jquery的操作</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>模拟jquery<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        $=<span class="function"><span class="keyword">function</span>(<span class="params">dom</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                ready:<span class="function"><span class="keyword">function</span>(<span class="params">func</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 判断一下 docuemnt.onload 有没有被赋值（或者说有没有这个事件）</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 1.有：接收一个旧的函数，然后呢，我先去调用新的函数，接着再调用旧的函数</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 2.没有：直接赋值个onload事件</span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span>(<span class="keyword">typeof</span> dom.onload===<span class="string">"function"</span>)&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">var</span> oldFun=dom.onload;</span></span><br><span class="line"><span class="javascript">                        dom.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="undefined">                            func();</span></span><br><span class="line"><span class="undefined">                            oldFun();</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">                        &#125;</span></span><br><span class="line"><span class="javascript">                    &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="undefined">                        dom.onload=func;</span></span><br><span class="line"><span class="undefined">                    &#125;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">       $(<span class="built_in">window</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">           alert(<span class="string">"第一次调用"</span>)</span></span><br><span class="line"><span class="undefined">       &#125;)</span></span><br><span class="line"><span class="javascript">        $(<span class="built_in">window</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            alert(<span class="string">"第二次调用"</span>)</span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3><span id="jquery-ru-kou-han-shu">jquery入口函数</span><a href="#jquery-ru-kou-han-shu" class="header-anchor">#</a></h3><blockquote><p>1.Js的window.onload事件是等到所有内容，以及我们的外部图片之类的文件加载完了之后，才回去执行</p><p>2.jQuery的入口函数 是在 html所有标签都加载之后，就回去执行。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.11.1.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            alert(<span class="built_in">document</span>.getElementsByTagName(<span class="string">"img"</span>)[<span class="number">2</span>].clientWidth);</span></span><br><span class="line"><span class="undefined">        &#125;;</span></span><br><span class="line"><span class="undefined">        /*$(function () &#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//alert(document.getElementsByTagName("img")[2].clientWidth);</span></span></span><br><span class="line"><span class="javascript">            alert($(<span class="string">"#img3"</span>).width());</span></span><br><span class="line"><span class="undefined">        &#125;);*/</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"imgs/01.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"imgs/02.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"img3"</span> <span class="attr">src</span>=<span class="string">"imgs/03.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2><span id="jquery-zhong-xuan-ze-qi-can-kao-api">Jquery中选择器（参考api）</span><a href="#jquery-zhong-xuan-ze-qi-can-kao-api" class="header-anchor">#</a></h2><h3><span id="ji-ben-xuan-ze-qi">基本选择器</span><a href="#ji-ben-xuan-ze-qi" class="header-anchor">#</a></h3><table><thead><tr><th><strong>符号</strong></th><th>说明</th><th>用法</th></tr></thead><tbody><tr><td><strong>$(“#demo”)</strong></td><td>选择id为demo的第一个元素</td><td>$(“#demo”).css(“background”,”red”)</td></tr><tr><td><strong>$(“.liItem”)</strong></td><td>选择所有类名（样式名）为liItem的元素</td><td>$(“.liItem”). css(“background”,”red”);</td></tr><tr><td><strong>$(“div”)</strong></td><td>选择所有标签名字为div的元素</td><td>$(“div”). css(“background”,”red”);</td></tr><tr><td><strong>$(“*”)</strong></td><td>选择所有元素  少用或配合其他选择器来使用</td><td>$(“*”). css(“background”,”red”)</td></tr><tr><td><strong>$(“.liItem,div”)</strong></td><td>选择多个指定的元素，这个地方是选择出了 .liItem元素和div元素</td><td>$(“.liItem,div”). css(“background”,”red”)</td></tr></tbody></table><h3><span id="ceng-ji-xuan-ze-qi">层级选择器</span><a href="#ceng-ji-xuan-ze-qi" class="header-anchor">#</a></h3><table><thead><tr><th><strong>符号</strong></th><th>说明</th><th>用法</th></tr></thead><tbody><tr><td>空格</td><td>后代选择器  选择所有的后代元素</td><td>$(“div span”). css(“background”,”red”);</td></tr><tr><td><strong>&gt; </strong></td><td>子代选择器  选择所有的子代元素</td><td>$(“div &gt; span”). css(“background”,”red”)</td></tr><tr><td><strong>+</strong></td><td>紧邻选择器  选择紧挨着的下一个元素</td><td>$(“div + p”). css(“background”,”red”)</td></tr><tr><td><strong>~</strong></td><td>兄弟选择器  选择后面的所有的兄弟元素</td><td>$(“div ~ p”). css(“background”,”red”)</td></tr></tbody></table><h3><span id="guo-lu-xuan-ze-qi">过滤选择器</span><a href="#guo-lu-xuan-ze-qi" class="header-anchor">#</a></h3><table><thead><tr><th><strong>符号</strong></th><th>说明</th><th>用法</th></tr></thead><tbody><tr><td><strong>:eq(index)</strong></td><td>index是从0开始的一个数字，选择序号为index的元素。选择第一个匹配的元素。</td><td>$(“li:eq(1)”). css(“background”,”red”)</td></tr><tr><td><strong>:gt(index)</strong></td><td>Index 是从0开始的一个数字，选择序号大于index的元素</td><td>$(“li:gt(2)”). css(“background”,”red”)</td></tr><tr><td><strong>:lt(index)</strong></td><td>Index是从0开始的一个数字，选择小于index  的元素</td><td>$(“li:lt(2)”). css(“background”,”red”)</td></tr><tr><td><strong>:odd</strong></td><td>选择所有序号为奇数行的元素</td><td>$(“li:odd”). css(“background”,”red”)</td></tr><tr><td><strong>:even</strong></td><td>选择所有序号为偶数的元素</td><td>$(“li:even”). css(“background”,”red”)</td></tr><tr><td><strong>:first</strong></td><td>选择匹配第一个元素</td><td>$(“li:first”). css(“background”,”red”)</td></tr><tr><td><strong>:last</strong></td><td>选择匹配的最后一个元素</td><td>$(“li:last”). css(“background”,”red”)</td></tr></tbody></table><h3><span id="shu-xing-xuan-ze-qi">属性选择器</span><a href="#shu-xing-xuan-ze-qi" class="header-anchor">#</a></h3><table><thead><tr><th><strong>符号</strong></th><th>说明</th><th>用法</th></tr></thead><tbody><tr><td><strong>$(“a[href]”)</strong></td><td>选择所有包含href属性的元素</td><td>$(“a[href]”). css(“background”,”red”)</td></tr><tr><td><strong>$(“a[href=’hello’]”)</strong></td><td>选择href属性值为hello的所有a标签</td><td>$(“a[href=’hello’]”). css(“background”,”red”)</td></tr><tr><td><strong>$(“a[href!=’baidu’]”)</strong></td><td>选择所有href属性不等baidu的所有元素，包括没有href的元素</td><td>$(“a[href!=’baidu’]”). css(“background”,”red”)</td></tr><tr><td><strong>$(“a[href^=’web’]”)</strong></td><td>选择所有以web开头的元素</td><td>$(“a[href^=’web’]”). css(“background”,”red”)</td></tr><tr><td><strong>$(“a[href\$=’cn’]”)</strong></td><td>选择所有以cn结尾的元素</td><td>$(“a[href$=’cn’]”). css(“background”,”red”)<em>**</em></td></tr><tr><td><strong>$(“a[href*=’i’]”)</strong></td><td>选择所有包含i这个字符的元素，可以是中英文</td><td>$(“a[href*=’i’]”). css(“background”,”red”)</td></tr><tr><td><strong>$(“a[href][title=’我’]”)</strong></td><td>选择所有符合指定属性规则的元素，都符合才会被选中。</td><td>$(“a[href][title=’我’]”). css(“background”,”red”)</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;toc&quot;&gt;

&lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#jquery-ji-chu&quot;&gt;Jquery基础&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#wei-shi-me-yao-xue-xi-jquery&quot;&gt;为什么要学习Jquery&lt;
      
    
    </summary>
    
      <category term="jquery" scheme="http://baofengketang.com/categories/jquery/"/>
    
    
      <category term="jquery基础" scheme="http://baofengketang.com/tags/jquery%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Spring开发实战01</title>
    <link href="http://baofengketang.com/2018/06/04/spring_anno/spring_anno_01/"/>
    <id>http://baofengketang.com/2018/06/04/spring_anno/spring_anno_01/</id>
    <published>2018-06-04T06:14:52.000Z</published>
    <updated>2018-06-05T03:48:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="spring-kai-fa-shi-zhan-01">Spring开发实战01</span><a href="#spring-kai-fa-shi-zhan-01" class="header-anchor">#</a></h1><h2><span id="wei-shi-me-yao-shi-yong-spring">为什么要使用spring</span><a href="#wei-shi-me-yao-shi-yong-spring" class="header-anchor">#</a></h2><h3><span id="dai-ma-ou-he-du-tai-gao">代码耦合度太高</span><a href="#dai-ma-ou-he-du-tai-gao" class="header-anchor">#</a></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeServiceImpl</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> IEmployeeDAO employeeDAO = <span class="keyword">new</span> EmployeeDAOImpl();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在如果要更换实现类，就必须更改源代码，代码的耦合度太高</p><h3><span id="dui-xiang-de-yi-lai-guan-xi-bi-jiao-fan-suo">对象的依赖关系比较繁琐</span><a href="#dui-xiang-de-yi-lai-guan-xi-bi-jiao-fan-suo" class="header-anchor">#</a></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmpployeeAction</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> IEmployeeService   service;</span><br><span class="line">    <span class="keyword">private</span> IDepartmentService departmentService;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果对象过多，并且互相存在以来关系，并且有的对象需要单例模式,有的则需要多实</p><h3><span id="shi-wu-kong-zhi-fan-suo">事务控制繁琐</span><a href="#shi-wu-kong-zhi-fan-suo" class="header-anchor">#</a></h3><p>对于事务,可以使用Filter或是Struts2的拦截器实现,但这样有一些不好的地方: </p><p>1.此时事务开在表现层,事务周期太长。 </p><p>2.有的action方法没有用到数据库操作,不需要开事务。 </p><p>3.不能针对某个具体功方法配置事务是否是只读的,因为有的方法只是查询数据。 </p><p>而正确的解决方案:把事务开启在 service 层是。但是: 每个方法前都要开启事务,每个方法后都要 关闭事务，代码臃肿,开发效率低下。 如何降低业务逻辑部分之间耦合度,提高程序的可重用性,同时提高开发的效率!Spring的aop机制可以帮助我们方便的帮助我们解决</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.org.kingdom.app;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployerService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//开启事务</span></span><br><span class="line">        <span class="comment">//dao.save(...);</span></span><br><span class="line">        <span class="comment">//关闭事务</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//开启事务</span></span><br><span class="line">        <span class="comment">//dao.save(...);</span></span><br><span class="line">        <span class="comment">//关闭事务</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="spring-jian-jie">Spring简介</span><a href="#spring-jian-jie" class="header-anchor">#</a></h2><h3><span id="spring-gai-shu">Spring概述</span><a href="#spring-gai-shu" class="header-anchor">#</a></h3><p>Spring是一个轻量级的DI/IoC和AOP容器框架。存在的目的是用于构建轻量级的J2EE应用。Spring以一种非侵入式的方式来管理你的代码,Spring提倡”最少侵入”,这也就意味着你可以适当的时候安装或卸载Spring。 </p><p>◆目的:解决企业应用开发的复杂性 </p><p>◆功能:使用基本的JavaBean代替EJB,并提供了更多的企业应用功能</p><p>◆范围:任何Java应用 简单来说:Spring是一个轻量级的控制反转(IoC)和面向切面(AOP)的容器框架 </p><h3><span id="spring-ke-cheng-zhong-de-chang-yong-zhu-yu">Spring课程中的常用术语</span><a href="#spring-ke-cheng-zhong-de-chang-yong-zhu-yu" class="header-anchor">#</a></h3><p>1、应用程序:是能完成我们所需要功能的成品,比如购物网站、OA系统。 </p><p>2、框架:是能完成一定功能的半成品,比如我们可以使用框架进行购物网站开发;框架做一部分功能,我 们自己做一部分功能,这样应用程序就创建出来了。而且框架规定了你在开发应用程序时的整体架构,提 供了一些基础功能,还规定了类和对象的如何创建、如何协作等,从而简化我们开发,让我们专注于业务 逻辑开发。 </p><p>3、非侵入式设计:从框架角度可以这样理解,无需继承框架提供的类,这种设计就可以看作是非侵入式设 计,如果继承了这些框架类,就是侵入设计,如果以后想更换框架之前写过的代码几乎无法重用,如果非 侵入式设计则之前写过的代码仍然可以继续使用。 </p><p>4、轻量级及重量级:轻量级是相对于重量级而言的,轻量级一般就是非入侵性的、所依赖的东西非常少、 资源占用非常少、部署简单等等,其实就是比较容易使用,而重量级正好相反。 </p><p>5、POJO:POJO(Plain Old Java Objects)简单的Java对象,它可以包含业务逻辑或持久化逻辑, 但不担当任何特殊角色且不继承或不实现任何其它Java框架的类或接口。 </p><p>6、容器:在日常生活中容器就是一种盛放东西的器具,从程序设计角度看就是装对象的的对象,因为存在 放入、拿出等操作,所以容器还要管理对象的生命周期。 </p><h3><span id="spring-de-zu-zhi-jia-gou-tu">Spring的组织架构图</span><a href="#spring-de-zu-zhi-jia-gou-tu" class="header-anchor">#</a></h3><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1528164377.png?imageMogr2/thumbnail/!70p" alt=""></p><h3><span id="spring-de-jar-bao-fen-xi">Spring的jar包分析</span><a href="#spring-de-jar-bao-fen-xi" class="header-anchor">#</a></h3><p>spring-framework-x.x.RELEASE:Spring 核心组件。 </p><p>​    docs: Spring 开发、帮助文档。 </p><pre><code>libs: Spring 核心组件的。jar 包、源代码、文档。 </code></pre><p>​    schema: Spring 配置文件的 schema 约束文件。 </p><p>spring-framework-x.x.RELEASE-dependencies:Spring 依赖的第三方组件。 包含了各大开源组织提供的依赖 jar。比如 apache common 下的:dbcp.jar pool.jar logging.jar </p><h3><span id="spring-de-you-shi">Spring的优势</span><a href="#spring-de-you-shi" class="header-anchor">#</a></h3><p>1.低侵入/低耦合(降低组件之间的耦合度,实现软件各层之间的解耦) </p><p>2.声明式事务管理</p><p>3.方便集成其他框架</p><p>4.降低JavaEE开发难度 </p><p>5.Spring框架中包括JavaEE 三层的每一层的解决方案 (一站式)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;&lt;span id=&quot;spring-kai-fa-shi-zhan-01&quot;&gt;Spring开发实战01&lt;/span&gt;&lt;a href=&quot;#spring-kai-fa-shi-zhan-01&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;&lt;h2&gt;&lt;span i
      
    
    </summary>
    
      <category term="spring" scheme="http://baofengketang.com/categories/spring/"/>
    
    
      <category term="spring" scheme="http://baofengketang.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>移动互联网</title>
    <link href="http://baofengketang.com/2018/05/29/mobile/mobile01/"/>
    <id>http://baofengketang.com/2018/05/29/mobile/mobile01/</id>
    <published>2018-05-29T08:08:57.000Z</published>
    <updated>2018-05-30T02:36:02.000Z</updated>
    
    <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#yi-dong-hu-lian-fa-zhan">移动互联发展</a><ul><li><a href="#gai-shu">概述</a></li><li><a href="#yi-dong-hu-lian-suo-she-ji-de-ji-zhu-ling-yu">移动互联所涉及的技术领域</a><ul><li><a href="#cao-zuo-xi-tong">操作系统</a></li><li><a href="#wei-bo-deng-zi-mei-ti-ji-zhu">微博等自媒体技术</a></li><li><a href="#er-wei-ma-ji-zhu">二维码技术</a></li><li><a href="#html5-ji-zhu">HTML5技术</a></li><li><a href="#ding-wei-dao-hang-gps-wei-zhi-gen-zong-ji-zhu">定位、导航、GPS位置跟踪技术</a></li><li><a href="#yun-ji-zhu">“云”技术，</a></li><li><a href="#yu-yin-shi-pin-tong-xun-ji-zhu">语音、视频通讯技术</a></li><li><a href="#yao-yi-yao-ji-zhu">摇一摇 技术</a></li><li><a href="#yi-dong-zhi-fu-wang-gou-yu-ding-chong-zhi-deng">移动支付：网购、预订、充值等。</a></li><li><a href="#yu-yin-shi-bie-sou-suo">语音识别、搜索。</a></li><li><a href="#zhong-jian-jian-ji-zhu">中间件技术</a></li></ul></li><li><a href="#yi-dong-hu-lian-de-fa-zhan">移动互联的发展</a><ul><li><a href="#de-ru-kou-zhe-de-tian-xia">得入口者得天下</a></li><li><a href="#yi-dong-duan-chan-pin-de-ji-ju-zeng-duo">移动端产品的急剧增多</a></li></ul></li></ul></li></ul><!-- tocstop --></div><h1><span id="yi-dong-hu-lian-fa-zhan">移动互联发展</span><a href="#yi-dong-hu-lian-fa-zhan" class="header-anchor">#</a></h1><h2><span id="gai-shu">概述</span><a href="#gai-shu" class="header-anchor">#</a></h2><p>最初接触移动互联网是在去年谷歌的一次android推介会，之前虽然也了解过，但对移动互联网的认识仅限于手机上网。也是那次之后我对移动互联网产生了莫大的兴趣，虽然还不太清楚到底什么才是真正的移动互联网。后来和一位搞投资的朋友讨论移动互联网，我本能的说最大的特点是移动，而朋友说是小。现在想想，朋友说的要高一筹，不过这两种说法本质是相同的。所谓的移动互联网，为什么要叫移动互联网，我是从字面和本质上理解的,而朋友是载体的特征上理解的。</p><p>不过自从使用智能机后，我对移动互联网有了新的理解，越来越觉得当年的移动和小太过肤浅。或许以后我对移动互联网还会有其他新的认识，但当下我却深刻的感觉的移动互联网是应用的天下。</p><p>在电脑上上网的时候，我们要上网就会直接打开浏览器，以前上qq要打开qq客户端，现在也可以直接打开webqq，以前总是把音乐和影视剧下载的硬盘里看，现在带宽越来越大，在线看和听完全没有任何不流畅的地方。可以说大多数跟网络相关的事都能通过浏览器来搞定，这才有了互联网入口之争。</p><p>而相对于移动互联网来说，想通过浏览器来上qq，首先就要考虑打开速度，我在公司只能使用1M的点心宽带，打开webqq都会加载半天，更何况手机，况且，再加上手机屏幕限制，webqq根本就没法在手机上用，只能用qq的几个移动客户端。像人人网、京东商城、新浪微博这样的网站在手机上打开总会有各种不便，有些脚本无法执行，如果没有专门的客户端，丢掉移动领域的市场将会是必然。像各种地图、导航软件，如果是通过手机浏览器打开，有些根本就看不到地图，更不用说导航了。这些也只能通过应用来体现。还有一些像手电筒、日历、闹钟、电子琴、收音机、录音机这类也只能通过应用来体现。更多手机上需要的功能，也都只能通过应用来体现出来。</p><p>诸如各种优惠券、团购券之类的互联网传统应用在移动互联网上有着无与伦比的优势，这部分也必然会出现大量移动互联网应用，另外还有星巴克新出的手机代码取餐之类的功能相对传统互联网有些绝对优势，未来这种应用也会越来越多。</p><h2><span id="yi-dong-hu-lian-suo-she-ji-de-ji-zhu-ling-yu">移动互联所涉及的技术领域</span><a href="#yi-dong-hu-lian-suo-she-ji-de-ji-zhu-ling-yu" class="header-anchor">#</a></h2><p>对于移动互联所涉及的技术领域，我个人从开发这么多年的经验总结如下几个方面</p><h3><span id="cao-zuo-xi-tong">操作系统</span><a href="#cao-zuo-xi-tong" class="header-anchor">#</a></h3><p>这些移动智能操作系统本身包含的技术很多，可以在这些平台基础上结合其他技术开发出各式各样的移动终端应用，进而在移动互联网的大潮中占住一席之地。 </p><h3><span id="wei-bo-deng-zi-mei-ti-ji-zhu">微博等自媒体技术</span><a href="#wei-bo-deng-zi-mei-ti-ji-zhu" class="header-anchor">#</a></h3><p>微博已经盛行很久，积累了数以亿计的用户量，很多人利用微博途径来推广相关的一些信息，起到了类似媒体宣传的效果。我们也可以借助微博大的用户量，用微博等账号作为我们app的登录账号，可免去用户注册之烦，同时还可直接将app相关信息分享到微博，进行一定地宣传。</p><h3><span id="er-wei-ma-ji-zhu">二维码技术</span><a href="#er-wei-ma-ji-zhu" class="header-anchor">#</a></h3><p>二维码中可以包含文本、链接、图片等信息。广泛应用于：二维码产品推广（包含产品信息，免去用户通过上网搜索产品）、二维码防伪、二维码电子优惠券、二维码名片、二维码微博营销、二维码墓碑等等。</p><h3><span id="html5-ji-zhu">HTML5技术</span><a href="#html5-ji-zhu" class="header-anchor">#</a></h3><p>通过HTML5和JavaScript可以开发移动Web应用，同时可以利用通过这几种途径将HTML5编写的内容转化成android应用：</p><blockquote><p>Android中的WebView控件</p><p>使用PhoneGap（它是基于HTML、CSS、JavaScript，创建移动跨平台应用的快速开发平台）</p><p>使用Rexsee在线生成android apk。Rexsee是开源的android开发平台，它支持开发以Web模式开发移动应用，所以说会HTML就会android</p><p>使用appMobi HTML5 XDK在线生成android应用</p></blockquote><h3><span id="ding-wei-dao-hang-gps-wei-zhi-gen-zong-ji-zhu">定位、导航、GPS位置跟踪技术</span><a href="#ding-wei-dao-hang-gps-wei-zhi-gen-zong-ji-zhu" class="header-anchor">#</a></h3><p>用的比较多的是百度map、Google map等开放的API来实现第三方应用的定位、导航等功能。可以有以下用途：</p><blockquote><p>a、定位目前所在位置，计算出发地与目的地之间的距离。</p><p>b、告诉用户从A到B怎么走，为用户出行导航。</p><p>c、移动物联网中可以通过GPS或者物品条形码知道物品所到达的位置。</p></blockquote><h3><span id="yun-ji-zhu">“云”技术，</span><a href="#yun-ji-zhu" class="header-anchor">#</a></h3><p>云推送、云备份、云下载、输入法的云联想、云盘等。“云”技术简单理解就是客户端通过网络与服务器（一般都是到达了一定数据量或者说数以万计、亿计的大数据量）相连获取与之相关的信息。用的比较多场合如下：</p><blockquote><p>a、推送：服务端向客户端主动下行内容，客户端接收到并提示用户，这一技术广泛用户移动应用中。</p><p>b、备份：将本地文件上传到服务器保存，让服务器为我们本地文件做一个备份。</p><p>c、下载：客户端与服务器相连，下载服务器端的文件内容。</p></blockquote><h3><span id="yu-yin-shi-pin-tong-xun-ji-zhu">语音、视频通讯技术</span><a href="#yu-yin-shi-pin-tong-xun-ji-zhu" class="header-anchor">#</a></h3><p>A与B进行语音、视频通讯的过程：A发送的语音、视频数据通过压缩算法进行压缩，然后通过app中定的通讯协议经网络把压缩后的语音、视频数据信息传给B，B接收到这些数据后，解压缩、将这些串起来还原成的语音、视频信息。如：应用中的语音、视频聊天等。</p><h3><span id="yao-yi-yao-ji-zhu">摇一摇 技术</span><a href="#yao-yi-yao-ji-zhu" class="header-anchor">#</a></h3><p>智能机时代到来，智能机硬件都有重力加速感应模块，可以实现摇一摇手机通过网络从服务端获取所需的内容，例如：获取同一时刻摇手机的人、获取自己周围的人等。</p><h3><span id="yi-dong-zhi-fu-wang-gou-yu-ding-chong-zhi-deng">移动支付：网购、预订、充值等。</span><a href="#yi-dong-zhi-fu-wang-gou-yu-ding-chong-zhi-deng" class="header-anchor">#</a></h3><p>用户、厂商、银行将客户端与银行卡相关联，通过一定协议和网络实现移动在线支付。例如：支付宝、酒店预订、高尔夫球场预订等。</p><h3><span id="yu-yin-shi-bie-sou-suo">语音识别、搜索。</span><a href="#yu-yin-shi-bie-sou-suo" class="header-anchor">#</a></h3><p>客户端采集到用户发出的语音信息，经过一些信号处理等技术，发送到服务端，经服务端找出相匹配的信息返回给客户端。例如：科大讯飞的语音识别、语音阅读、微信的语音输入等。</p><h3><span id="zhong-jian-jian-ji-zhu">中间件技术</span><a href="#zhong-jian-jian-ji-zhu" class="header-anchor">#</a></h3><p>将客户端不易适配的部分放在云端，客户端只要能接收到相关信息，就能做相应的适配，使客户端应用兼容性更高</p><h2><span id="yi-dong-hu-lian-de-fa-zhan">移动互联的发展</span><a href="#yi-dong-hu-lian-de-fa-zhan" class="header-anchor">#</a></h2><p><a href="http://www.questmobile.com.cn/blog/blog_141.html" target="_blank" rel="noopener">2018移动互联网整体行业报告</a></p><h3><span id="de-ru-kou-zhe-de-tian-xia">得入口者得天下</span><a href="#de-ru-kou-zhe-de-tian-xia" class="header-anchor">#</a></h3><p>移动互联网时代，得入口者得天下，入口是指用户寻找信息解决问题的方式，谁掌握了移动互联网入口，谁就掌握了联接用户的第一触点，好的入口可以带来源源不断的用户流、信息流、业务流、资金流和物流，从而将虚拟资本转化为商业价值。</p><p>想在手机搜索信息了，你第一时间想起了手机百度，它就是搜索的入口；想通过手机浏览网页了，你第一时间想起了QQ浏览器，它就是上网的入口；想购物消费了，你第一时间想起了手机淘宝，它就是娘们姐们妹们败家的入口，也有人说移动互联网时代得女人者得天下，还是有一定道理的，估计美女们平时的空余时间比较多，喜欢随时随地分享、交流、沟通，并且美女们对购物天生就有冲动，移动互联网产品最大化满足了美女们的空档时间和情感需要，所以美女用户在活跃度上远远高于男性用户，这是多么痛的领悟啊！。</p><p> 我们很多人都喜欢显摆喜欢晒，于是微信成了我们精神的入口，不仅可以多种方式的沟通，最主要的是可以向朋友圈晒你的美食美景美事，然后点赞纷呈评论纷飞，你心里美滋滋的，那份满足感和幸福感让你开心好几天，更可怕的是现在有了美容入口，自拍神器美顔相机，你脸上的皱纹你眼角的眼袋你黝黑的肤色你黑色的眼圈你头上的头皮屑…….经这么三秒钟的磨皮美化全都变美变白了，美顔相机就是你年轻漂亮的入口，它不红都难。</p><h3><span id="yi-dong-duan-chan-pin-de-ji-ju-zeng-duo">移动端产品的急剧增多</span><a href="#yi-dong-duan-chan-pin-de-ji-ju-zeng-duo" class="header-anchor">#</a></h3><p>据工信部数据显示，我国移动互联网用户总数达到8.72亿户，对移动电话用户的渗透率达到69.1%，月户均移动互联网接入流量达到178.8M。显而易见，很多大型互联网企业PC业务用户往移动端迁移，呈现出PC业务增长放缓，移动业务增长迅速的态势。如果一个互联网企业没有在移动端的拳头产品，将很快被移动互联网的浪潮颠覆，比如马云这几年是比较紧张的，挣扎着去做社交APP来往，不停地投资入口APP比如快的打车和拼车APP，当然后来做的手机支付宝及淘宝也是发展很快的，因为那是阿里的强项，但马云一定眼红腾讯的移动互联网产品，因为他知道在未来的日子里，得移动互联网者得天下。</p><p> 移动互联网产品强调解决用户的痛点，创业者全心全力聚焦于一个痛点，然后专心专注专业地做到极致，一针捅破天，一招打遍天下，一首歌唱尽一辈子，那么，作为创业者我们在产品的策划及执行上应该怎么去思考和实施呢？最近阅读了朋友圈的一篇文章，很有感触，用自已的话来和大家分享一下四个启示：</p><p>1）以工具切入，通过刚需快速积累用户，这类产品市面上很多，比如美图、淘宝、社交、婚恋、新闻等诸如此类的。社会的刚需是很多的，但做刚需产品是漫长煎熬的，通常拥有资源及数据者比较容易成功，比如我是航空公司的，我做航班信息及相关创新的APP，是拥有绝对的优势的，再比如腾讯QQ已拥有大量的PC用户，再做什么创新产品如微信都是较容易成功的，当然个人创业者也可以成功，那么你就要有更大的创新更强的专注，我个人认为未来几年一定会有新型的社交产品出现，它会超过微信陌陌之类的，但它是什么呢？谁知道呢。</p><p>2）深耕垂直领域，提高商业价值；现在都喜欢讲产业链垂直整合，那究竟什么是产业链垂直整合，简单地说就是其产业链上下（游）的整合，产业链通常包括产品设计、原材料采购、订单处理、生产制造、仓储物流、批发经营、终端零售7个环节,所谓产业链垂直整合，就是把这7个环节垂直整合起来，使得整条产业链高效运转。比如航空公司越来越多地执行过去由旅行社扮演的角色，就是典型的向前整合。同样，航空公司亦亲力而为供应商的角色如飞机维护、飞行餐饮，就是典型的向后整合。创业者选择自已NB的行业是相当重要的，你熟悉和理解这个行业的需求及用户痛点，你要做的只是平台化和移动化，将产业链串连起来融合起来，即使你的平台和APP都是免费的，但没有关系，整合过程中会发现越来越多的商业模式，越靠近最终用户和消费者的公司，在产业链拥有越来越大的发言权。</p><p>3）反向定义，重构产业链条牢牢卡位。这一条我没有什么好扩展的了，也好容易理解。</p><p>4）引入社区，增加活跃度和黏性。这个重要，社区概念，任何的平台或APP最好都引入社区功能，让用户之间可以分享和互动，做企业级服务平台的，就搞个企业社区，让企业之间员工之间有互动交流的功能，可成立各种各样的圈子，线上互动线下行动，八小时内是工作和业务，八小时外是生活和娱乐，工作和生活之间可以快速切换，任何人都有社交和被社交的需求，工作上你需要成长和提升，生活上你需要朋友和温暖。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;toc&quot;&gt;

&lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#yi-dong-hu-lian-fa-zhan&quot;&gt;移动互联发展&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#gai-shu&quot;&gt;概述&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#
      
    
    </summary>
    
      <category term="移动互联" scheme="http://baofengketang.com/categories/%E7%A7%BB%E5%8A%A8%E4%BA%92%E8%81%94/"/>
    
    
      <category term="移动互联" scheme="http://baofengketang.com/tags/%E7%A7%BB%E5%8A%A8%E4%BA%92%E8%81%94/"/>
    
  </entry>
  
  <entry>
    <title>Java8学习笔记（二）</title>
    <link href="http://baofengketang.com/2018/05/29/java/java02/"/>
    <id>http://baofengketang.com/2018/05/29/java/java02/</id>
    <published>2018-05-29T02:37:16.000Z</published>
    <updated>2018-05-31T13:49:32.000Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="java8-xue-xi-bi-ji-er">Java8学习笔记（二）</span><a href="#java8-xue-xi-bi-ji-er" class="header-anchor">#</a></h1><h2><span id="jdk8-dui-jie-kou-zeng-jia-liao-xin-de-ding-yi">JDK8对接口增加了新的定义</span><a href="#jdk8-dui-jie-kou-zeng-jia-liao-xin-de-ding-yi" class="header-anchor">#</a></h2><p>增加了默认方法</p><p>增加了静态方法</p><h2><span id="lei-xing-tui-duan-ji-zhi">类型推断机制</span><a href="#lei-xing-tui-duan-ji-zhi" class="header-anchor">#</a></h2><p>对于lambda表达式，必须要有其上下文，才能推断其类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;&lt;span id=&quot;java8-xue-xi-bi-ji-er&quot;&gt;Java8学习笔记（二）&lt;/span&gt;&lt;a href=&quot;#java8-xue-xi-bi-ji-er&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;&lt;h2&gt;&lt;span id=&quot;jdk8-
      
    
    </summary>
    
      <category term="java" scheme="http://baofengketang.com/categories/java/"/>
    
    
      <category term="java" scheme="http://baofengketang.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>redis实战</title>
    <link href="http://baofengketang.com/2018/05/17/redis/redis_01/"/>
    <id>http://baofengketang.com/2018/05/17/redis/redis_01/</id>
    <published>2018-05-17T05:28:32.000Z</published>
    <updated>2018-05-31T13:49:14.000Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="redis-shi-zhan">Redis实战</span><a href="#redis-shi-zhan" class="header-anchor">#</a></h1><h2><span id="nosql-jie-shao">NoSql介绍</span><a href="#nosql-jie-shao" class="header-anchor">#</a></h2><p>NoSQL 是 Not Only SQL 的缩写，意即”不仅仅是SQL”的意思，泛指非关系型的数据库。强调Key-Value Stores和文档数据库的优点，而不是单纯的反对RDBMS。</p><p>NoSQL产品是传统关系型数据库的功能阉割版本，通过减少用不到或很少用的功能，来大幅度提高产品性能NoSQL产品 redis、mongodb <a href="http://www.couchbase.org/membase" target="_blank" rel="noopener">Membase</a>、<a href="http://hbase.apache.org/" target="_blank" rel="noopener">HBase</a> </p><h2><span id="redis-jian-jie">Redis简介</span><a href="#redis-jian-jie" class="header-anchor">#</a></h2><h3><span id="shi-me-shi-redis">什么是Redis</span><a href="#shi-me-shi-redis" class="header-anchor">#</a></h3><p>Redis 是完全开源免费的，遵守BSD协议，是一个高性能的key-value数据库。</p><p>Redis 与其他 key - value 缓存产品有以下三个特点：</p><p>Redis支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。</p><p>Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。</p><p>Redis支持数据的备份，即master-slave模式的数据备份。</p><h3><span id="redis-ying-yong-chang-jing"><strong>Redis应用场景</strong></span><a href="#redis-ying-yong-chang-jing" class="header-anchor">#</a></h3><p>主要能够体现 解决数据库的访问压力。</p><p>例如:短信验证码时间有效期、session共享解决方案</p><h3><span id="redis-you-shi"><strong>Redis优势</strong></span><a href="#redis-you-shi" class="header-anchor">#</a></h3><p>性能极高 – Redis能读的速度是110000次/s,写的速度是81000次/s 。</p><p>丰富的数据类型 – Redis支持二进制案例的 Strings, Lists, Hashes, Sets 及 Ordered Sets 数据类型操作。</p><p>原子 – Redis的所有操作都是原子性的，同时Redis还支持对几个操作全并后的原子性执行。</p><p>丰富的特性 – Redis还支持 publish/subscribe, 通知, key 过期等等特性。</p><h3><span id="redis-yu-qi-ta-key-value-cun-chu-you-shi-me-bu-tong">Redis与其他key-value存储有什么不同</span><a href="#redis-yu-qi-ta-key-value-cun-chu-you-shi-me-bu-tong" class="header-anchor">#</a></h3><p>Redis有着更为复杂的数据结构并且提供对他们的原子性操作，这是一个不同于其他数据库的进化路径。Redis的数据类型都是基于基本数据结构的同时对程序员透明，无需进行额外的抽象。</p><p>Redis运行在内存中但是可以持久化到磁盘，所以在对不同数据集进行高速读写时需要权衡内存，因为数据量不能大于硬件内存。在内存数据库方面的另一个优点是，相比在磁盘上相同的复杂的数据结构，在内存中操作起来非常简单，这样Redis可以做很多内部复杂性很强的事情。同时，在磁盘格式方面他们是紧凑的以追加的方式产生的，因为他们并不需要进行随机访问。</p><h2><span id="redis-an-zhuang">Redis安装</span><a href="#redis-an-zhuang" class="header-anchor">#</a></h2><h3><span id="window-xia-an-zhuang">window下安装</span><a href="#window-xia-an-zhuang" class="header-anchor">#</a></h3><p><a href="https://github.com/MicrosoftArchive/redis/releases" target="_blank" rel="noopener">点击这里进行下载redis</a></p><p>选择相应的版本，然后直接解压即可</p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1526538055.png?imageMogr2/thumbnail/!70p" alt=""></p><p>文件介绍</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">文件介绍：</span><br><span class="line"></span><br><span class="line">redis-benchmark.exe #基准测试</span><br><span class="line"></span><br><span class="line">redis-check-aof.exe # aof</span><br><span class="line"></span><br><span class="line">redischeck-dump.exe # dump</span><br><span class="line"></span><br><span class="line">redis-cli.exe # 客户端</span><br><span class="line"></span><br><span class="line">redis-server.exe # 服务器</span><br><span class="line"></span><br><span class="line">redis.windows.conf # 配置文件</span><br></pre></td></tr></table></figure><p>建立一个启动文件start.bat</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server.exe redis.windows.conf</span><br></pre></td></tr></table></figure><p>启动服务器</p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1526538105.png?imageMogr2/thumbnail/!70p" alt=""></p><h3><span id="mac-xia-an-zhuang-redis">mac下安装redis</span><a href="#mac-xia-an-zhuang-redis" class="header-anchor">#</a></h3><p>欢迎扫描我的微信，进行技术交流</p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1527169907.png?imageMogr2/thumbnail/!70p" alt=""></p><p>同时也欢迎您的打赏，这将鼓励我写出更多的文章</p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1527169944.png?imageMogr2/thumbnail/!70p" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;&lt;span id=&quot;redis-shi-zhan&quot;&gt;Redis实战&lt;/span&gt;&lt;a href=&quot;#redis-shi-zhan&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;&lt;h2&gt;&lt;span id=&quot;nosql-jie-shao&quot;&gt;NoSql介绍&lt;
      
    
    </summary>
    
      <category term="redis" scheme="http://baofengketang.com/categories/redis/"/>
    
    
      <category term="redis" scheme="http://baofengketang.com/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>使用hexo搭建个人博客</title>
    <link href="http://baofengketang.com/2018/05/13/hexo/hexo_02/"/>
    <id>http://baofengketang.com/2018/05/13/hexo/hexo_02/</id>
    <published>2018-05-13T15:32:44.000Z</published>
    <updated>2018-05-31T13:44:55.000Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="an-zhuang-zhu-ti">安装主题</span><a href="#an-zhuang-zhu-ti" class="header-anchor">#</a></h1><p>安装NexT，在其文件夹中鼠标右键，点击Git Base Here。输入命令：git clone <a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">https://github.com/iissnan/hexo-theme-next</a> themes/next</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">C:\blog&gt;git clone https://github.com/theme-next/hexo-theme-next themes/next</span><br><span class="line">Cloning into 'themes/next'...</span><br><span class="line">remote: Counting objects: 3495, done.</span><br><span class="line">remote: Compressing objects: 100% (52/52), done.</span><br><span class="line">remote: Total 3495 (delta 32), reused 0 (delta 0), pack-reused 3443Receiving objects:  99% (3461/3495), 1020.01 KiB | 62</span><br><span class="line">Receiving objects: 100% (3495/3495), 1.21 MiB | 667.00 KiB/s, done.</span><br></pre></td></tr></table></figure><h1><span id="qi-yong-zhu-ti">启用主题</span><a href="#qi-yong-zhu-ti" class="header-anchor">#</a></h1><p>启用主题，在站点目录中（blog），打开配置文件_config.yml，修改theme：next</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">theme: next</span><br><span class="line"><span class="meta">#</span> Deployment</span><br><span class="line"><span class="meta">#</span># Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/njwangbohz/njwangbohz.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><h1><span id="zhu-ti-she-ding">主题设定</span><a href="#zhu-ti-she-ding" class="header-anchor">#</a></h1><p>在next主题目录下的_config.yml文件中将scheme设定为Pisces</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Schemes</span><br><span class="line">scheme: Pisces</span><br><span class="line">#scheme: Mist</span><br><span class="line">#scheme: Pisces</span><br><span class="line">#scheme: Gemini</span><br></pre></td></tr></table></figure><h1><span id="yu-yan-she-ding">语言设定</span><a href="#yu-yan-she-ding" class="header-anchor">#</a></h1><p>在站点根目录下修改配置文件_cofig.yml中的language为zh-Hans（简体中文）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">title: Hexo</span><br><span class="line">subtitle:</span><br><span class="line">description:</span><br><span class="line">keywords:</span><br><span class="line">author: John Doe</span><br><span class="line">language: zh-Hans</span><br><span class="line">timezone:</span><br></pre></td></tr></table></figure><h1><span id="xiu-gai-cai-dan-xiang">修改菜单项</span><a href="#xiu-gai-cai-dan-xiang" class="header-anchor">#</a></h1><p>在主题目录下修改配置文件_cofig.yml中的menu（注：千万不要在这设置中文，后面的值那是查找文件的地方！若你的站点运行在子目录中，请将链接前缀的 / 去掉）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line"><span class="attr">  home:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">  about:</span> <span class="string">/about</span></span><br><span class="line"><span class="attr">  tags:</span> <span class="string">/tags</span></span><br><span class="line"><span class="attr">  categories:</span> <span class="string">/categories</span></span><br><span class="line"><span class="attr">  archives:</span> <span class="string">/archives</span></span><br><span class="line"><span class="attr">  search:</span> <span class="string">/search</span></span><br></pre></td></tr></table></figure><p>这些配置都要与你主题目录下的languages文件中对应的yml文档里配置相关联。比如你在站点根目录中的配置文件设置language为zh-Hans，那么就要进入到主题目录下的languages文件中修改zh-Hans.yml，这样才能显示出菜单项新增的中文内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title:</span><br><span class="line">  archive: 归档</span><br><span class="line">  category: 分类</span><br><span class="line">  tag: 标签</span><br><span class="line">  schedule: 日程表</span><br><span class="line">menu:</span><br><span class="line">  home: 首页</span><br><span class="line">  archives: 归档</span><br><span class="line">  categories: 分类</span><br><span class="line">  tags: 标签</span><br><span class="line">  about: 关于</span><br><span class="line">  search: 搜索</span><br><span class="line">  schedule: 日程表</span><br><span class="line">  sitemap: 站点地图</span><br></pre></td></tr></table></figure><h1><span id="she-zhi-ce-lan-wei-zhi">设置侧栏位置</span><a href="#she-zhi-ce-lan-wei-zhi" class="header-anchor">#</a></h1><p>修改主题目录下sidebar的position值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sidebar:</span><br><span class="line">  # Sidebar Position, available value: left | right (only for Pisces | Gemini).</span><br><span class="line">  position: right</span><br><span class="line">  #position: right</span><br><span class="line"></span><br><span class="line">  # Sidebar Display, available value (only for Muse | Mist):</span><br><span class="line">  #  - post    expand on posts automatically. Default.</span><br><span class="line">  #  - always  expand for all pages automatically</span><br><span class="line">  #  - hide    expand only when click on the sidebar toggle icon.</span><br><span class="line">  #  - remove  Totally remove sidebar including sidebar toggle.</span><br></pre></td></tr></table></figure><h1><span id="she-zhi-tou-xiang">设置头像</span><a href="#she-zhi-tou-xiang" class="header-anchor">#</a></h1><p>在站点根目录下载配置文件中新增avatar，值设置为头像的链接地址。地址可以是网络地址，也可以是本地地址（放置在source/images/ 目录下）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#博客的头像设置</span><br><span class="line">avatar: http://p6wdo7p1v.bkt.clouddn.com/favicon.ico</span><br></pre></td></tr></table></figure><h1><span id="she-zhi-dai-ma-zhu-ti">设置代码主题</span><a href="#she-zhi-dai-ma-zhu-ti" class="header-anchor">#</a></h1><p>在主题目录下修改配置文件highlight_theme，默认值为nomal。可以设置为night</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Code Highlight theme</span><br><span class="line"># Available values: normal | night | night eighties | night blue | night bright</span><br><span class="line"># https://github.com/chriskempson/tomorrow-theme</span><br><span class="line">highlight_theme: night eighties</span><br></pre></td></tr></table></figure><h1><span id="chuang-jian-xiang-guan-zi-ye-mian">创建相关子页面</span><a href="#chuang-jian-xiang-guan-zi-ye-mian" class="header-anchor">#</a></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">about: /about</span><br><span class="line">  tags: /tags</span><br><span class="line">  categories: /categories</span><br><span class="line">  archives: /archives</span><br><span class="line">  search: /search</span><br></pre></td></tr></table></figure><p> 子页面的路径在C:\blog\source_posts下创建</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">C:\blog\source\_posts&gt;hexo new page tags</span><br><span class="line">INFO  Created: C:\blog\source\tags\index.md</span><br><span class="line"></span><br><span class="line">C:\blog\source\_posts&gt;hexo new page categories</span><br><span class="line">INFO  Created: C:\blog\source\categories\index.md</span><br><span class="line"></span><br><span class="line">C:\blog\source\_posts&gt;hexo new page archives</span><br><span class="line">INFO  Created: C:\blog\source\archives\index.md</span><br><span class="line"></span><br><span class="line">C:\blog\source\_posts&gt;hexo new page search</span><br><span class="line">INFO  Created: C:\blog\source\search\index.md</span><br></pre></td></tr></table></figure><p>在tag\index.md文件中添加以下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">date: 2018-05-14 22:25:00</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>当要为某一篇文章添加标签，只需在blog/source/_post目录下的具体文章的tags中添加标签即可，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hello World</span><br><span class="line">date: 2018-1-1</span><br><span class="line">tags: [hexo,git,nmp]</span><br><span class="line">categories: 博客</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1526308313.png?imageMogr2/thumbnail/!70p" alt=""></p><h1><span id="shou-ye-tian-jia-github-dao-hang-ke-xuan">首页添加github导航(可选)</span><a href="#shou-ye-tian-jia-github-dao-hang-ke-xuan" class="header-anchor">#</a></h1><p>在首页添加github导航条，点击<a href="https://blog.github.com/2008-12-19-github-ribbons/选择需要的样式，然后将代码复制到themes/next/layout/_layout.swig.并将href改为你的github地址" target="_blank" rel="noopener">https://blog.github.com/2008-12-19-github-ribbons/选择需要的样式，然后将代码复制到themes/next/layout/_layout.swig.并将href改为你的github地址</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;https://njwangbohz.github.io/&quot;&gt;&lt;img style=&quot;position: absolute; top: 0; left: 0; border: 0;&quot; src=&quot;https://s3.amazonaws.com/github/ribbons/forkme_left_red_aa0000.png&quot; alt=&quot;Fork me on GitHub&quot;&gt;&lt;/a&gt;</span><br><span class="line">    &lt;header id=&quot;header&quot; class=&quot;header&quot; itemscope itemtype=&quot;http://schema.org/WPHeader&quot;&gt;</span><br></pre></td></tr></table></figure><h1><span id="shi-xian-dian-ji-chu-xian-tao-xin-xiao-guo">实现点击出现桃心效果</span><a href="#shi-xian-dian-ji-chu-xian-tao-xin-xiao-guo" class="header-anchor">#</a></h1><p>实现点击出现桃心效果，点击<a href="http://7u2ss1.com1.z0.glb.clouddn.com/love.js将代码copy到/themes/next/source/js/src里面新建的love.js中，然后打开\themes\next\layout\_layout.swig文件,在末尾（在前面引用会出现找不到的bug）" target="_blank" rel="noopener">http://7u2ss1.com1.z0.glb.clouddn.com/love.js将代码copy到/themes/next/source/js/src里面新建的love.js中，然后打开\themes\next\layout\_layout.swig文件,在末尾（在前面引用会出现找不到的bug）</a> ，引用love.js</p><h1><span id="xiu-gai-tou-xiang-bing-xuan-zhuan">修改头像并旋转</span><a href="#xiu-gai-tou-xiang-bing-xuan-zhuan" class="header-anchor">#</a></h1><p>打开\themes\next\source\css_common\components\sidebar\sidebar-author.styl，在里面添加如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">.site-author-image &#123;</span><br><span class="line">  display: block;</span><br><span class="line">  margin: 0 auto;</span><br><span class="line">  padding: $site-author-image-padding;</span><br><span class="line">  max-width: $site-author-image-width;</span><br><span class="line">  height: $site-author-image-height;</span><br><span class="line">  border: $site-author-image-border-width solid $site-author-image-border-color;</span><br><span class="line"></span><br><span class="line">  /* 头像圆形 */</span><br><span class="line">  border-radius: 80px;</span><br><span class="line">  -webkit-border-radius: 80px;</span><br><span class="line">  -moz-border-radius: 80px;</span><br><span class="line">  box-shadow: inset 0 -1px 0 #333sf;</span><br><span class="line"></span><br><span class="line">  /* 设置循环动画 [animation: (play)动画名称 (2s)动画播放时长单位秒或微秒 (ase-out)动画播放的速度曲线为以低速结束 </span><br><span class="line">    (1s)等待1秒然后开始动画 (1)动画播放次数(infinite为循环播放) ]*/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  /* 鼠标经过头像旋转360度 */</span><br><span class="line">  -webkit-transition: -webkit-transform 1.0s ease-out;</span><br><span class="line">  -moz-transition: -moz-transform 1.0s ease-out;</span><br><span class="line">  transition: transform 1.0s ease-out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">img:hover &#123;</span><br><span class="line">  /* 鼠标经过停止头像旋转 </span><br><span class="line">  -webkit-animation-play-state:paused;</span><br><span class="line">  animation-play-state:paused;*/</span><br><span class="line"></span><br><span class="line">  /* 鼠标经过头像旋转360度 */</span><br><span class="line">  -webkit-transform: rotateZ(360deg);</span><br><span class="line">  -moz-transform: rotateZ(360deg);</span><br><span class="line">  transform: rotateZ(360deg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* Z 轴旋转动画 */</span><br><span class="line">@-webkit-keyframes play &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    -webkit-transform: rotateZ(0deg);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    -webkit-transform: rotateZ(-360deg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@-moz-keyframes play &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    -moz-transform: rotateZ(0deg);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    -moz-transform: rotateZ(-360deg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@keyframes play &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    transform: rotateZ(0deg);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    transform: rotateZ(-360deg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1><span id="jia-ru-bu-suan-zi-tong-ji">加入卜算子统计</span><a href="#jia-ru-bu-suan-zi-tong-ji" class="header-anchor">#</a></h1><p>在网站底部加上访问量，打开\themes\next\layout_partials\footer.swig文件,在类copyright前加上画红线这话：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script async src=&quot;https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>欢迎扫描我的微信，进行技术交流</p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1527169907.png?imageMogr2/thumbnail/!70p" alt=""></p><p>同时也欢迎您的打赏，这将鼓励我写出更多的文章</p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1527169944.png?imageMogr2/thumbnail/!70p" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;&lt;span id=&quot;an-zhuang-zhu-ti&quot;&gt;安装主题&lt;/span&gt;&lt;a href=&quot;#an-zhuang-zhu-ti&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;安装NexT，在其文件夹中鼠标右键，点击Git Base Here。
      
    
    </summary>
    
      <category term="hexo" scheme="http://baofengketang.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://baofengketang.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>使用hexo搭建个人博客</title>
    <link href="http://baofengketang.com/2018/05/13/hexo/hexo_01/"/>
    <id>http://baofengketang.com/2018/05/13/hexo/hexo_01/</id>
    <published>2018-05-13T08:19:23.000Z</published>
    <updated>2018-05-31T13:44:46.000Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="shi-yong-hexo-da-jian-shu-yu-zi-ji-de-bo-ke">使用Hexo搭建属于自己的博客</span><a href="#shi-yong-hexo-da-jian-shu-yu-zi-ji-de-bo-ke" class="header-anchor">#</a></h1><p>因最近有很多小伙伴咨询我如何写一个自己的博客，因为我的博客是采用mac系统搭建的，大部分小伙伴用的是window，因此本套教程我使用虚拟机上模拟window的环境搭建而成</p><h2><span id="1-an-zhuang-nodejs-huan-jing">1.安装nodejs环境</span><a href="#1-an-zhuang-nodejs-huan-jing" class="header-anchor">#</a></h2><p>首先安装nodejs，我下载的版本是node-v8.11.1-x64，这个步骤就直接next就可以</p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1526200039.png?imageMogr2/thumbnail/!70p" alt=""></p><p><strong>检测环境是否安装成功</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\jinzhong&gt;node -v</span><br><span class="line">v8.11.1</span><br><span class="line">C:\Users\jinzhong&gt;npm -v</span><br><span class="line">5.6.0</span><br></pre></td></tr></table></figure><p>如果出现以上提示就表示环境搭建完毕</p><h2><span id="2-an-zhuang-git-huan-jing">2.安装git环境</span><a href="#2-an-zhuang-git-huan-jing" class="header-anchor">#</a></h2><p>git版本：Git-2.17.0-64-bit</p><p>接下来开始安装.基本上一路next即可</p><p><strong>检测环境</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git --version</span><br><span class="line">git version 2.17.0.windows.1</span><br></pre></td></tr></table></figure><h2><span id="3-github-she-zhi">3.github设置</span><a href="#3-github-she-zhi" class="header-anchor">#</a></h2><p><strong>1.注册好了github后，进入github官网</strong></p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1526201382.png?imageMogr2/thumbnail/!70p" alt=""></p><hr><p><strong>2.新建仓库</strong></p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1526201701.png?imageMogr2/thumbnail/!70p" alt=""></p><p><strong>3.设置仓库</strong></p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1526201588.png?imageMogr2/thumbnail/!70p" alt=""></p><p>发现页面已经部署到服务器了，我们可以直接访问<a href="http://njwangbohz.github.io" target="_blank" rel="noopener">http://njwangbohz.github.io</a></p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1526201766.png?imageMogr2/thumbnail/!70p" alt=""></p><p>我们也可以选择一个主题，然后从新浏览</p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1526202110.png?imageMogr2/thumbnail/!70p" alt=""></p><p>至此git目前就搭建完毕了～，后期我们可以继续加一些其它设置</p><h2><span id="4-an-zhuang-hexo">4.安装hexo</span><a href="#4-an-zhuang-hexo" class="header-anchor">#</a></h2><p><strong>安装Hexo，随便在某个目录创建一个文件夹</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">C:\&gt;mkdir blog</span><br><span class="line">C:\&gt;cd blog</span><br><span class="line">C:\blog&gt;npm install hexo -g</span><br><span class="line">npm WARN deprecated titlecase@1.1.2: no longer maintained</span><br><span class="line">C:\Users\jinzhong\AppData\Roaming\npm\hexo -&gt; C:\Users\jinzhong\AppData\Roaming\</span><br><span class="line">npm\node_modules\hexo\bin\hexo</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span> nunjucks@3.1.2 postinstall C:\Users\jinzhong\AppData\Roaming\npm\node_modules\</span><br><span class="line">hexo\node_modules\nunjucks</span><br><span class="line"><span class="meta">&gt;</span> node postinstall-build.js src</span><br><span class="line"></span><br><span class="line">npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.3 (node_modules\hex</span><br><span class="line">o\node_modules\fsevents):</span><br><span class="line">npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@</span><br><span class="line">1.2.3: wanted &#123;"os":"darwin","arch":"any"&#125; (current: &#123;"os":"win32","arch":"x64"&#125;</span><br><span class="line">)</span><br><span class="line">+ hexo@3.7.1</span><br><span class="line">added 205 packages in 1230.836s</span><br></pre></td></tr></table></figure><p><strong>输入hexo －v检查hexo是否安装成功</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">C:\blog&gt;hexo -v</span><br><span class="line">hexo-cli: 1.1.0</span><br><span class="line">os: Windows_NT 6.1.7601 win32 x64</span><br><span class="line">http_parser: 2.8.0</span><br><span class="line">node: 8.11.1</span><br><span class="line">v8: 6.2.414.50</span><br><span class="line">uv: 1.19.1</span><br><span class="line">zlib: 1.2.11</span><br><span class="line">ares: 1.10.1-DEV</span><br><span class="line">modules: 57</span><br><span class="line">nghttp2: 1.25.0</span><br><span class="line">openssl: 1.0.2o</span><br><span class="line">icu: 60.1</span><br><span class="line">unicode: 10.0</span><br><span class="line">cldr: 32.0</span><br><span class="line">tz: 2017c</span><br></pre></td></tr></table></figure><p><strong>输入hexo init进行初始化</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">C:\blog&gt;hexo init</span><br><span class="line">INFO  Cloning hexo-starter to C:\blog</span><br><span class="line">Cloning into 'C:\blog'...</span><br><span class="line">remote: Counting objects: 65, done.</span><br><span class="line">remote: Compressing objects: 100% (3/3), done.</span><br><span class="line">remote: Total 65 (delta 0), reused 0 (delta 0), pack-reused 62</span><br><span class="line">Unpacking objects: 100% (65/65), done.</span><br><span class="line">Submodule 'themes/landscape' (https://github.com/hexojs/hexo-theme-landscape.git</span><br><span class="line">) registered for path 'themes/landscape'</span><br><span class="line">Cloning into 'C:/blog/themes/landscape'...</span><br><span class="line">remote: Counting objects: 819, done.</span><br><span class="line">remote: Total 819 (delta 0), reused 0 (delta 0), pack-reused 819</span><br><span class="line">Receiving objects: 100% (819/819), 2.54 MiB | 819.00 KiB/s, done.</span><br><span class="line">Resolving deltas: 100% (432/432), done.</span><br><span class="line">Submodule path 'themes/landscape': checked out '73a23c51f8487cfcd7c6deec96ccc754</span><br><span class="line">3960d350'</span><br><span class="line">INFO  Install dependencies</span><br><span class="line">��Ϣ: ���ṩ��ģʽ�޷��ҵ��ļ�</span><br><span class="line">npm WARN deprecated titlecase@1.1.2: no longer maintained</span><br><span class="line"><span class="meta">&gt;</span> nunjucks@3.1.2 postinstall C:\blog\node_modules\nunjucks</span><br><span class="line"><span class="meta">&gt;</span> node postinstall-build.js src</span><br><span class="line">npm notice created a lockfile as package-lock.json. You should commit this file.</span><br><span class="line">npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.3 (node_modules\fse</span><br><span class="line">vents):</span><br><span class="line">npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@</span><br><span class="line">1.2.3: wanted &#123;"os":"darwin","arch":"any"&#125; (current: &#123;"os":"win32","arch":"x64"&#125;</span><br><span class="line">)</span><br><span class="line">added 276 packages in 206.107s</span><br><span class="line">INFO  Start blogging with Hexo!</span><br></pre></td></tr></table></figure><p>输入npm install 安装所需要的组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">C:\blog&gt;npm install</span><br><span class="line">npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.3 (node_modules\fsevents):</span><br><span class="line">npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.3: wanted &#123;&quot;os&quot;:&quot;darwin&quot;,&quot;arch&quot;:&quot;any</span><br><span class="line">&quot;&#125; (current: &#123;&quot;os&quot;:&quot;win32&quot;,&quot;arch&quot;:&quot;x64&quot;&#125;)</span><br></pre></td></tr></table></figure><p><strong>接下来就可以体验一下hexo,启动服务</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">C:\blog&gt;hexo s</span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure><p>使用浏览器访问</p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1526204555.png?imageMogr2/thumbnail/!70p" alt=""></p><p><strong>5.hexo与github联系起来</strong></p><p>配置git的用户名和密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jinzhong@WIN-Q673GTLFDM6 MINGW64 /c/blog</span><br><span class="line"><span class="meta">$</span> git config --global user.name e "njwangbohz"</span><br><span class="line">jinzhong@WIN-Q673GTLFDM6 MINGW64 /c/blog</span><br><span class="line"><span class="meta">$</span> git config --global user.email "15189838151@163.com"</span><br></pre></td></tr></table></figure><p>生成..ssh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"> ssh-keygen -t rsa -C "15189838151@163.COM"</span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/c/Users/jinzhong/.ssh/id_rsa):</span><br><span class="line">Created directory '/c/Users/jinzhong/.ssh'.</span><br><span class="line">Enter passphrase (empty for no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br><span class="line">Your identification has been saved in /c/Users/jinzhong/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved in /c/Users/jinzhong/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:gkcWg2JUUOvQqfIIUqX60WZxBzjK51uxDrIpQwINNbE 15189838151@163.COM</span><br><span class="line">The key's randomart image is:</span><br><span class="line">+---[RSA 2048]----+</span><br><span class="line">| o*=+o+          |</span><br><span class="line">|. o*+o +         |</span><br><span class="line">| =Eo=.+ .        |</span><br><span class="line">|.o+=.*..         |</span><br><span class="line">|* oo* ooS        |</span><br><span class="line">|+*.+o.o.         |</span><br><span class="line">|+ o+ =           |</span><br><span class="line">|o o . .          |</span><br><span class="line">| o               |</span><br><span class="line">+----[SHA256]-----+</span><br></pre></td></tr></table></figure><p>进入.ssh目录,查看key文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jinzhong@WIN-Q673GTLFDM6 MINGW64 ~/.ssh</span><br><span class="line">$ cat id_rsa.pub</span><br><span class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCspC2HQMc7wTlzeCib7m0rzAuihSjDozR6sL0B4H7APyWTTQ3HWgUO7zRNCMFmLA5QYBzzsr4EBaGskMQa8Olktcj2iG62QQ06wzdYiFBVzOCDsbPaHwIL52O9+BiMzjC5VTfD18acASJh/qXBgkEjA1YJ9pnhk0hMHf5N/j4CoiB4guhTMyezRh5lMpfhBE9uq0UFVXGdBjmu0l/gj/UVCeWP/CFSfYo070ii50k6IMn+pE3OkQYB/36yEycu4vQp0HTfgPAD6qp2s3QRfwuS/jzSrbyhWbBs7YuTyVREdCVKUxhqcm+/+AceV520cCpftz1yHe2dm/JpJ4AjydlL 15189838151@163.COM</span><br></pre></td></tr></table></figure><p>将这个key添加到git中</p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1526220571.png?imageMogr2/thumbnail/!70p" alt=""></p><p>测试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> ssh -T git@github.com</span><br><span class="line">The authenticity of host 'github.com (52.74.223.119)' can't be established.</span><br><span class="line">RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.</span><br><span class="line">Are you sure you want to continue connecting (yes/no)? yes</span><br><span class="line">Warning: Permanently added 'github.com,52.74.223.119' (RSA) to the list of known hosts.</span><br><span class="line">Hi njwangbohz! You've successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure><p>配置blog目录下的_config.xml文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repo:</span> <span class="attr">https://github.com/njwangbohz/njwangbohz.github.io.git</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>安装插件并发布到git</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">C:\blog&gt;npm install --save hexo-deployer-git</span><br><span class="line">npm WARN deprecated swig@1.4.2: This package is no longer maintained</span><br><span class="line">npm WARN notice [SECURITY] uglify-js has 1 low vulnerability. Go here for more details: https://nodesecurity.io/advisori</span><br><span class="line">es?search=uglify-js&amp;version=2.4.24 - Run `npm i npm@latest -g` to upgrade your npm version, and then `npm audit` to get</span><br><span class="line">more info.</span><br><span class="line">npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.3 (node_modules\fsevents):</span><br><span class="line">npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.3: wanted &#123;"os":"darwin","arch":"any</span><br><span class="line">"&#125; (current: &#123;"os":"win32","arch":"x64"&#125;)</span><br><span class="line"></span><br><span class="line">+ hexo-deployer-git@0.3.1</span><br><span class="line">added 32 packages in 171.121s</span><br><span class="line"></span><br><span class="line">C:\blog&gt;hexo d</span><br><span class="line">INFO  Deploying: git</span><br><span class="line">INFO  Setting up Git deployment...</span><br><span class="line">Initialized empty Git repository in C:/blog/.deploy_git/.git/</span><br><span class="line">[master (root-commit) 86378a6] First commit</span><br><span class="line"> 1 file changed, 0 insertions(+), 0 deletions(-)</span><br><span class="line"> create mode 100644 placeholder</span><br><span class="line">INFO  Clearing .deploy_git folder...</span><br><span class="line">INFO  Copying files from public folder...</span><br><span class="line">INFO  Copying files from extend dirs...</span><br><span class="line">warning: LF will be replaced by CRLF in 2018/05/13/hello-world/index.html.</span><br><span class="line">The file will have its original line endings in your working directory.</span><br><span class="line">warning: LF will be replaced by CRLF in archives/2018/05/index.html.</span><br><span class="line">The file will have its original line endings in your working directory.</span><br><span class="line">warning: LF will be replaced by CRLF in archives/2018/index.html.</span><br><span class="line">The file will have its original line endings in your working directory.</span><br><span class="line">warning: LF will be replaced by CRLF in archives/index.html.</span><br><span class="line">The file will have its original line endings in your working directory.</span><br><span class="line">warning: LF will be replaced by CRLF in css/style.css.</span><br><span class="line">The file will have its original line endings in your working directory.</span><br><span class="line">warning: LF will be replaced by CRLF in fancybox/helpers/jquery.fancybox-buttons.css.</span><br><span class="line">The file will have its original line endings in your working directory.</span><br><span class="line">warning: LF will be replaced by CRLF in fancybox/helpers/jquery.fancybox-buttons.js.</span><br><span class="line">The file will have its original line endings in your working directory.</span><br><span class="line">warning: LF will be replaced by CRLF in fancybox/helpers/jquery.fancybox-media.js.</span><br><span class="line">The file will have its original line endings in your working directory.</span><br><span class="line">warning: LF will be replaced by CRLF in fancybox/helpers/jquery.fancybox-thumbs.css.</span><br><span class="line">The file will have its original line endings in your working directory.</span><br><span class="line">warning: LF will be replaced by CRLF in fancybox/helpers/jquery.fancybox-thumbs.js.</span><br><span class="line">The file will have its original line endings in your working directory.</span><br><span class="line">warning: LF will be replaced by CRLF in fancybox/jquery.fancybox.css.</span><br><span class="line">The file will have its original line endings in your working directory.</span><br><span class="line">warning: LF will be replaced by CRLF in fancybox/jquery.fancybox.js.</span><br><span class="line">The file will have its original line endings in your working directory.</span><br><span class="line">warning: LF will be replaced by CRLF in fancybox/jquery.fancybox.pack.js.</span><br><span class="line">The file will have its original line endings in your working directory.</span><br><span class="line">warning: LF will be replaced by CRLF in index.html.</span><br><span class="line">The file will have its original line endings in your working directory.</span><br><span class="line">warning: LF will be replaced by CRLF in js/script.js.</span><br><span class="line">The file will have its original line endings in your working directory.</span><br><span class="line">[master e16eabb] Site updated: 2018-05-13 23:14:34</span><br><span class="line"> 29 files changed, 5777 insertions(+)</span><br><span class="line"> create mode 100644 2018/05/13/hello-world/index.html</span><br><span class="line"> create mode 100644 archives/2018/05/index.html</span><br><span class="line"> create mode 100644 archives/2018/index.html</span><br><span class="line"> create mode 100644 archives/index.html</span><br><span class="line"> create mode 100644 css/fonts/FontAwesome.otf</span><br><span class="line"> create mode 100644 css/fonts/fontawesome-webfont.eot</span><br><span class="line"> create mode 100644 css/fonts/fontawesome-webfont.svg</span><br><span class="line"> create mode 100644 css/fonts/fontawesome-webfont.ttf</span><br><span class="line"> create mode 100644 css/fonts/fontawesome-webfont.woff</span><br><span class="line"> create mode 100644 css/images/banner.jpg</span><br><span class="line"> create mode 100644 css/style.css</span><br><span class="line"> create mode 100644 fancybox/blank.gif</span><br><span class="line"> create mode 100644 fancybox/fancybox_loading.gif</span><br><span class="line"> create mode 100644 fancybox/fancybox_loading@2x.gif</span><br><span class="line"> create mode 100644 fancybox/fancybox_overlay.png</span><br><span class="line"> create mode 100644 fancybox/fancybox_sprite.png</span><br><span class="line"> create mode 100644 fancybox/fancybox_sprite@2x.png</span><br><span class="line"> create mode 100644 fancybox/helpers/fancybox_buttons.png</span><br><span class="line"> create mode 100644 fancybox/helpers/jquery.fancybox-buttons.css</span><br><span class="line"> create mode 100644 fancybox/helpers/jquery.fancybox-buttons.js</span><br><span class="line"> create mode 100644 fancybox/helpers/jquery.fancybox-media.js</span><br><span class="line"> create mode 100644 fancybox/helpers/jquery.fancybox-thumbs.css</span><br><span class="line"> create mode 100644 fancybox/helpers/jquery.fancybox-thumbs.js</span><br><span class="line"> create mode 100644 fancybox/jquery.fancybox.css</span><br><span class="line"> create mode 100644 fancybox/jquery.fancybox.js</span><br><span class="line"> create mode 100644 fancybox/jquery.fancybox.pack.js</span><br><span class="line"> create mode 100644 index.html</span><br><span class="line"> create mode 100644 js/script.js</span><br><span class="line"> delete mode 100644 placeholder</span><br><span class="line">Username for 'https://github.com': 15189838151@163.com</span><br><span class="line">Password for 'https://15189838151@163.com@github.com':</span><br><span class="line">Branch 'master' set up to track remote branch 'master' from 'https://github.com/njwangbohz/njwangbohz.github.io.git'.</span><br><span class="line">To https://github.com/njwangbohz/njwangbohz.github.io.git</span><br><span class="line"> + 50f63d0...e16eabb HEAD -&gt; master (forced update)</span><br><span class="line">INFO  Deploy done: git</span><br><span class="line">C:\blog&gt;</span><br></pre></td></tr></table></figure><p>访问：</p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1526224893.png?imageMogr2/thumbnail/!70p" alt=""></p><p>欢迎扫描我的微信，进行技术交流</p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1527169907.png?imageMogr2/thumbnail/!70p" alt=""></p><p>同时也欢迎您的打赏，这将鼓励我写出更多的文章</p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1527169944.png?imageMogr2/thumbnail/!70p" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;&lt;span id=&quot;shi-yong-hexo-da-jian-shu-yu-zi-ji-de-bo-ke&quot;&gt;使用Hexo搭建属于自己的博客&lt;/span&gt;&lt;a href=&quot;#shi-yong-hexo-da-jian-shu-yu-zi-ji-de-bo-ke&quot; clas
      
    
    </summary>
    
      <category term="hexo" scheme="http://baofengketang.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://baofengketang.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Python基础(十三)</title>
    <link href="http://baofengketang.com/2018/05/13/python_base/python_13/"/>
    <id>http://baofengketang.com/2018/05/13/python_base/python_13/</id>
    <published>2018-05-13T03:52:56.000Z</published>
    <updated>2018-05-31T13:49:17.000Z</updated>
    
    <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#gei-cheng-xu-chuan-di-can-shu">给程序传递参数</a></li><li><a href="#lie-biao-tui-dao-shi">列表推导式</a></li><li><a href="#set-ji-he">Set集合</a></li></ul><!-- tocstop --></div><h1><span id="gei-cheng-xu-chuan-di-can-shu">给程序传递参数</span><a href="#gei-cheng-xu-chuan-di-can-shu" class="header-anchor">#</a></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">print(sys.argv)</span><br></pre></td></tr></table></figure><p>执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jinzhongdeMacBook-Pro:~ jinzhong$ python3 hello.py 1,2,3,4,5</span><br><span class="line">helloworld</span><br><span class="line">[&apos;hello.py&apos;, &apos;1,2,3,4,5&apos;]</span><br></pre></td></tr></table></figure><h1><span id="lie-biao-tui-dao-shi">列表推导式</span><a href="#lie-biao-tui-dao-shi" class="header-anchor">#</a></h1><p>所谓的列表推导式，指的就是轻量级循环创建列表</p><p><strong>基本方式</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">14</span>]: a= [x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">5</span>)]</span><br><span class="line">In [<span class="number">15</span>]: a</span><br><span class="line">Out[<span class="number">15</span>]: [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">In [<span class="number">16</span>]: a=[x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">3</span>,<span class="number">4</span>)]</span><br><span class="line">In [<span class="number">17</span>]: a</span><br><span class="line">In [<span class="number">19</span>]: a=[x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">2</span>,<span class="number">20</span>)]</span><br><span class="line">In [<span class="number">20</span>]: a</span><br><span class="line">Out[<span class="number">20</span>]: [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>]</span><br><span class="line">In [<span class="number">21</span>]: a=[x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">2</span>,<span class="number">20</span>,<span class="number">2</span>)]</span><br><span class="line">In [<span class="number">22</span>]: a</span><br><span class="line">Out[<span class="number">22</span>]: [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">16</span>, <span class="number">18</span>]</span><br></pre></td></tr></table></figure><p><strong>循环中使用if</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">28</span>]: a=[x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">2</span>,<span class="number">20</span>) <span class="keyword">if</span> x%<span class="number">2</span>==<span class="number">0</span>]</span><br><span class="line">In [<span class="number">29</span>]: a</span><br><span class="line">Out[<span class="number">29</span>]: [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">16</span>, <span class="number">18</span>]</span><br></pre></td></tr></table></figure><p><strong>2个for循环及多个循环</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">32</span>]: a=[(x,y) <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">3</span>)  <span class="keyword">for</span> y <span class="keyword">in</span> range(<span class="number">3</span>)]</span><br><span class="line">In [<span class="number">33</span>]: a</span><br><span class="line">Out[<span class="number">33</span>]: [(<span class="number">1</span>, <span class="number">0</span>), (<span class="number">1</span>, <span class="number">1</span>), (<span class="number">1</span>, <span class="number">2</span>), (<span class="number">2</span>, <span class="number">0</span>), (<span class="number">2</span>, <span class="number">1</span>), (<span class="number">2</span>, <span class="number">2</span>)]</span><br><span class="line"></span><br><span class="line">In [<span class="number">36</span>]: a=[(x,y,z) <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">3</span>) <span class="keyword">for</span> y <span class="keyword">in</span> range(<span class="number">3</span>,<span class="number">5</span>) <span class="keyword">for</span> z <span class="keyword">in</span> range(<span class="number">5</span>,<span class="number">8</span>)]</span><br><span class="line">    ...:</span><br><span class="line">In [<span class="number">37</span>]: a</span><br><span class="line">Out[<span class="number">37</span>]:</span><br><span class="line">[(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>),</span><br><span class="line"> (<span class="number">1</span>, <span class="number">3</span>, <span class="number">6</span>),</span><br><span class="line"> (<span class="number">1</span>, <span class="number">3</span>, <span class="number">7</span>),</span><br><span class="line"> (<span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>),</span><br><span class="line"> (<span class="number">1</span>, <span class="number">4</span>, <span class="number">6</span>),</span><br><span class="line"> (<span class="number">1</span>, <span class="number">4</span>, <span class="number">7</span>),</span><br><span class="line"> (<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>),</span><br><span class="line"> (<span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>),</span><br><span class="line"> (<span class="number">2</span>, <span class="number">3</span>, <span class="number">7</span>),</span><br><span class="line"> (<span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>),</span><br><span class="line"> (<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>),</span><br><span class="line"> (<span class="number">2</span>, <span class="number">4</span>, <span class="number">7</span>)]</span><br></pre></td></tr></table></figure><h1><span id="set-ji-he">Set集合</span><a href="#set-ji-he" class="header-anchor">#</a></h1><p><strong>set集合</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: a=set()</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: type(a)</span><br><span class="line">Out[<span class="number">2</span>]: set</span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: b=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">12</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: b</span><br><span class="line">Out[<span class="number">4</span>]: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">12</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: c=set(b)</span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: type(c)</span><br><span class="line">Out[<span class="number">6</span>]: set</span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: c</span><br><span class="line">Out[<span class="number">7</span>]: &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">12</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: d=list(c)</span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: d</span><br><span class="line">Out[<span class="number">9</span>]: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">12</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]: type(d)</span><br><span class="line">Out[<span class="number">10</span>]: list</span><br></pre></td></tr></table></figure><p><strong>互相转换</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">13</span>]: d</span><br><span class="line">Out[<span class="number">13</span>]: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">12</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">14</span>]: e=tuple(d)</span><br><span class="line"></span><br><span class="line">In [<span class="number">15</span>]: e</span><br><span class="line">Out[<span class="number">15</span>]: (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">12</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">16</span>]: f =list(e)</span><br><span class="line"></span><br><span class="line">In [<span class="number">17</span>]: f</span><br><span class="line">Out[<span class="number">17</span>]: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">12</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">18</span>]: g=set(e)</span><br><span class="line"></span><br><span class="line">In [<span class="number">19</span>]: g</span><br><span class="line">Out[<span class="number">19</span>]: &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">12</span>&#125;</span><br></pre></td></tr></table></figure><p>使用set可以快速的完成对list中的元素的去重复操作</p><p>欢迎扫描我的微信，进行技术交流</p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1527169907.png?imageMogr2/thumbnail/!70p" alt=""></p><p>同时也欢迎您的打赏，这将鼓励我写出更多的文章</p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1527169944.png?imageMogr2/thumbnail/!70p" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;toc&quot;&gt;

&lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#gei-cheng-xu-chuan-di-can-shu&quot;&gt;给程序传递参数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#lie-biao-tui-dao-shi&quot;&gt;列表推导式
      
    
    </summary>
    
      <category term="Python" scheme="http://baofengketang.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://baofengketang.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>爬虫实践－爬取51job岗位</title>
    <link href="http://baofengketang.com/2018/05/10/python_data/python_data_06/"/>
    <id>http://baofengketang.com/2018/05/10/python_data/python_data_06/</id>
    <published>2018-05-10T14:54:03.000Z</published>
    <updated>2018-05-31T13:48:36.000Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="pa-chong-shi-jian-pa-qu-51job-gang-wei">爬虫实践－爬取51job岗位</span><a href="#pa-chong-shi-jian-pa-qu-51job-gang-wei" class="header-anchor">#</a></h1><h2><span id="fen-xi-ji-ben-yuan-su-pa-qu">分析-基本元素爬取</span><a href="#fen-xi-ji-ben-yuan-su-pa-qu" class="header-anchor">#</a></h2><p>打开网站</p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1526177758.png?imageMogr2/thumbnail/!70p" alt=""></p><p>我们现在要获取到职位、公司、工作地点、薪资，发布时间这里的数据，通过审查元素来观察一下</p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1526178105.png?imageMogr2/thumbnail/!70p" alt=""></p><p>有了这些规则，那么我们就可以通过爬虫来进行数据的爬取操作了</p><p>首先我们来爬取本页的第一条数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#encoding="UTF-8"</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">headers=&#123;</span><br><span class="line">    <span class="string">"User-Agent"</span>:<span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:59.0) Gecko/20100101 Firefox/59.0"</span></span><br><span class="line">&#125;</span><br><span class="line">url=<span class="string">"https://search.51job.com/list/070200,000000,0000,00,9,99,java,2,1.html?lang=c&amp;stype=1&amp;postchannel=0000&amp;workyear=99&amp;cotype=99&amp;degreefrom=99&amp;jobterm=99&amp;companysize=99&amp;lonlat=0%2C0&amp;radius=-1&amp;ord_field=0&amp;confirmdate=9&amp;fromType=&amp;dibiaoid=0&amp;address=&amp;line=&amp;specialarea=00&amp;from=&amp;welfare="</span></span><br><span class="line">count=<span class="number">0</span>;</span><br><span class="line">res=requests.get(url,headers=headers)</span><br><span class="line">res.encoding=<span class="string">"gb2312"</span></span><br><span class="line">soup = BeautifulSoup(res.text,<span class="string">"html.parser"</span>);</span><br><span class="line">soup.prettify()</span><br><span class="line">titles=soup.select(<span class="string">"span.t1,p.t1 span"</span>)</span><br><span class="line">company = soup.select(<span class="string">"span.t2"</span>)</span><br><span class="line">address = soup.select(<span class="string">".dw_table span.t3"</span>)</span><br><span class="line">sal= soup.select(<span class="string">"span.t4"</span>)</span><br><span class="line">publishTime=soup.select(<span class="string">"span.t5"</span>)</span><br><span class="line">i=<span class="number">1</span></span><br><span class="line">print(titles[i].text.strip(),company[i].text.strip(),address[i].text.strip(),sal[i].text.strip(),publishTime[i].text.strip());</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hadoop开发工程师 南京森根科技发展有限公司 南京 1-2万/月 05-13</span><br></pre></td></tr></table></figure><h2><span id="fen-xi-dong-tai-pa-qu">分析-动态爬取</span><a href="#fen-xi-dong-tai-pa-qu" class="header-anchor">#</a></h2><p>好了，有了第一条数据之后，我们下面来增加动态的操作，用来爬取每页的所有数据，先观察一共多少页，以及页面的地址的变化</p><p>点击第二页，观察页面地址</p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1526178701.png?imageMogr2/thumbnail/!70p" alt=""></p><p>同时我们也猜测了一下，如果将上图中的java换成python试试看页面的运行结果是什么</p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1526178777.png?imageMogr2/thumbnail/!70p" alt=""></p><p>那么接下来我们就可以通过参数拼接的方式来进行动态爬取了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#encoding="UTF-8"</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">headers=&#123;</span><br><span class="line">    <span class="string">"User-Agent"</span>:<span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:59.0) Gecko/20100101 Firefox/59.0"</span></span><br><span class="line">&#125;</span><br><span class="line">url=<span class="string">"https://search.51job.com/list/070200,000000,0000,00,9,99,java,2,1.html?lang=c&amp;stype=1&amp;postchannel=0000&amp;workyear=99&amp;cotype=99&amp;degreefrom=99&amp;jobterm=99&amp;companysize=99&amp;lonlat=0%2C0&amp;radius=-1&amp;ord_field=0&amp;confirmdate=9&amp;fromType=&amp;dibiaoid=0&amp;address=&amp;line=&amp;specialarea=00&amp;from=&amp;welfare="</span></span><br><span class="line">count=<span class="number">0</span>;</span><br><span class="line">keywords=<span class="string">"java"</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">91</span>):</span><br><span class="line">    res=requests.get(<span class="string">"https://search.51job.com/list/070200,000000,0000,00,9,99,"</span>+keywords+<span class="string">",2,"</span>+str(j)+<span class="string">".html?lang=c&amp;stype=1&amp;postchannel=0000&amp;workyear=99&amp;cotype=99&amp;degreefrom=99&amp;jobterm=99&amp;companysize=99&amp;lonlat=0%2C0&amp;radius=-1&amp;ord_field=0&amp;confirmdate=9&amp;fromType=&amp;dibiaoid=0&amp;address=&amp;line=&amp;specialarea=00&amp;from=&amp;welfare="</span>,headers=headers)</span><br><span class="line">    res.encoding=<span class="string">"gb2312"</span></span><br><span class="line">    soup = BeautifulSoup(res.text,<span class="string">"html.parser"</span>);</span><br><span class="line">    soup.prettify()</span><br><span class="line">    titles=soup.select(<span class="string">"span.t1,p.t1 span"</span>)</span><br><span class="line">    company = soup.select(<span class="string">"span.t2"</span>)</span><br><span class="line">    address = soup.select(<span class="string">".dw_table span.t3"</span>)</span><br><span class="line">    sal= soup.select(<span class="string">"span.t4"</span>)</span><br><span class="line">    publishTime=soup.select(<span class="string">"span.t5"</span>)</span><br><span class="line">    i=<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> i&lt;len(titles):</span><br><span class="line">        print(titles[i].text.strip(),company[i].text.strip(),address[i].text.strip(),sal[i].text.strip(),publishTime[i].text.strip());</span><br><span class="line">        i = i + <span class="number">1</span></span><br><span class="line">print(count)</span><br></pre></td></tr></table></figure><p>运行结果就不展示了，数据量太大</p><h2><span id="bao-cun-shu-ju">保存数据</span><a href="#bao-cun-shu-ju" class="header-anchor">#</a></h2><p>之前我们都是将数据保存在文本中的，那么如果我想讲数据保存到数据库中怎么办呢？这里以mysql数据库为例</p><p>首先我们得通过pip安装mysqlclient库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install mysqlclient</span><br></pre></td></tr></table></figure><p>安装完毕后，就可以使用mysql来进行保存数据了，关于mysql的具体操作，这里就不做详细介绍了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#encoding="UTF-8"</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="comment">#引入mysql数据库</span></span><br><span class="line"><span class="keyword">import</span> MySQLdb</span><br><span class="line">headers=&#123;</span><br><span class="line">    <span class="string">"User-Agent"</span>:<span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:59.0) Gecko/20100101 Firefox/59.0"</span></span><br><span class="line">&#125;</span><br><span class="line">url=<span class="string">"https://search.51job.com/list/070200,000000,0000,00,9,99,java,2,1.html?lang=c&amp;stype=1&amp;postchannel=0000&amp;workyear=99&amp;cotype=99&amp;degreefrom=99&amp;jobterm=99&amp;companysize=99&amp;lonlat=0%2C0&amp;radius=-1&amp;ord_field=0&amp;confirmdate=9&amp;fromType=&amp;dibiaoid=0&amp;address=&amp;line=&amp;specialarea=00&amp;from=&amp;welfare="</span></span><br><span class="line">count=<span class="number">0</span>;</span><br><span class="line">keywords=<span class="string">"java"</span></span><br><span class="line"><span class="comment">#获取mysql的链接</span></span><br><span class="line">conn=MySQLdb.connect(<span class="string">"localhost"</span>,port=<span class="number">3306</span>,user=<span class="string">"root"</span>,password=<span class="string">"root"</span>,db=<span class="string">"mytest"</span>,charset=<span class="string">"utf8"</span>)</span><br><span class="line">print(conn)</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">90</span>):</span><br><span class="line">    res=requests.get(<span class="string">"https://search.51job.com/list/070200,000000,0000,00,9,99,"</span>+keywords+<span class="string">",2,"</span>+str(j)+<span class="string">".html?lang=c&amp;stype=1&amp;postchannel=0000&amp;workyear=99&amp;cotype=99&amp;degreefrom=99&amp;jobterm=99&amp;companysize=99&amp;lonlat=0%2C0&amp;radius=-1&amp;ord_field=0&amp;confirmdate=9&amp;fromType=&amp;dibiaoid=0&amp;address=&amp;line=&amp;specialarea=00&amp;from=&amp;welfare="</span>,headers=headers)</span><br><span class="line">    res.encoding=<span class="string">"gb2312"</span></span><br><span class="line">    soup = BeautifulSoup(res.text,<span class="string">"html.parser"</span>);</span><br><span class="line">    soup.prettify()</span><br><span class="line">    titles=soup.select(<span class="string">"span.t1,p.t1 span"</span>)</span><br><span class="line">    company = soup.select(<span class="string">"span.t2"</span>)</span><br><span class="line">    address = soup.select(<span class="string">".dw_table span.t3"</span>)</span><br><span class="line">    sal= soup.select(<span class="string">"span.t4"</span>)</span><br><span class="line">    publishTime=soup.select(<span class="string">"span.t5"</span>)</span><br><span class="line">    i=<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> i&lt;len(titles):</span><br><span class="line">        print(titles[i].text.strip(),company[i].text.strip(),address[i].text.strip(),sal[i].text.strip(),publishTime[i].text.strip());</span><br><span class="line">        count+=<span class="number">1</span></span><br><span class="line">        cursor=conn.cursor()</span><br><span class="line">        <span class="comment">#执行游标</span></span><br><span class="line">        cursor.execute(<span class="string">"insert into jobs(title,company,address,sal,pub_time) values (%s,%s,%s,%s,%s)"</span>,(titles[i].text.strip(),company[i].text.strip(),address[i].text.strip(),sal[i].text.strip(),publishTime[i].text.strip()))</span><br><span class="line">        i = i + <span class="number">1</span></span><br><span class="line"><span class="comment">#关闭资源</span></span><br><span class="line">conn.commit()</span><br><span class="line">cursor.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><p>欢迎扫描我的微信，进行技术交流</p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1527169907.png?imageMogr2/thumbnail/!70p" alt=""></p><p>同时也欢迎您的打赏，这将鼓励我写出更多的文章</p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1527169944.png?imageMogr2/thumbnail/!70p" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;&lt;span id=&quot;pa-chong-shi-jian-pa-qu-51job-gang-wei&quot;&gt;爬虫实践－爬取51job岗位&lt;/span&gt;&lt;a href=&quot;#pa-chong-shi-jian-pa-qu-51job-gang-wei&quot; class=&quot;header-a
      
    
    </summary>
    
      <category term="爬虫" scheme="http://baofengketang.com/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="http://baofengketang.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Python爬虫实践－今日头条（获取js动态内容）</title>
    <link href="http://baofengketang.com/2018/05/10/python_data/python_data_05/"/>
    <id>http://baofengketang.com/2018/05/10/python_data/python_data_05/</id>
    <published>2018-05-10T08:03:34.000Z</published>
    <updated>2018-05-31T13:49:15.000Z</updated>
    
    <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#python-pa-chong-shi-jian-jin-ri-tou-tiao">Python爬虫实践－今日头条</a><ul><li><a href="#xu-qiu-fen-xi">需求分析</a></li><li><a href="#pa-qu-jin-ri-tou-tiao">爬取今日头条</a></li></ul></li></ul><!-- tocstop --></div><h1><span id="python-pa-chong-shi-jian-jin-ri-tou-tiao">Python爬虫实践－今日头条</span><a href="#python-pa-chong-shi-jian-jin-ri-tou-tiao" class="header-anchor">#</a></h1><h2><span id="xu-qiu-fen-xi">需求分析</span><a href="#xu-qiu-fen-xi" class="header-anchor">#</a></h2><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1525940989.png?imageMogr2/thumbnail/!70p" alt=""></p><p>通过审查元素我们发现页面内容基本上都是js生成而来的，我们在浏览器上看到，但是html源码中缺发现不了</p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1525941194.png?imageMogr2/thumbnail/!70p" alt=""></p><p>对于这种情况我们应该如何进行爬取呢</p><blockquote><p>方式一:从网页响应中找到js脚本返回的json数据</p><p>方式二:使用Selenium对网页进行模拟访问</p></blockquote><p>这里我们采用第一种方式</p><h2><span id="pa-qu-jin-ri-tou-tiao">爬取今日头条</span><a href="#pa-qu-jin-ri-tou-tiao" class="header-anchor">#</a></h2><p>即使网页内容是由 JS 动态生成加载的,JS 也需要对某个接口进行调用,并根据接口返回 的 JSON 数据再进行加载和渲染。所以我们可以找到 JS 调用的数据接口,从数据接口中找 到网页中最后呈现的数据。就以今日头条为例来演示: </p><p>找到js请求的数据接口</p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1525942736.png?imageMogr2/thumbnail/!70p" alt=""></p><p>这里我们就采用python来爬去该网站的图片轮播图这块的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">url=<span class="string">"https://www.toutiao.com/api/pc/focus/"</span></span><br><span class="line">data=requests.get(url).text</span><br><span class="line">myjsons=json.loads(data)</span><br><span class="line">titles=myjsons[<span class="string">"data"</span>][<span class="string">"pc_feed_focus"</span>]</span><br><span class="line"><span class="keyword">for</span> temp <span class="keyword">in</span> titles:</span><br><span class="line">    title= temp.get(<span class="string">"title"</span>)</span><br><span class="line">    image_url=temp.get(<span class="string">"image_url"</span>)[<span class="number">2</span>:]</span><br><span class="line">    print(<span class="string">"标题:"</span>,title,<span class="string">"图片链接："</span>,image_url)</span><br></pre></td></tr></table></figure><p>欢迎扫描我的微信，进行技术交流</p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1527169907.png?imageMogr2/thumbnail/!70p" alt=""></p><p>同时也欢迎您的打赏，这将鼓励我写出更多的文章</p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1527169944.png?imageMogr2/thumbnail/!70p" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;toc&quot;&gt;

&lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#python-pa-chong-shi-jian-jin-ri-tou-tiao&quot;&gt;Python爬虫实践－今日头条&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#xu-qiu-fe
      
    
    </summary>
    
      <category term="爬虫" scheme="http://baofengketang.com/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="http://baofengketang.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Python网络爬虫实践－腾讯新闻</title>
    <link href="http://baofengketang.com/2018/05/10/python_data/python_data_04/"/>
    <id>http://baofengketang.com/2018/05/10/python_data/python_data_04/</id>
    <published>2018-05-10T03:36:41.000Z</published>
    <updated>2018-05-31T13:49:15.000Z</updated>
    
    <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#pa-chong-shi-jian-teng-xun-xin-wen">爬虫实践－腾讯新闻</a><ul><li><a href="#wang-zhan-fen-xi">网站分析</a></li><li><a href="#ding-zhi-qing-qiu-tou">定制请求头</a></li><li><a href="#chuan-di-url-can-shu">传递url参数</a></li><li><a href="#fa-song-post-qing-qiu">发送POST请求</a></li><li><a href="#chao-shi">超时</a></li><li><a href="#huo-qu-xiang-ying-de-nei-rong">获取响应的内容</a></li><li><a href="#kai-shi-pa-qu-shu-ju">开始爬取数据</a></li></ul></li></ul><!-- tocstop --></div><h1><span id="pa-chong-shi-jian-teng-xun-xin-wen">爬虫实践－腾讯新闻</span><a href="#pa-chong-shi-jian-teng-xun-xin-wen" class="header-anchor">#</a></h1><h2><span id="wang-zhan-fen-xi">网站分析</span><a href="#wang-zhan-fen-xi" class="header-anchor">#</a></h2><p>打开腾讯新闻：<a href="http://news.qq.com/" target="_blank" rel="noopener">http://news.qq.com/</a></p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1525936909.png?imageMogr2/thumbnail/!70p" alt=""></p><h2><span id="ding-zhi-qing-qiu-tou">定制请求头</span><a href="#ding-zhi-qing-qiu-tou" class="header-anchor">#</a></h2><p>观察一下该网站的请求头</p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1525937054.png?imageMogr2/thumbnail/!70p" alt=""></p><p>请求头Headers提供了关于请求、响应或者其它发送实体的信息，对于爬虫而言，请求头十分重要，如果没有请求头或者请求头和实际网页不一致，就可能无法返回正确的结果</p><p>Request并不会基于定制的请求头Header的具体情况改变自己的行为，只是在最后的请求中，所有的请求头信息都会被传递进去</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">headers=&#123;</span><br><span class="line">    <span class="string">"User-Agent"</span>:<span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:59.0) Gecko/20100101 Firefox/59.0"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="chuan-di-url-can-shu">传递url参数</span><a href="#chuan-di-url-can-shu" class="header-anchor">#</a></h2><p>为了请求特定的数据，我们需要在URL的查询字符串中加入某些数据，如果你是自己构建的url，那么数据一般会跟在一个问好后面，并且以键/值的形式放在URL中,比如 url?key1=value1</p><p>在Request中，我们可以将这些参数保存在字典中，用params构建至url中,例如传递key1＝value1和key2=value2</p><p>到url上可以这么编写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">headers=&#123;</span><br><span class="line">    <span class="string">"User-Agent"</span>:<span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:59.0) Gecko/20100101 Firefox/59.0"</span></span><br><span class="line">&#125;</span><br><span class="line">key_dict=&#123;<span class="string">"key1"</span>:<span class="string">"value1"</span>,<span class="string">"key2"</span>:<span class="string">"value2"</span>&#125;</span><br><span class="line">url=<span class="string">"http://news.qq.com/"</span></span><br><span class="line">r=requests.get(url,headers=headers,params=key_dict)</span><br><span class="line">print(<span class="string">"响应状态码"</span>,r.status_code)</span><br></pre></td></tr></table></figure><h2><span id="fa-song-post-qing-qiu">发送POST请求</span><a href="#fa-song-post-qing-qiu" class="header-anchor">#</a></h2><p>除了发送get请求外，有时候还需要发送一些编码为表单形式的数据，比如登陆的时候为POST,因为如果使用GET请求，密码显示在URL上，这是非常不安全的，如果实现post请求，只需要简单的传递一个字典给Requests中的data参数，这个字典就会在发出请求的时候自动编码为表单形式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">headers=&#123;</span><br><span class="line">    <span class="string">"User-Agent"</span>:<span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:59.0) Gecko/20100101 Firefox/59.0"</span></span><br><span class="line">&#125;</span><br><span class="line">key_dict=&#123;<span class="string">"key1"</span>:<span class="string">"value1"</span>,<span class="string">"key2"</span>:<span class="string">"value2"</span>&#125;</span><br><span class="line">url=<span class="string">"http://news.qq.com/"</span></span><br><span class="line">r=requests.post(url,headers=headers,data=key_dict)</span><br><span class="line">print(<span class="string">"响应状态码"</span>,r.status_code)</span><br></pre></td></tr></table></figure><h2><span id="chao-shi">超时</span><a href="#chao-shi" class="header-anchor">#</a></h2><p>有的时候爬虫会遇到服务器长时间不返回，这个时候爬虫就会一直等待，造成爬虫没有顺利的进行，因此可以在requests的timeout参数设定的秒数结束之后停止等待响应，意思就是，服务器在timeout秒内没有应答，就返回异常</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">headers=&#123;</span><br><span class="line">    <span class="string">"User-Agent"</span>:<span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:59.0) Gecko/20100101 Firefox/59.0"</span></span><br><span class="line">&#125;</span><br><span class="line">key_dict=&#123;<span class="string">"key1"</span>:<span class="string">"value1"</span>,<span class="string">"key2"</span>:<span class="string">"value2"</span>&#125;</span><br><span class="line">url=<span class="string">"https://movie.douban.com/top250"</span></span><br><span class="line">r=requests.get(url,headers=headers,timeout=<span class="number">0.001</span>)</span><br><span class="line">print(<span class="string">"响应状态码"</span>,r.status_code)</span><br></pre></td></tr></table></figure><p>运行时报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">requests.exceptions.ConnectTimeout: HTTPSConnectionPool(host=&apos;news.qq.com&apos;, port=443): Max retries exceeded with url: /top250 (Caused by ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x1086c3080&gt;, &apos;Connection to movie.douban.com timed out. (connect timeout=0.001)&apos;))</span><br></pre></td></tr></table></figure><p>一般情况我们将这个值设置为20秒</p><h2><span id="huo-qu-xiang-ying-de-nei-rong">获取响应的内容</span><a href="#huo-qu-xiang-ying-de-nei-rong" class="header-anchor">#</a></h2><blockquote><p>在request中，最常用的功能就是获取某个网页的内容</p><p>r=requests.get(“url”)：方法返回一个response对象</p><p>通过这个response对象我们可以获取我们想要的信息</p><p>r.text:是服务器响应的内容，会自动根据响应头部的字符编码进行解码</p><p>r.encoding:是服务器内容使用的文本编码</p><p>r.status_code:用于监测响应的状态码，如200，404等</p><p>r.content:是字节码的响应体，会自动解码gzip和deflate编码的数据</p><p>r.json():是requests中内置的josn解码器</p></blockquote><h2><span id="kai-shi-pa-qu-shu-ju">开始爬取数据</span><a href="#kai-shi-pa-qu-shu-ju" class="header-anchor">#</a></h2><p>我们需要爬取这个页面的每个新闻的标题，鼠标右击一条新闻标题，选择“审查元素”<img src="http://p6wdo7p1v.bkt.clouddn.com/1525937309.png?imageMogr2/thumbnail/!70p" alt=""></p><p>在次审查一下另外一个元素</p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1525937389.png?imageMogr2/thumbnail/!70p" alt=""></p><p>发现有共性，接下来我们就可以采用爬虫来进行爬取我们需要的标题与链接内容了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#encoding=UTF-8</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">headers=&#123;</span><br><span class="line">    <span class="string">"User-Agent"</span>:<span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:59.0) Gecko/20100101 Firefox/59.0"</span></span><br><span class="line">&#125;</span><br><span class="line">url = <span class="string">"http://news.qq.com"</span></span><br><span class="line">r=requests.get(url,headers=headers)</span><br><span class="line">data = r.text</span><br><span class="line">soup =BeautifulSoup(data,<span class="string">"html.parser"</span>)</span><br><span class="line">news=soup.select(<span class="string">"div.text em.l24 a.linkto"</span>)</span><br><span class="line">f=open(<span class="string">"news.txt"</span>,<span class="string">"w"</span>)</span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> news:</span><br><span class="line">    title=n.get_text();</span><br><span class="line">    link=n.get(<span class="string">"href"</span>)</span><br><span class="line">    data=&#123;</span><br><span class="line">        <span class="string">"标题"</span>:title,</span><br><span class="line">        <span class="string">"链接"</span>:link</span><br><span class="line">    &#125;</span><br><span class="line">    print(data)</span><br><span class="line">    f.write(<span class="string">"%s:%s"</span>%(title,link)+<span class="string">"\n"</span>)</span><br><span class="line"></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>欢迎扫描我的微信，进行技术交流</p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1527169907.png?imageMogr2/thumbnail/!70p" alt=""></p><p>同时也欢迎您的打赏，这将鼓励我写出更多的文章</p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1527169944.png?imageMogr2/thumbnail/!70p" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;toc&quot;&gt;

&lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#pa-chong-shi-jian-teng-xun-xin-wen&quot;&gt;爬虫实践－腾讯新闻&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#wang-zhan-fen-xi&quot;&gt;网站分
      
    
    </summary>
    
      <category term="爬虫" scheme="http://baofengketang.com/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="http://baofengketang.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Python爬虫入门</title>
    <link href="http://baofengketang.com/2018/05/10/python_data/python_data_03/"/>
    <id>http://baofengketang.com/2018/05/10/python_data/python_data_03/</id>
    <published>2018-05-10T01:32:32.000Z</published>
    <updated>2018-05-31T13:49:16.000Z</updated>
    
    <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#python-pa-chong-ru-men">Python爬虫入门</a><ul><li><a href="#http-qing-qiu">Http请求</a></li><li><a href="#http-de-ji-ben-gai-nian">Http的基本概念</a><ul><li><a href="#http-gai-lan">HTTP概览</a></li><li><a href="#http-qing-qiu-tou">Http请求头</a></li></ul></li><li><a href="#bian-xie-di-yi-ge-jian-dan-de-pa-chong">编写第一个简单的爬虫</a><ul><li><a href="#di-yi-bu-huo-qu-ye-mian">第一步：获取页面</a></li><li><a href="#di-er-bu-huo-qu-xu-yao-de-shu-ju">第二步：获取需要的数据</a></li><li><a href="#di-san-bu-cun-chu-shu-ju">第三步：存储数据</a></li></ul></li></ul></li></ul><!-- tocstop --></div><h1><span id="python-pa-chong-ru-men">Python爬虫入门</span><a href="#python-pa-chong-ru-men" class="header-anchor">#</a></h1><h2><span id="http-qing-qiu">Http请求</span><a href="#http-qing-qiu" class="header-anchor">#</a></h2><p>无论我们通过浏览器打开网站、访问网页,还是通过脚本对 URL 网址进行访问,本质上都 是对HTTP服务器的请求,浏览器上所呈现的、控制台所显示的都是HTTP服务器对我们请求的响应。 </p><p>以打开我的博客为例,我们在地址栏输入“<a href="http://www.baofengketang.com”,浏览器上呈现的是下图" target="_blank" rel="noopener">www.baofengketang.com”,浏览器上呈现的是下图</a></p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1525916301.png?imageMogr2/thumbnail/!70p" alt=""></p><p>进入到开发者模式</p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1525916518.png?imageMogr2/thumbnail/!70p" alt=""></p><p>响应的源代码如下</p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1525916673.png?imageMogr2/thumbnail/!70p" alt=""></p><h2><span id="http-de-ji-ben-gai-nian">Http的基本概念</span><a href="#http-de-ji-ben-gai-nian" class="header-anchor">#</a></h2><p>通常 HTTP 消息包括客户机向服务器的请求消息和服务器向客户机的响应消息。这两种类型的消息由一个起始行,一个或者多个头域,一个指示头域结束的空行和可选的消息体组成</p><h3><span id="http-gai-lan">HTTP概览</span><a href="#http-gai-lan" class="header-anchor">#</a></h3><p>Request URl:表示请求的 URL  Request Method:表示请求的方法,此处为 GET。除此之外,HTTP 的请求方法还有 OPTION、 HEAD、POST、DELETE、PUT 等,而最常用的就是 GET 和 POST 方法: </p><blockquote><p>POST</p><p>向指定资源提交数据,请求服务器进行处理(例如提交表单或者上传文件)。数据被包含在请求本文中。这个请求可能会创建新的资源或修改现有资源,或二者皆有。 </p><p>GET</p><p>向指定的资源发出“显示”请求</p></blockquote><p>Status Code:显示 HTTP 请求和状态码,表示 HTTP 请求的状态,此处为 200,表示请求已被服务器接收、理解和处理; 状态代码的第一个数字代表当前响应的类型,HTTP 协议中有以下几种响应类型 </p><blockquote><p>1xx 消息——请求已被服务器接收,继续处理 </p><p>2xx 成功——请求已成功被服务器接收、理解、并接受 </p><p>3xx 重定向——需要后续操作才能完成这一请求 </p><p>4xx 请求错误——请求含有词法错误或者无法被执行 </p></blockquote><h3><span id="http-qing-qiu-tou">Http请求头</span><a href="#http-qing-qiu-tou" class="header-anchor">#</a></h3><blockquote><p>Accept:表示请求的资源类型 </p><p>Cookie:为了辨别用户身份、进行 session 跟踪而储存在用户本地终端上的数据; </p><p>User-Agent:表示浏览器标识; </p><p>Accept-Language:表示浏览器所支持的语言类型;  </p><p>Accept-Charset:告诉 Web 服务器,浏览器可以接受哪些字符编码;</p><p>Accept:表示浏览器支持的 MIME 类型;</p><p>Accept-Encoding:表示浏览器有能力解码的编码类型; </p><p>Connection:表示客户端与服务连接类型; </p></blockquote><p>基本的 HTTP 介绍就结束了,如果需要更加详细的 HTTP 知识, 可以阅读相关书籍</p><h2><span id="bian-xie-di-yi-ge-jian-dan-de-pa-chong">编写第一个简单的爬虫</span><a href="#bian-xie-di-yi-ge-jian-dan-de-pa-chong" class="header-anchor">#</a></h2><p>使用python爬去我的博客中的首页中的文章标题</p><h3><span id="di-yi-bu-huo-qu-ye-mian">第一步：获取页面</span><a href="#di-yi-bu-huo-qu-ye-mian" class="header-anchor">#</a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:UTF-8</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url=<span class="string">"https://baofengketang.com"</span></span><br><span class="line">data = requests.get(url)</span><br><span class="line">headers = &#123;<span class="string">"User-Agent"</span>:<span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:59.0) Gecko/20100101 Firefox/59.0"</span>&#125;</span><br><span class="line">res = requests.get(url,headers=headers)</span><br><span class="line">print(res.text)</span><br></pre></td></tr></table></figure><p> <strong>注意：</strong></p><blockquote><p>requests的headers伪装成浏览器访问</p><p>res是requests的Response对象，我们可以从中获取到我们的信息,res.text是获取网页内容代码</p></blockquote><h3><span id="di-er-bu-huo-qu-xu-yao-de-shu-ju">第二步：获取需要的数据</span><a href="#di-er-bu-huo-qu-xu-yao-de-shu-ju" class="header-anchor">#</a></h3><p>首先观察页面中我们需要的数据的特征</p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1525920715.png?imageMogr2/thumbnail/!70p" alt=""></p><p>测试编写代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:UTF-8</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">url=<span class="string">"https://baofengketang.com"</span></span><br><span class="line">data = requests.get(url)</span><br><span class="line">headers = &#123;<span class="string">"User-Agent"</span>:<span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:59.0) Gecko/20100101 Firefox/59.0"</span>&#125;</span><br><span class="line">res = requests.get(url,headers=headers)</span><br><span class="line">soup = BeautifulSoup(res.text,<span class="string">"html.parser"</span>)</span><br><span class="line">titles = soup.select(<span class="string">"div.mini-article__info h3.mini-article__title a"</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(titles)):</span><br><span class="line">    title = titles[i].text.strip()</span><br><span class="line">    print(<span class="string">"第%d篇文章的标题是:%s"</span>%(i+<span class="number">1</span>,title))</span><br></pre></td></tr></table></figure><h3><span id="di-san-bu-cun-chu-shu-ju">第三步：存储数据</span><a href="#di-san-bu-cun-chu-shu-ju" class="header-anchor">#</a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:UTF-8</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">url=<span class="string">"https://baofengketang.com"</span></span><br><span class="line">data = requests.get(url)</span><br><span class="line">headers = &#123;<span class="string">"User-Agent"</span>:<span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:59.0) Gecko/20100101 Firefox/59.0"</span>&#125;</span><br><span class="line">res = requests.get(url,headers=headers)</span><br><span class="line">print(res.status_code) <span class="comment">#返回状态码</span></span><br><span class="line">print(res.text)  <span class="comment">#得到响应的结果</span></span><br><span class="line">print(res.encoding)<span class="comment">#响应状态码</span></span><br><span class="line">soup = BeautifulSoup(res.text,<span class="string">"html.parser"</span>)</span><br><span class="line">titles = soup.select(<span class="string">"div.mini-article__info h3.mini-article__title a"</span>)</span><br><span class="line">f = open(<span class="string">"博客.txt"</span>,<span class="string">'w'</span>);</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(titles)):</span><br><span class="line">    title = titles[i].text.strip()</span><br><span class="line">    print(<span class="string">"第%d篇文章的标题是:%s"</span>%(i+<span class="number">1</span>,title))</span><br><span class="line">    f.write(<span class="string">"第%d篇文章的标题是:%s"</span>%(i+<span class="number">1</span>,title)+<span class="string">"\n"</span>)</span><br><span class="line"></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>运行结果如下</p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1525921239.png?imageMogr2/thumbnail/!70p" alt=""></p><p>欢迎扫描我的微信，进行技术交流</p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1527169907.png?imageMogr2/thumbnail/!70p" alt=""></p><p>同时也欢迎您的打赏，这将鼓励我写出更多的文章</p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1527169944.png?imageMogr2/thumbnail/!70p" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;toc&quot;&gt;

&lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#python-pa-chong-ru-men&quot;&gt;Python爬虫入门&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#http-qing-qiu&quot;&gt;Http请求&lt;/a&gt;&lt;/li&gt;
&lt;
      
    
    </summary>
    
      <category term="爬虫" scheme="http://baofengketang.com/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="http://baofengketang.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Python网络爬虫环境准备</title>
    <link href="http://baofengketang.com/2018/05/10/python_data/python_data_02/"/>
    <id>http://baofengketang.com/2018/05/10/python_data/python_data_02/</id>
    <published>2018-05-10T01:12:14.000Z</published>
    <updated>2018-05-31T13:48:11.000Z</updated>
    
    <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#huan-jing-zhun-bei">环境准备</a><ul><li><a href="#ji-ben-zhi-shi">基本知识</a></li><li><a href="#kai-fa-huan-jing">开发环境</a></li><li><a href="#di-san-fang-yi-lai-ku">第三方依赖库</a><ul><li><a href="#yi-lai-ku-de-an-zhuang">依赖库的安装</a></li></ul></li></ul></li></ul><!-- tocstop --></div><h1><span id="huan-jing-zhun-bei">环境准备</span><a href="#huan-jing-zhun-bei" class="header-anchor">#</a></h1><h2><span id="ji-ben-zhi-shi">基本知识</span><a href="#ji-ben-zhi-shi" class="header-anchor">#</a></h2><p>使用 Python 编写爬虫,当然至少得了解 Python 基本的语法,了解以下几点即可 </p><blockquote><p>基本数据结构 </p><p>数据类型 </p><p>控制流 </p><p>函数的使用 模块的使用 </p></blockquote><p>不需要过多深入的python知识，如果不懂的小伙伴可以阅读我的博客中的python基础章节</p><h2><span id="kai-fa-huan-jing">开发环境</span><a href="#kai-fa-huan-jing" class="header-anchor">#</a></h2><blockquote><p>操作系统：mac</p><p>python版本：python3.6</p><p>IDE: PyCharm</p></blockquote><h2><span id="di-san-fang-yi-lai-ku">第三方依赖库</span><a href="#di-san-fang-yi-lai-ku" class="header-anchor">#</a></h2><blockquote><p>Requests:一个方便、简洁、高效且人性化的 HTTP 请求库 </p><p>BeautifulSoup:HTML 解析库 </p><p>Pymongo:MongoDB 的 Python 封装模块 </p><p>Selenium:一个 Web 自动化测试框架,用于模拟登录和获取 JS 动态数据 </p><p>Pytesseract:一个 OCR 识别模块,用于验证码识别 </p><p>Pillow:Python 图像处理模块 </p></blockquote><h3><span id="yi-lai-ku-de-an-zhuang">依赖库的安装</span><a href="#yi-lai-ku-de-an-zhuang" class="header-anchor">#</a></h3><p>这里我们不需要安装全部，有选择的安装一下</p><p><strong>requests的安装</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install requests</span><br></pre></td></tr></table></figure><p><strong>BeautifulSoup的安装</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install bs4</span><br></pre></td></tr></table></figure><p><strong>Pymongo的安装</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pymongo</span><br></pre></td></tr></table></figure><p><strong>Selenium的安装</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install selenium</span><br></pre></td></tr></table></figure><p><strong>pillow的安装</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pillow</span><br></pre></td></tr></table></figure><p><strong>pytesseract的安装</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pytesseract</span><br></pre></td></tr></table></figure><p>欢迎扫描我的微信，进行技术交流</p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1527169907.png?imageMogr2/thumbnail/!70p" alt=""></p><p>同时也欢迎您的打赏，这将鼓励我写出更多的文章</p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1527169944.png?imageMogr2/thumbnail/!70p" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;toc&quot;&gt;

&lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#huan-jing-zhun-bei&quot;&gt;环境准备&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#ji-ben-zhi-shi&quot;&gt;基本知识&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=
      
    
    </summary>
    
      <category term="爬虫" scheme="http://baofengketang.com/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="http://baofengketang.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Python网络爬虫(一)</title>
    <link href="http://baofengketang.com/2018/05/10/python_data/python_data_01/"/>
    <id>http://baofengketang.com/2018/05/10/python_data/python_data_01/</id>
    <published>2018-05-09T23:00:32.000Z</published>
    <updated>2018-05-31T13:48:04.000Z</updated>
    
    <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#wang-luo-pa-chong">网络爬虫</a><ul><li><a href="#pa-chong-gai-nian">爬虫概念</a></li><li><a href="#wei-shi-me-yao-xue-xi-wang-luo-pa-chong">为什么要学习网络爬虫</a><ul><li><a href="#wang-luo-pa-chong-neng-dai-lai-de-hao-chu">网络爬虫能带来的好处</a></li><li><a href="#da-shu-ju-fen-xi-de-ji-chu">大数据分析的基础</a></li></ul></li><li><a href="#wang-luo-pa-chong-shi-fou-he-fa">网络爬虫是否合法</a><ul><li><a href="#robots-xie-yi">Robots协议</a></li><li><a href="#wang-luo-pa-chong-de-yue-shu">网络爬虫的约束</a></li></ul></li><li><a href="#wang-luo-pa-chong-de-liu-cheng">网络爬虫的流程</a><ul><li><a href="#python-pa-chong-liu-cheng">Python爬虫流程</a></li></ul></li></ul></li></ul><!-- tocstop --></div><h1><span id="wang-luo-pa-chong">网络爬虫</span><a href="#wang-luo-pa-chong" class="header-anchor">#</a></h1><h2><span id="pa-chong-gai-nian">爬虫概念</span><a href="#pa-chong-gai-nian" class="header-anchor">#</a></h2><p>网络爬虫是当前互联网比较流行的概念，特别是对于搜索引擎、数据处理等，都需要我们从网上去“取”一些符合要求的数据。总的来说，一般的爬虫分为两个功能模块，也就是取数据和存数据。</p><p>取数据是爬虫的关键，特别对于一些具有“防御性”的情况，比如说网站需要登陆的情况，需要挂代理访问的情况，需要限制访问频率的情况，甚至需要输入验证码的情况，都需要在我们设计爬虫方法的时候考虑到。</p><p>存数据则是涉及到我们对数据的处理，是保存到数据库中，还是保存到本地文件中，或者临时保存在计算机内存中。</p><p>一般所谓的取网页内容，指的是通过程序（某种语言的程序代码，比如Python脚本语言）实现访问某个URL地址，然后获得其所返回的内容（HTML源码，Json格式的字符串等）。然后通过解析规则，分析出我们需要的数据并取出来。</p><h2><span id="wei-shi-me-yao-xue-xi-wang-luo-pa-chong">为什么要学习网络爬虫</span><a href="#wei-shi-me-yao-xue-xi-wang-luo-pa-chong" class="header-anchor">#</a></h2><h3><span id="wang-luo-pa-chong-neng-dai-lai-de-hao-chu">网络爬虫能带来的好处</span><a href="#wang-luo-pa-chong-neng-dai-lai-de-hao-chu" class="header-anchor">#</a></h3><p>对于企业和个人来说，我们都可以通过爬虫来采集互联网的公开数据，那么对于企业来说，爬取互联网的技术有什么好处呢？下面我们以国内几大电商网站为例举例说明</p><p>对于某个品牌的电商产品，该品牌需要获悉对手的产品的特点、价格、以及销售情况，才能及时跟进产品开发进度和营销策略从而知己知彼。</p><p>过去的常用做法就是让产品研发部手动访问某个页面人工复制到excel中，这种重复性的工作不仅浪费了宝贵的时间，一不留神复制少了一个数据还会导致数据操作，最重要的是，如果对手的数据更新的比较慢，那么我们的数据就缺少时效性，而使用爬虫则能够为我们解决这个问题.</p><h3><span id="da-shu-ju-fen-xi-de-ji-chu">大数据分析的基础</span><a href="#da-shu-ju-fen-xi-de-ji-chu" class="header-anchor">#</a></h3><p>近几年随着大数据的火爆，毕竟有数据才可以分析，网络爬虫已经成为大数据库分析领域的第一个环节，对于这些公开的有价值的数据，我们可以KYC来说明</p><p>Know Your Company</p><p>Know your Competitor</p><p>Know your Customer</p><p>对于数据，我们可以通过机器学习和统计算法分析，在营销领域给企业带来4p</p><p>Product:产品更新</p><p>Place：只能选址</p><p>Price:动态价格</p><p>Promotion:数据驱动的营销服务</p><h2><span id="wang-luo-pa-chong-shi-fou-he-fa">网络爬虫是否合法</span><a href="#wang-luo-pa-chong-shi-fou-he-fa" class="header-anchor">#</a></h2><p>互联网已经通过自身协议建立起一个道德规范（Robots协议）但法律部门还在建立和完善中，一半情况如果爬取的数据属于个人或者科研范畴，基本没有问题，而如果数据属于商业范畴，就要就事论事，可能违法也可能不违法。</p><h3><span id="robots-xie-yi">Robots协议</span><a href="#robots-xie-yi" class="header-anchor">#</a></h3><p>Robots协议（爬虫协议）全名：“网络爬虫排除标准”（Robots Exclusion Protocol）网站通过Robots协议告诉搜索引擎哪些页面可以抓取，哪些页面不可以抓取。</p><p>以淘宝网为例，我们可以访问如下代码：</p><p><a href="https://www.taobao.com/robots.txt" target="_blank" rel="noopener">https://www.taobao.com/robots.txt</a></p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1525909825.png?imageMogr2/thumbnail/!70p" alt=""></p><p>该文件则规定了哪些页面可以允许百度爬虫引擎访问，哪些页面不允许页面访问</p><p>同时我们在百度中搜索淘宝时也可以发现</p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1525913605.png?imageMogr2/thumbnail/!70p" alt=""></p><h3><span id="wang-luo-pa-chong-de-yue-shu">网络爬虫的约束</span><a href="#wang-luo-pa-chong-de-yue-shu" class="header-anchor">#</a></h3><p>除了robots协议之外，我们使用网络爬虫时还需要对自己进行约束，过于快速或者频繁的网络爬虫都会对服务器产生巨大的压力，网站可能会封锁你的ip，甚至采取进一步的法律行动，因此，你需要约束自己的网络行为，请将请求速度限定在一个合理的范围之内</p><h2><span id="wang-luo-pa-chong-de-liu-cheng">网络爬虫的流程</span><a href="#wang-luo-pa-chong-de-liu-cheng" class="header-anchor">#</a></h2><h3><span id="python-pa-chong-liu-cheng">Python爬虫流程</span><a href="#python-pa-chong-liu-cheng" class="header-anchor">#</a></h3><p>网络爬虫的流程实际上非常简单，主要分为三个部分</p><blockquote><p>第一步：获取网页</p><p>第二步：解析网页（提取数据）</p><p>第三步:   存储数据</p></blockquote><p>1.获取网页就是给一个网址发送一个请求，该网址会返回整个网页的数据，类似于在浏览器中键入一个回车键，然后就可以看到网站的整个内容</p><p>2.解析网页就是从整个网页的数据中提取自己想要的数据</p><p>3.存书数据也容易理解，就是把提取的数据存储下来，我们可以存储在csv中也可以存储在数据库中</p><p>欢迎扫描我的微信，进行技术交流</p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1527169907.png?imageMogr2/thumbnail/!70p" alt=""></p><p>同时也欢迎您的打赏，这将鼓励我写出更多的文章</p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1527169944.png?imageMogr2/thumbnail/!70p" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;toc&quot;&gt;

&lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#wang-luo-pa-chong&quot;&gt;网络爬虫&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#pa-chong-gai-nian&quot;&gt;爬虫概念&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a hre
      
    
    </summary>
    
      <category term="爬虫" scheme="http://baofengketang.com/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="http://baofengketang.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Python基础(十二)</title>
    <link href="http://baofengketang.com/2018/05/09/python_base/python_12/"/>
    <id>http://baofengketang.com/2018/05/09/python_base/python_12/</id>
    <published>2018-05-09T06:43:57.000Z</published>
    <updated>2018-05-31T13:49:18.000Z</updated>
    
    <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#mo-kuai">模块</a><ul><li><a href="#mo-kuai-jie-shao">模块介绍</a><ul><li><a href="#python-zhong-de-mo-kuai">python中的模块</a></li><li><a href="#import">import</a></li><li><a href="#from-import">from import</a></li><li><a href="#from-import">from … import *</a></li><li><a href="#as-wei-mo-kuai-qi-bie-ming">as:为模块起别名</a></li><li><a href="#ding-wei-mo-kuai">定位模块</a></li></ul></li><li><a href="#mo-kuai-zhi-zuo">模块制作</a><ul><li><a href="#ding-yi-zi-ji-de-mo-kuai">定义自己的模块</a></li><li><a href="#diao-yong-zi-ji-mo-kuai">调用自己模块</a></li><li><a href="#ce-shi-mo-kuai">测试模块</a></li></ul></li><li><a href="#mo-kuai-zhong-de-all">模块中的__all__</a><ul><li><a href="#mei-you-all-de-qing-kuang">没有__all__的情况</a></li><li><a href="#mo-kuai-zhong-bao-han-all">模块中包含__all__</a></li><li><a href="#zong-jie">总结</a></li></ul></li><li><a href="#python-zhong-de-bao">python中的包</a></li><li><a href="#yin-ru-bao">引入包</a></li><li><a href="#init-wen-jian-de-zuo-yong">__init__文件的作用</a></li></ul></li></ul><!-- tocstop --></div><h1><span id="mo-kuai">模块</span><a href="#mo-kuai" class="header-anchor">#</a></h1><h2><span id="mo-kuai-jie-shao">模块介绍</span><a href="#mo-kuai-jie-shao" class="header-anchor">#</a></h2><h3><span id="python-zhong-de-mo-kuai">python中的模块</span><a href="#python-zhong-de-mo-kuai" class="header-anchor">#</a></h3><p>有过C语言编程经验的朋友都知道在C语言中如果要引用sqrt函数，必须用语句#include &lt;math.h&gt;引入math.h这个头文件，否则是无法正常进行调用的。</p><p>那么在Python中，如果要引用一些其他的函数，该怎么处理呢？</p><p>在Python中有一个概念叫做模块（module），这个和C语言中的头文件以及Java中的包很类似，比如在Python中要调用sqrt函数，必须用import关键字引入math这个模块，下面就来了解一下Python中的模块。</p><p>说的通俗点：模块就好比是工具包，要想使用这个工具包中的工具(就好比函数)，就需要导入这个模块</p><h3><span id="import">import</span><a href="#import" class="header-anchor">#</a></h3><p>在Python中用关键字<code>import</code>来引入某个模块，比如要引用模块math，就可以在文件最开始的地方用import math来引入。</p><p>形如:    </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> module1,mudule2...</span><br></pre></td></tr></table></figure><p>当解释器遇到import语句，如果模块在当前的搜索路径就会被导入。</p><p>在调用math模块中的函数时，必须这样引用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">　　模块名.函数名</span><br></pre></td></tr></table></figure><ul><li><p>想一想:</p><blockquote><p>为什么必须加上模块名调用呢？</p></blockquote></li><li><p>答:</p><blockquote><p>因为可能存在这样一种情况：在多个模块中含有相同名称的函数，此时如果只是通过函数名来调用，解释器无法知道到底要调用哪个函数。所以如果像上述这样引入模块的时候，调用函数必须加上模块名</p></blockquote></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="comment">#这样会报错</span></span><br><span class="line"><span class="keyword">print</span> sqrt(<span class="number">2</span>)</span><br><span class="line"><span class="comment">#这样才能正确输出结果</span></span><br><span class="line"><span class="keyword">print</span> math.sqrt(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>有时候我们只需要用到模块中的某个函数，只需要引入该函数即可，此时可以用下面方法实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> 模块名 <span class="keyword">import</span> 函数名<span class="number">1</span>,函数名<span class="number">2.</span>...</span><br></pre></td></tr></table></figure><p>不仅可以引入函数，还可以引入一些全局变量、类等</p><ul><li><p>注意:</p><blockquote><ul><li>通过这种方式引入的时候，调用函数时只能给出函数名，不能给出模块名，但是当两个模块中含有相同名称函数的时候，后面一次引入会覆盖前一次引入。也就是说假如模块A中有函数function(  )，在模块B中也有函数function(  )，如果引入A中的function在先、B中的function在后，那么当调用function函数的时候，是去执行模块B中的function函数。</li><li>如果想一次性引入math中所有的东西，还可以通过from math import *来实现</li></ul></blockquote></li></ul><h3><span id="from-import">from import</span><a href="#from-import" class="header-anchor">#</a></h3><p>Python的from语句让你从模块中导入一个指定的部分到当前命名空间中</p><p>语法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">from modname import name1[, name2[, ... nameN]]</span><br></pre></td></tr></table></figure><p>例如，要导入模块fib的fibonacci函数，使用如下语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">from fib import fibonacci</span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><ul><li>不会把整个fib模块导入到当前的命名空间中，它只会将fib里的fibonacci单个引入</li></ul><h3><span id="from-import">from … import *</span><a href="#from-import" class="header-anchor">#</a></h3><p>把一个模块的所有内容全都导入到当前的命名空间也是可行的，只需使用如下声明：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> modname <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><ul><li>这提供了一个简单的方法来导入一个模块中的所有项目。然而这种声明不该被过多地使用。</li></ul><h3><span id="as-wei-mo-kuai-qi-bie-ming">as:为模块起别名</span><a href="#as-wei-mo-kuai-qi-bie-ming" class="header-anchor">#</a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">2</span>]: <span class="keyword">import</span> time <span class="keyword">as</span> tm</span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: time.sleep(<span class="number">3</span>)</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">NameError                                 Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input<span class="number">-3</span><span class="number">-127</span>a5bdb7b75&gt; <span class="keyword">in</span> &lt;module&gt;()</span><br><span class="line">----&gt; 1 time.sleep(3)</span><br><span class="line"></span><br><span class="line">NameError: name <span class="string">'time'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: tm.sleep(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>主要加入了别名，那么以后只能采用别名访问</p><h3><span id="ding-wei-mo-kuai">定位模块</span><a href="#ding-wei-mo-kuai" class="header-anchor">#</a></h3><p>当你导入一个模块，Python解析器对模块位置的搜索顺序是：</p><ol><li>当前目录</li><li>如果不在当前目录，Python则搜索在shell变量PYTHONPATH下的每个目录。</li><li>如果都找不到，Python会察看默认路径。UNIX下，默认路径一般为/usr/local/lib/python/</li><li>模块搜索路径存储在system模块的sys.path变量中。变量里包含当前目录，PYTHONPATH和由安装过程决定的默认目录。</li></ol><h2><span id="mo-kuai-zhi-zuo">模块制作</span><a href="#mo-kuai-zhi-zuo" class="header-anchor">#</a></h2><h3><span id="ding-yi-zi-ji-de-mo-kuai">定义自己的模块</span><a href="#ding-yi-zi-ji-de-mo-kuai" class="header-anchor">#</a></h3><p>在Python中，每个Python文件都可以作为一个模块，模块的名字就是文件的名字。</p><p>比如有这样一个文件test.py，在test.py中定义了函数add</p><p>test.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(a,b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> a+b</span><br></pre></td></tr></table></figure><h3><span id="diao-yong-zi-ji-mo-kuai">调用自己模块</span><a href="#diao-yong-zi-ji-mo-kuai" class="header-anchor">#</a></h3><p>那么在其他文件中就可以先import test，然后通过test.add(a,b)来调用了，当然也可以通过from test import add来引入</p><p>my.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> test</span><br><span class="line">result = test.add(<span class="number">11</span>,<span class="number">22</span>)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><h3><span id="ce-shi-mo-kuai">测试模块</span><a href="#ce-shi-mo-kuai" class="header-anchor">#</a></h3><p>实际开中，当一个开发人员编写完一个模块后，为了让模块能够在项目中达到想要的效果，这个开发人员会自行在py文件中添加一些测试信息，例如：</p><p><code>test.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(a,b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> a+b</span><br><span class="line">result =add(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">print(<span class="string">"测试:1+2=%d"</span>%result)</span><br></pre></td></tr></table></figure><p>如果此时，在其他py文件中引入了此文件的话，想想看，测试的那段代码是否也会执行呢！</p><p>my.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> test</span><br><span class="line">print(test.add(<span class="number">1</span>,<span class="number">2</span>))</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/Library/Frameworks/Python.framework/Versions/3.6/bin/python3 /Users/jinzhong/PycharmProjects/hello3/demo/model/my.py</span><br><span class="line">测试:1+2=3</span><br><span class="line">3</span><br></pre></td></tr></table></figure><p>至此，可发现test.py中的测试代码，应该是单独执行test.py文件时才应该执行的，不应该是其他的文件中引用而执行</p><p>为了解决这个问题，python在执行一个文件时有个变量<code>__name__</code></p><p>更改test.py的内容，并且执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(a,b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> a+b</span><br><span class="line">result =add(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">print(__name__)</span><br><span class="line">print(<span class="string">"测试:1+2=%d"</span>%result)</span><br></pre></td></tr></table></figure><p>观察结果(test.py)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sh-3.2# python3 test.py</span><br><span class="line">__main__</span><br><span class="line">测试:1+2=3</span><br></pre></td></tr></table></figure><p>观察结果(my.py)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sh-3.2# python3 my.py</span><br><span class="line">test</span><br><span class="line">测试:1+2=3</span><br><span class="line">3</span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>可以根据<strong>name</strong>变量的结果能够判断出，是直接执行的python脚本还是被引入执行的，从而能够有选择性的执行测试代码</li></ul><p>更改test.py代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(a,b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> a+b</span><br><span class="line">result =add(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">print(__name__)</span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</span><br><span class="line">    print(<span class="string">"测试:1+2=%d"</span>%result)</span><br></pre></td></tr></table></figure><h2><span id="mo-kuai-zhong-de-all">模块中的__all__</span><a href="#mo-kuai-zhong-de-all" class="header-anchor">#</a></h2><h3><span id="mei-you-all-de-qing-kuang">没有__all__的情况</span><a href="#mei-you-all-de-qing-kuang" class="header-anchor">#</a></h3><p>test.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"add1..."</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add2</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"add2..."</span>)</span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</span><br><span class="line">    add()</span><br><span class="line">    add2()</span><br></pre></td></tr></table></figure><p>hello.py</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from test import *</span><br><span class="line">add1()</span><br><span class="line">add2()</span><br></pre></td></tr></table></figure><p>执行结果：</p><p>add1…</p><p>add2…</p><h3><span id="mo-kuai-zhong-bao-han-all">模块中包含__all__</span><a href="#mo-kuai-zhong-bao-han-all" class="header-anchor">#</a></h3><p>test.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">__all__=[<span class="string">"add1"</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"add1..."</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add2</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"add2..."</span>)</span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</span><br><span class="line">    add1()</span><br><span class="line">    add2()</span><br></pre></td></tr></table></figure><p>hello.py</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from test import *</span><br><span class="line">add1()</span><br><span class="line">add2()</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/Library/Frameworks/Python.framework/Versions/3.6/bin/python3 /Users/jinzhong/PycharmProjects/hello3/demo/model/hello.py</span><br><span class="line">add1...</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;/Users/jinzhong/PycharmProjects/hello3/demo/model/hello.py&quot;, line 3, in &lt;module&gt;</span><br><span class="line">    add2()</span><br><span class="line">NameError: name &apos;add2&apos; is not defined</span><br><span class="line">Process finished with exit code 1</span><br></pre></td></tr></table></figure><h3><span id="zong-jie">总结</span><a href="#zong-jie" class="header-anchor">#</a></h3><ul><li>如果一个文件中有__all__变量，那么也就意味着只有这个变量中的元素，才会被from xxx import *时导入</li></ul><h2><span id="python-zhong-de-bao">python中的包</span><a href="#python-zhong-de-bao" class="header-anchor">#</a></h2><h2><span id="yin-ru-bao">引入包</span><a href="#yin-ru-bao" class="header-anchor">#</a></h2><p><strong>将功能相同的包放在同一个文件夹下</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">sh-3.2# pwd</span><br><span class="line">/Users/jinzhong/PycharmProjects/hello3/包</span><br><span class="line">sh-3.2# tree</span><br><span class="line">.</span><br><span class="line">├── __init__.py</span><br><span class="line">└── vo</span><br><span class="line">    ├── __init__.py</span><br><span class="line">    ├── __pycache__</span><br><span class="line">    │   ├── __init__.cpython-36.pyc</span><br><span class="line">    │   └── dog.cpython-36.pyc</span><br><span class="line">    ├── cat.py</span><br><span class="line">    └── dog.py</span><br><span class="line"></span><br><span class="line">2 directories, 6 files</span><br></pre></td></tr></table></figure><p><strong>使用import 文件.模块 的方式导入</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">43</span>]: pwd</span><br><span class="line">Out[<span class="number">43</span>]: <span class="string">'/Users/jinzhong/PycharmProjects/hello3/包'</span></span><br><span class="line">In [<span class="number">44</span>]: ls</span><br><span class="line">__init__.py  vo/</span><br><span class="line">In [<span class="number">45</span>]: <span class="keyword">import</span> vo.dog</span><br><span class="line">In [<span class="number">46</span>]: dog.add1()</span><br><span class="line">add1..</span><br><span class="line">In [<span class="number">47</span>]: dog.add2()</span><br><span class="line">add2..</span><br></pre></td></tr></table></figure><p><strong>使用from 文件夹 import 模块 的方式导入</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">8</span>]: <span class="keyword">from</span> vo <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: dog.add1()</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">NameError                                 Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input<span class="number">-9</span><span class="number">-2472712858</span>f4&gt; <span class="keyword">in</span> &lt;module&gt;()</span><br><span class="line">----&gt; 1 dog.add1()</span><br><span class="line"></span><br><span class="line">NameError: name <span class="string">'dog'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]: dog.add2()</span><br></pre></td></tr></table></figure><p><strong>在__init__.py文件中写入代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__all__=[<span class="string">"dog"</span>]</span><br></pre></td></tr></table></figure><p>再次进行测试</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: <span class="keyword">from</span> vo <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: dog.add1()</span><br><span class="line">add1..</span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]: dog.add2()</span><br><span class="line">add2..</span><br><span class="line"></span><br><span class="line">In [<span class="number">11</span>]: cat.add3()</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">NameError                                 Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input<span class="number">-11</span>-e39bd0c9b05b&gt; <span class="keyword">in</span> &lt;module&gt;()</span><br><span class="line">----&gt; 1 cat.add3()</span><br><span class="line"></span><br><span class="line">NameError: name <span class="string">'cat'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br></pre></td></tr></table></figure><p><strong>总结1：</strong></p><ul><li>包将有联系的模块组织在一起，即放到同一个文件夹下，并且在这个文件夹创建一个名字为<code>__init__.py</code> 文件，那么这个文件夹就称之为<code>包</code></li><li>有效避免模块名称冲突问题，让应用组织结构更加清晰</li></ul><h2><span id="init-wen-jian-de-zuo-yong">__init__文件的作用</span><a href="#init-wen-jian-de-zuo-yong" class="header-anchor">#</a></h2><p>__init__.py控制着包的导入行为</p><blockquote><p>__init__.py为空:仅仅是把这个包导入，不回导入包中的模块</p><p><strong>all__:在</strong>init__.py文件中，定义一个__all__变量，它控制着 from 包名 import *时导入的模块</p><p>可以在这个文件中编写语句，当导入时，这些语句就会被执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;__all__=[&quot;dog&quot;]</span><br><span class="line">&gt;print(&quot;******&quot;)</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>继续执行导入操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;In [<span class="number">7</span>]: <span class="keyword">from</span> vo <span class="keyword">import</span> *</span><br><span class="line">&gt;******</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>欢迎扫描我的微信，进行技术交流</p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1527169907.png?imageMogr2/thumbnail/!70p" alt=""></p><p>同时也欢迎您的打赏，这将鼓励我写出更多的文章</p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1527169944.png?imageMogr2/thumbnail/!70p" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;toc&quot;&gt;

&lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#mo-kuai&quot;&gt;模块&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#mo-kuai-jie-shao&quot;&gt;模块介绍&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#python-zho
      
    
    </summary>
    
      <category term="Python" scheme="http://baofengketang.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://baofengketang.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python基础(十一)</title>
    <link href="http://baofengketang.com/2018/05/09/python_base/python_11/"/>
    <id>http://baofengketang.com/2018/05/09/python_base/python_11/</id>
    <published>2018-05-09T01:35:58.000Z</published>
    <updated>2018-05-31T13:49:18.000Z</updated>
    
    <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#yi-chang">异常</a><ul><li><a href="#yi-chang-jian-jie">异常简介</a></li><li><a href="#bu-huo-yi-chang">捕获异常</a><ul><li><a href="#bu-huo-yi-chang-try-exception">捕获异常try … exception</a></li><li><a href="#exception-bu-huo-duo-ge-yi-chang">exception捕获多个异常</a></li><li><a href="#bu-huo-suo-you-yi-chang">捕获所有异常</a></li><li><a href="#else">else</a></li><li><a href="#try-finally">try…finally…</a></li></ul></li><li><a href="#yi-chang-de-chuan-di">异常的传递</a><ul><li><a href="#try-qian-tao-zhong">try嵌套中</a></li><li><a href="#han-shu-qian-tao-diao-yong-zhong">函数嵌套调用中</a></li></ul></li><li><a href="#pao-chu-zi-ding-yi-de-yi-chang">抛出自定义的异常</a></li><li><a href="#yi-chang-chu-li-zhong-pao-chu-yi-chang">异常处理中抛出异常</a></li></ul></li></ul><!-- tocstop --></div><h1><span id="yi-chang">异常</span><a href="#yi-chang" class="header-anchor">#</a></h1><h2><span id="yi-chang-jian-jie">异常简介</span><a href="#yi-chang-jian-jie" class="header-anchor">#</a></h2><p>看下面的例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"*"</span>*<span class="number">50</span>)</span><br><span class="line">f=open(<span class="string">"hello1.txt"</span>)＃该文件不存在</span><br><span class="line">print(<span class="string">"*"</span>*<span class="number">50</span>)</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/Users/jinzhong/PycharmProjects/hello3/venv/bin/python /Users/jinzhong/PycharmProjects/hello3/demo/test20.py</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">**************************************************</span><br><span class="line">  File &quot;/Users/jinzhong/PycharmProjects/hello3/demo/test20.py&quot;, line 2, in &lt;module&gt;</span><br><span class="line">    f=open(&quot;hello1.txt&quot;)</span><br><span class="line">FileNotFoundError: [Errno 2] No such file or directory: &apos;hello1.txt&apos;</span><br><span class="line">Process finished with exit code 1</span><br></pre></td></tr></table></figure><p>说明:</p><blockquote><p>打开一个不存在的文件123.txt，当找不到123.txt 文件时，就会抛出给我们一个IOError类型的错误，No such file or directory：123.txt （没有123.txt这样的文件或目录）</p></blockquote><p><strong>异常:</strong></p><blockquote><p>当Python检测到一个错误时，解释器就无法继续执行了，反而出现了一些错误的提示，这就是所谓的”异常”</p></blockquote><h2><span id="bu-huo-yi-chang">捕获异常</span><a href="#bu-huo-yi-chang" class="header-anchor">#</a></h2><h3><span id="bu-huo-yi-chang-try-exception">捕获异常try … exception</span><a href="#bu-huo-yi-chang-try-exception" class="header-anchor">#</a></h3><p>看如下示例:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(<span class="string">"*"</span>*<span class="number">50</span>)</span><br><span class="line">    f=open(<span class="string">"hello1.txt"</span>)</span><br><span class="line">    print(<span class="string">"*"</span>*<span class="number">50</span>)</span><br><span class="line"><span class="keyword">except</span> IOError:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/Users/jinzhong/PycharmProjects/hello3/venv/bin/python /Users/jinzhong/PycharmProjects/hello3/demo/test20.py</span><br><span class="line">**************************************************</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><p>说明:</p><ul><li>此程序看不到任何错误，因为用except 捕获到了IOError异常，并添加了处理的方法</li><li>pass 表示实现了相应的实现，但什么也不做；如果把pass改为print语句，那么就会输出其他信息</li></ul><p>小总结:</p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1525830541.png?imageMogr2/thumbnail/!70p" alt=""></p><ul><li>把可能出现问题的代码，放在try中</li><li>把处理异常的代码，放在except中</li></ul><h3><span id="exception-bu-huo-duo-ge-yi-chang">exception捕获多个异常</span><a href="#exception-bu-huo-duo-ge-yi-chang" class="header-anchor">#</a></h3><p>看下面的案例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(<span class="string">"*"</span>*<span class="number">50</span>)</span><br><span class="line">    f=open(<span class="string">"hello.txt"</span>)</span><br><span class="line">    print(<span class="string">"*"</span>*<span class="number">50</span>)</span><br><span class="line">    print(num)</span><br><span class="line"><span class="keyword">except</span> IOError:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/Users/jinzhong/PycharmProjects/hello3/venv/bin/python /Users/jinzhong/PycharmProjects/hello3/demo/test20.py</span><br><span class="line">**************************************************</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">**************************************************</span><br><span class="line">  File &quot;/Users/jinzhong/PycharmProjects/hello3/demo/test20.py&quot;, line 5, in &lt;module&gt;</span><br><span class="line">    print(num)</span><br><span class="line">NameError: name &apos;num&apos; is not defined</span><br><span class="line">Process finished with exit code 1</span><br></pre></td></tr></table></figure><p>想一想:</p><blockquote><p>上例程序，已经使用except来捕获异常了，为什么还会看到错误的信息提示？</p></blockquote><p>答:</p><blockquote><p>except捕获的错误类型是IOError，而此时程序产生的异常为 NameError ，所以except没有生效</p></blockquote><p>修改后的代码为:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(<span class="string">"*"</span>*<span class="number">50</span>)</span><br><span class="line">    f=open(<span class="string">"hello.txt"</span>)</span><br><span class="line">    print(<span class="string">"*"</span>*<span class="number">50</span>)</span><br><span class="line">    print(num)</span><br><span class="line"><span class="keyword">except</span> IOError:</span><br><span class="line">    print(<span class="string">"产生了io异常"</span>)</span><br><span class="line"><span class="keyword">except</span> NameError:</span><br><span class="line">    print(<span class="string">"对不起，变量未定义"</span>)</span><br></pre></td></tr></table></figure><p>实际开发中，捕获多个异常方式也可以通过如下代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(<span class="string">"*"</span>*<span class="number">50</span>)</span><br><span class="line">    f=open(<span class="string">"hello.txt"</span>)</span><br><span class="line">    print(<span class="string">"*"</span>*<span class="number">50</span>)</span><br><span class="line">    print(num)</span><br><span class="line"><span class="keyword">except</span> (IOError,NameError) <span class="keyword">as</span> result: <span class="comment">#result可以保存异常的原始信息</span></span><br><span class="line">    print(result)</span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><blockquote><p>当捕获多个异常时，可以把要捕获的异常的名字，放到except 后，并使用元组的方式仅进行存储</p></blockquote><h3><span id="bu-huo-suo-you-yi-chang">捕获所有异常</span><a href="#bu-huo-suo-you-yi-chang" class="header-anchor">#</a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(<span class="string">"*"</span>*<span class="number">50</span>)</span><br><span class="line">    f=open(<span class="string">"hello.txt"</span>)</span><br><span class="line">    print(<span class="string">"*"</span>*<span class="number">50</span>)</span><br><span class="line">    print(num)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> result:</span><br><span class="line">    print(result)</span><br></pre></td></tr></table></figure><h3><span id="else">else</span><a href="#else" class="header-anchor">#</a></h3><p>在if中，它的作用是当条件不满足时执行的实行；同样在try…except…中也是如此，即如果没有捕获到异常，那么就执行else中的事情</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    num = <span class="number">100</span></span><br><span class="line">    print(num)</span><br><span class="line"><span class="keyword">except</span> NameError <span class="keyword">as</span> errorMsg:</span><br><span class="line">    print(<span class="string">'产生错误了:%s'</span>%errorMsg)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'没有捕获到异常，真高兴'</span>)</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/Users/jinzhong/PycharmProjects/hello3/venv/bin/python /Users/jinzhong/PycharmProjects/hello3/demo/test20.py</span><br><span class="line"><span class="number">100</span></span><br><span class="line">没有捕获到异常，真高兴</span><br><span class="line">Process finished <span class="keyword">with</span> exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><h3><span id="try-finally">try…finally…</span><a href="#try-finally" class="header-anchor">#</a></h3><p>try…finally…语句用来表达这样的情况：</p><blockquote><p>在程序中，如果一个段代码必须要执行，即无论异常是否产生都要执行，那么此时就需要使用finally。 比如文件关闭，释放锁，把数据库连接返还给连接池等</p></blockquote><p>demo(终端演示):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f = open(<span class="string">'hello.txt'</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            content = f.readline()</span><br><span class="line">            <span class="keyword">if</span> len(content) == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            time.sleep(<span class="number">2</span>)</span><br><span class="line">            print(content)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="comment">#如果在读取文件的过程中，产生了异常，那么就会捕获到</span></span><br><span class="line">        <span class="comment">#比如 按下了 ctrl+c</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        f.close()</span><br><span class="line">        print(<span class="string">'关闭文件'</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">"没有这个文件"</span>)</span><br></pre></td></tr></table></figure><p>说明:</p><blockquote><p>test.txt文件中每一行数据打印，但是我有意在每打印一行之前用time.sleep方法暂停2秒钟。这样做的原因是让程序运行得慢一些。在程序运行的时候，按Ctrl+c中断（取消）程序。</p><p>我们可以观察到KeyboardInterrupt异常被触发，程序退出。但是在程序退出之前，finally从句仍然被执行，把文件关闭。</p></blockquote><h2><span id="yi-chang-de-chuan-di">异常的传递</span><a href="#yi-chang-de-chuan-di" class="header-anchor">#</a></h2><h3><span id="try-qian-tao-zhong">try嵌套中</span><a href="#try-qian-tao-zhong" class="header-anchor">#</a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f = open(<span class="string">'test.txt'</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            content = f.readline()</span><br><span class="line">            <span class="keyword">if</span> len(content) == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            time.sleep(<span class="number">2</span>)</span><br><span class="line">            print(content)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        f.close()</span><br><span class="line">        print(<span class="string">'关闭文件'</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">"没有这个文件"</span>)</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">26</span>]: <span class="keyword">import</span> time</span><br><span class="line">    ...: <span class="keyword">try</span>:</span><br><span class="line">    ...:     f = open(<span class="string">'test.txt'</span>)</span><br><span class="line">    ...:     <span class="keyword">try</span>:</span><br><span class="line">    ...:         <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    ...:             content = f.readline()</span><br><span class="line">    ...:             <span class="keyword">if</span> len(content) == <span class="number">0</span>:</span><br><span class="line">    ...:                 <span class="keyword">break</span></span><br><span class="line">    ...:             time.sleep(<span class="number">2</span>)</span><br><span class="line">    ...:             print(content)</span><br><span class="line">    ...:     <span class="keyword">finally</span>:</span><br><span class="line">    ...:         f.close()</span><br><span class="line">    ...:         print(<span class="string">'关闭文件'</span>)</span><br><span class="line">    ...: <span class="keyword">except</span>:</span><br><span class="line">    ...:     print(<span class="string">"没有这个文件"</span>)</span><br><span class="line">    ...: <span class="keyword">finally</span>:</span><br><span class="line">    ...:     print(<span class="string">"最后的finally"</span>)</span><br><span class="line">    ...:     </span><br><span class="line">xxxxxxx---&gt;这是test.txt文件中读取到信息</span><br><span class="line">^C关闭文件</span><br><span class="line">没有这个文件</span><br><span class="line">最后的<span class="keyword">finally</span></span><br></pre></td></tr></table></figure><h3><span id="han-shu-qian-tao-diao-yong-zhong">函数嵌套调用中</span><a href="#han-shu-qian-tao-diao-yong-zhong" class="header-anchor">#</a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"----test1-1----"</span>)</span><br><span class="line">    print(num)</span><br><span class="line">    print(<span class="string">"----test1-2----"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test2</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"----test2-1----"</span>)</span><br><span class="line">    test1()</span><br><span class="line">    print(<span class="string">"----test2-2----"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test3</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        print(<span class="string">"----test3-1----"</span>)</span><br><span class="line">        test1()</span><br><span class="line">        print(<span class="string">"----test3-2----"</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> result:</span><br><span class="line">        print(<span class="string">"捕获到了异常，信息是:%s"</span>%result)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"----test3-2----"</span>)</span><br><span class="line">test3()</span><br><span class="line">print(<span class="string">"------华丽的分割线-----"</span>)</span><br><span class="line">test2()</span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>如果try嵌套，那么如果里面的try没有捕获到这个异常，那么外面的try会接收到这个异常，然后进行处理，如果外边的try依然没有捕获到，那么再进行传递。。。</li><li>如果一个异常是在一个函数中产生的，例如函数A—-&gt;函数B—-&gt;函数C,而异常是在函数C中产生的，那么如果函数C中没有对这个异常进行处理，那么这个异常会传递到函数B中，如果函数B有异常处理那么就会按照函数B的处理方式进行执行；如果函数B也没有异常处理，那么这个异常会继续传递，以此类推。。。如果所有的函数都没有处理，那么此时就会进行异常的默认处理，即通常见到的那样</li><li>注意观察上图中，当调用test3函数时，在test1函数内部产生了异常，此异常被传递到test3函数中完成了异常处理，而当异常处理完后，并没有返回到函数test1中进行执行，而是在函数test3中继续执行</li></ul><h2><span id="pao-chu-zi-ding-yi-de-yi-chang">抛出自定义的异常</span><a href="#pao-chu-zi-ding-yi-de-yi-chang" class="header-anchor">#</a></h2><p>你可以用raise语句来引发一个异常。异常/错误对象必须有一个名字，且它们应是Error或Exception类的子类</p><p>下面是一个引发异常的例子:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShortInputException</span><span class="params">(Exception)</span>:</span></span><br><span class="line">    <span class="string">'''自定义的异常类'''</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, length, atleast)</span>:</span></span><br><span class="line">        <span class="comment">#super().__init__()</span></span><br><span class="line">        self.length = length</span><br><span class="line">        self.atleast = atleast</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        s = input(<span class="string">'请输入 --&gt; '</span>)</span><br><span class="line">        <span class="keyword">if</span> len(s) &lt; <span class="number">3</span>:</span><br><span class="line">            <span class="comment"># raise引发一个你定义的异常</span></span><br><span class="line">            <span class="keyword">raise</span> ShortInputException(len(s), <span class="number">3</span>)</span><br><span class="line">    <span class="keyword">except</span> ShortInputException <span class="keyword">as</span> result:<span class="comment">#x这个变量被绑定到了错误的实例</span></span><br><span class="line">        print(<span class="string">'ShortInputException: 输入的长度是 %d,长度至少应是 %d'</span>% (result.length, result.atleast))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'没有异常发生.'</span>)</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">请输入 --&gt; hello</span><br><span class="line">没有异常发生.</span><br><span class="line">请输入 --&gt; t</span><br><span class="line">ShortInputException: 输入的长度是 1,长度至少应是 3</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><p><strong>以上程序中，关于代码<code>#super().__init__()</code>的说明</strong></p><blockquote><p>这一行代码，可以调用也可以不调用，建议调用，因为<code>__init__</code>方法往往是用来对创建完的对象进行初始化工作，如果在子类中重写了父类的<code>__init__</code>方法，即意味着父类中的很多初始化工作没有做，这样就不保证程序的稳定了，所以在以后的开发中，如果重写了父类的<code>__init__</code>方法，最好是先调用父类的这个方法，然后再添加自己的功能</p></blockquote><h2><span id="yi-chang-chu-li-zhong-pao-chu-yi-chang">异常处理中抛出异常</span><a href="#yi-chang-chu-li-zhong-pao-chu-yi-chang" class="header-anchor">#</a></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, switch)</span>:</span></span><br><span class="line">        self.switch = switch <span class="comment">#开关</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">calc</span><span class="params">(self, a, b)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> a/b</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> result:</span><br><span class="line">            <span class="keyword">if</span> self.switch:</span><br><span class="line">                print(<span class="string">"捕获开启，已经捕获到了异常，信息如下:"</span>)</span><br><span class="line">                print(result)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment">#重新抛出这个异常，此时就不会被这个异常处理给捕获到，从而触发默认的异常处理</span></span><br><span class="line">                <span class="keyword">raise</span></span><br><span class="line">a = Test(<span class="keyword">True</span>) <span class="comment">## 处理异常</span></span><br><span class="line">a.calc(<span class="number">11</span>,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"----------------------华丽的分割线----------------"</span>)</span><br><span class="line"></span><br><span class="line">a.switch = <span class="keyword">False</span> <span class="comment">## 不处理异常</span></span><br><span class="line">a.calc(<span class="number">11</span>,<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>欢迎扫描我的微信，进行技术交流</p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1527169907.png?imageMogr2/thumbnail/!70p" alt=""></p><p>同时也欢迎您的打赏，这将鼓励我写出更多的文章</p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1527169944.png?imageMogr2/thumbnail/!70p" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;toc&quot;&gt;

&lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#yi-chang&quot;&gt;异常&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#yi-chang-jian-jie&quot;&gt;异常简介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#bu-huo-
      
    
    </summary>
    
      <category term="Python" scheme="http://baofengketang.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://baofengketang.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python基础(十)</title>
    <link href="http://baofengketang.com/2018/05/08/python_base/python_10/"/>
    <id>http://baofengketang.com/2018/05/08/python_base/python_10/</id>
    <published>2018-05-08T15:13:20.000Z</published>
    <updated>2018-05-31T13:49:19.000Z</updated>
    
    <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#mian-xiang-dui-xiang-san">面向对象（三）</a><ul><li><a href="#new-fang-fa">__new__方法</a></li><li><a href="#dan-li-mo-shi">单例模式</a></li></ul></li></ul><!-- tocstop --></div><h1><span id="mian-xiang-dui-xiang-san">面向对象（三）</span><a href="#mian-xiang-dui-xiang-san" class="header-anchor">#</a></h1><h2><span id="new-fang-fa">__new__方法</span><a href="#new-fang-fa" class="header-anchor">#</a></h2><p><strong><strong>new__和</strong>init__的作用</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"对象初始化"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls)</span>:</span></span><br><span class="line">        print(<span class="string">"对象创建"</span>)</span><br><span class="line">        <span class="keyword">return</span> object.__new__(cls)</span><br><span class="line"></span><br><span class="line">dog=Dog()</span><br></pre></td></tr></table></figure><p><strong>总结：</strong></p><ul><li><code>__new__</code>至少要有一个参数cls，代表要实例化的类，此参数在实例化时由Python解释器自动提供</li><li><code>__new__</code>必须要有返回值，返回实例化出来的实例，这点在自己实现<code>__new__</code>时要特别注意，可以return父类<code>__new__</code>出来的实例，或者直接是object的<code>__new__</code>出来的实例</li><li><code>__init__</code>有一个参数self，就是这个<code>__new__</code>返回的实例，<code>__init__</code>在<code>__new__</code>的基础上可以完成一些其它初始化的动作，<code>__init__</code>不需要返回值</li><li>我们可以将类比作制造商，<code>__new__</code>方法就是前期的原材料购买环节，<code>__init__</code>方法就是在有原材料的基础上，加工，初始化商品环节</li></ul><p><strong>注意：</strong></p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1525794107.png?imageMogr2/thumbnail/!70p" alt=""></p><h2><span id="dan-li-mo-shi">单例模式</span><a href="#dan-li-mo-shi" class="header-anchor">#</a></h2><p><strong>1.单例是什么</strong></p><p>举个常见的单例模式例子，我们日常使用的电脑上都有一个回收站，在整个操作系统中，回收站只能有一个实例，整个系统都使用这个唯一的实例，而且回收站自行提供自己的实例。因此回收站是单例模式的应用。</p><p>确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例，这个类称为单例类，单例模式是一种对象创建型模式。</p><p><strong>2.创建单例模式</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 实例化一个单例</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span><span class="params">(object)</span>:</span></span><br><span class="line">    __instance = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, age, name)</span>:</span></span><br><span class="line">        <span class="comment">#如果类数字能够__instance没有或者没有赋值</span></span><br><span class="line">        <span class="comment">#那么就创建一个对象，并且赋值为这个对象的引用，保证下次调用这个方法时</span></span><br><span class="line">        <span class="comment">#能够知道之前已经创建过对象了，这样就保证了只有1个对象</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> cls.__instance:</span><br><span class="line">            cls.__instance = object.__new__(cls)</span><br><span class="line">        <span class="keyword">return</span> cls.__instance</span><br><span class="line"></span><br><span class="line">a = Singleton(<span class="number">18</span>, <span class="string">"zhangsan"</span>)</span><br><span class="line">b = Singleton(<span class="number">8</span>, <span class="string">"lisi"</span>)</span><br><span class="line"></span><br><span class="line">print(id(a))</span><br><span class="line">print(id(b))</span><br><span class="line"></span><br><span class="line">a.age = <span class="number">19</span> <span class="comment">#给a指向的对象添加一个属性</span></span><br><span class="line">print(b.age)<span class="comment">#获取b指向的对象的age属性</span></span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/Users/jinzhong/PycharmProjects/hello3/venv/bin/python /Users/jinzhong/PycharmProjects/hello3/demo/test19.py</span><br><span class="line"><span class="number">4369269256</span></span><br><span class="line"><span class="number">4369269256</span></span><br><span class="line"><span class="number">19</span></span><br><span class="line">Process finished <span class="keyword">with</span> exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><p><strong>3.创建单例时，只执行1次__init__方法</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 实例化一个单例</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span><span class="params">(object)</span>:</span></span><br><span class="line">    __instance = <span class="keyword">None</span></span><br><span class="line">    __first_init = <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, age, name)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> cls.__instance:</span><br><span class="line">            cls.__instance = object.__new__(cls)</span><br><span class="line">        <span class="keyword">return</span> cls.__instance</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, age, name)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.__first_init==<span class="keyword">False</span>:</span><br><span class="line">            self.age = age</span><br><span class="line">            self.name = name</span><br><span class="line">            Singleton.__first_init = <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">a = Singleton(<span class="number">18</span>, <span class="string">"zhangsan"</span>)</span><br><span class="line">b = Singleton(<span class="number">8</span>, <span class="string">"lisi"</span>)</span><br><span class="line"></span><br><span class="line">print(id(a))</span><br><span class="line">print(id(b))</span><br><span class="line">print(a.age)</span><br><span class="line">print(b.age)</span><br><span class="line"></span><br><span class="line">a.age = <span class="number">19</span></span><br><span class="line">print(b.age)</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/Users/jinzhong/PycharmProjects/hello3/venv/bin/python /Users/jinzhong/PycharmProjects/hello3/demo/test19.py</span><br><span class="line"><span class="number">4503540232</span></span><br><span class="line"><span class="number">4503540232</span></span><br><span class="line"><span class="number">18</span></span><br><span class="line"><span class="number">18</span></span><br><span class="line"><span class="number">19</span></span><br><span class="line">Process finished <span class="keyword">with</span> exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><p>欢迎扫描我的微信，进行技术交流</p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1527169907.png?imageMogr2/thumbnail/!70p" alt=""></p><p>同时也欢迎您的打赏，这将鼓励我写出更多的文章</p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1527169944.png?imageMogr2/thumbnail/!70p" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;toc&quot;&gt;

&lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#mian-xiang-dui-xiang-san&quot;&gt;面向对象（三）&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#new-fang-fa&quot;&gt;__new__方法&lt;/a&gt;&lt;/li&gt;
&lt;
      
    
    </summary>
    
      <category term="Python" scheme="http://baofengketang.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://baofengketang.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python基础(九)</title>
    <link href="http://baofengketang.com/2018/05/08/python_base/python_09/"/>
    <id>http://baofengketang.com/2018/05/08/python_base/python_09/</id>
    <published>2018-05-08T13:11:50.000Z</published>
    <updated>2018-05-31T13:49:20.000Z</updated>
    
    <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#mian-xiang-dui-xiang-she-ji">面向对象设计</a><ul><li><a href="#she-ji-lei">设计类</a><ul><li><a href="#she-ji-yi-ge-mai-che-de-4s-dian">设计一个买车的4s店</a></li><li><a href="#she-ji-yi-ge-mai-bao-ma-che-de-4s-dian">设计一个买宝马车的4s店</a></li></ul></li><li><a href="#jian-dan-gong-han-mo-shi">简单工厂模式</a><ul><li><a href="#shi-yong-han-shu-lai-jie-jue">使用函数来解决</a></li><li><a href="#shi-yong-lei-lai-shi-xian">使用类来实现</a></li></ul></li><li><a href="#gong-han-fang-fa-mo-shi">工厂方法模式</a></li></ul></li></ul><!-- tocstop --></div><h1><span id="mian-xiang-dui-xiang-she-ji">面向对象设计</span><a href="#mian-xiang-dui-xiang-she-ji" class="header-anchor">#</a></h1><h2><span id="she-ji-lei">设计类</span><a href="#she-ji-lei" class="header-anchor">#</a></h2><h3><span id="she-ji-yi-ge-mai-che-de-4s-dian">设计一个买车的4s店</span><a href="#she-ji-yi-ge-mai-che-de-4s-dian" class="header-anchor">#</a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义一个车类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>:</span></span><br><span class="line">    <span class="comment"># 定义车的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">move</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"车在移动"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">stop</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"停车"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个汽车cs店类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Store</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">order</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'产生一辆汽车'</span>)</span><br><span class="line">        <span class="keyword">return</span> Car()</span><br><span class="line"></span><br><span class="line">store=Store()</span><br><span class="line">car =store.order()</span><br><span class="line">car.move()</span><br><span class="line">car.stop()</span><br></pre></td></tr></table></figure><p><strong>说明</strong></p><blockquote><p>上面的4s店，只能销售那一种类型的车</p><p>如果这个是个销售宝马品牌的车，比如550、x6,x1等，该怎样做呢？</p></blockquote><h3><span id="she-ji-yi-ge-mai-bao-ma-che-de-4s-dian">设计一个买宝马车的4s店</span><a href="#she-ji-yi-ge-mai-bao-ma-che-de-4s-dian" class="header-anchor">#</a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义一个车类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>:</span></span><br><span class="line">    <span class="comment"># 定义车的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">move</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"车在移动"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">stop</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"停车"</span>)</span><br><span class="line"><span class="comment">#定义三个子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bwm550</span><span class="params">(Car)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"550被领走了"</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X1</span><span class="params">(Car)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"x1被领走了"</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X6</span><span class="params">(Car)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"x6被领走了"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个汽车cs店类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Store</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">order</span><span class="params">(self,type)</span>:</span></span><br><span class="line">        print(<span class="string">'产生一辆汽车'</span>)</span><br><span class="line">        <span class="keyword">if</span> type==<span class="string">"550"</span>:</span><br><span class="line">            <span class="keyword">return</span> Bwm550()</span><br><span class="line">        <span class="keyword">elif</span> type ==<span class="string">"X1"</span>:</span><br><span class="line">            <span class="keyword">return</span> X1()</span><br><span class="line">        <span class="keyword">elif</span> type ==<span class="string">"X6"</span>:</span><br><span class="line">            <span class="keyword">return</span> X6()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> Car()</span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">store=Store()</span><br><span class="line">car1 =store.order(<span class="string">"550"</span>)</span><br><span class="line">print(car1)</span><br><span class="line">car2 =store.order(<span class="string">"X6"</span>)</span><br><span class="line">print(car2)</span><br><span class="line">car3 = store.order(<span class="string">"X1"</span>)</span><br><span class="line">print(car3)</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/Users/jinzhong/PycharmProjects/hello3/venv/bin/python /Users/jinzhong/PycharmProjects/hello3/demo/test17.py</span><br><span class="line">产生一辆汽车</span><br><span class="line">550被领走了</span><br><span class="line">产生一辆汽车</span><br><span class="line">x6被领走了</span><br><span class="line">产生一辆汽车</span><br><span class="line">x1被领走了</span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><blockquote><p>这样做，不太好，因为当宝马又生产一种新类型的车时，又得在Store类中修改，有没有好的解决办法呢？</p></blockquote><h2><span id="jian-dan-gong-han-mo-shi">简单工厂模式</span><a href="#jian-dan-gong-han-mo-shi" class="header-anchor">#</a></h2><h3><span id="shi-yong-han-shu-lai-jie-jue">使用函数来解决</span><a href="#shi-yong-han-shu-lai-jie-jue" class="header-anchor">#</a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义一个车类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>:</span></span><br><span class="line">    <span class="comment"># 定义车的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">move</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"车在移动"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">stop</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"停车"</span>)</span><br><span class="line"><span class="comment">#定义三个子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bwm550</span><span class="params">(Car)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"550被领走了"</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X1</span><span class="params">(Car)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"x1被领走了"</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X6</span><span class="params">(Car)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"x6被领走了"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个汽车cs店类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Store</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">order</span><span class="params">(self,type)</span>:</span></span><br><span class="line">        print(<span class="string">'产生一辆汽车'</span>)</span><br><span class="line">        <span class="keyword">return</span> createCar(type)</span><br><span class="line"><span class="comment"># 定义一个函数用来生成具体的对象</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createCar</span><span class="params">(type)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> type == <span class="string">"550"</span>:</span><br><span class="line">        <span class="keyword">return</span> Bwm550()</span><br><span class="line">    <span class="keyword">elif</span> type == <span class="string">"X1"</span>:</span><br><span class="line">        <span class="keyword">return</span> X1()</span><br><span class="line">    <span class="keyword">elif</span> type == <span class="string">"X6"</span>:</span><br><span class="line">        <span class="keyword">return</span> X6()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> Car()</span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">store=Store()</span><br><span class="line">car1 =store.order(<span class="string">"550"</span>)</span><br><span class="line">print(car1)</span><br><span class="line">car2 =store.order(<span class="string">"X6"</span>)</span><br><span class="line">print(car2)</span><br><span class="line">car3 = store.order(<span class="string">"X1"</span>)</span><br><span class="line">print(car3)</span><br></pre></td></tr></table></figure><h3><span id="shi-yong-lei-lai-shi-xian">使用类来实现</span><a href="#shi-yong-lei-lai-shi-xian" class="header-anchor">#</a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义一个车类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>:</span></span><br><span class="line">    <span class="comment"># 定义车的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">move</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"车在移动"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">stop</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"停车"</span>)</span><br><span class="line"><span class="comment">#定义三个子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bwm550</span><span class="params">(Car)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"550被领走了"</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X1</span><span class="params">(Car)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"x1被领走了"</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X6</span><span class="params">(Car)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"x6被领走了"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个汽车cs店类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Store</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">order</span><span class="params">(self,type)</span>:</span></span><br><span class="line">        print(<span class="string">'产生一辆汽车'</span>)</span><br><span class="line">        <span class="keyword">return</span> Factory.createCar(type)</span><br><span class="line"><span class="comment"># 定义一个工厂类，通过工厂类的静态方法产生对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Factory</span>:</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">createCar</span><span class="params">(type)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> type == <span class="string">"550"</span>:</span><br><span class="line">            <span class="keyword">return</span> Bwm550()</span><br><span class="line">        <span class="keyword">elif</span> type == <span class="string">"X1"</span>:</span><br><span class="line">            <span class="keyword">return</span> X1()</span><br><span class="line">        <span class="keyword">elif</span> type == <span class="string">"X6"</span>:</span><br><span class="line">            <span class="keyword">return</span> X6()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> Car()</span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">store=Store()</span><br><span class="line">car1 =store.order(<span class="string">"550"</span>)</span><br><span class="line">print(car1)</span><br><span class="line">car2 =store.order(<span class="string">"X6"</span>)</span><br><span class="line">print(car2)</span><br><span class="line">car3 = store.order(<span class="string">"X1"</span>)</span><br><span class="line">print(car3)</span><br></pre></td></tr></table></figure><blockquote><p>咋一看来，好像只是把生产环节重新创建了一个类，这确实比较像是一种编程习惯，此种解决方式被称作简单工厂模式</p><p>工厂函数、工厂类对具体的生成环节进行了封装，这样有利于代码的后需扩展，即把功能划分的更具体，4s店只负责销售，汽车厂只负责制造</p></blockquote><h2><span id="gong-han-fang-fa-mo-shi">工厂方法模式</span><a href="#gong-han-fang-fa-mo-shi" class="header-anchor">#</a></h2><p>当买车时，我们发现4s店其实很多，现在要求在系统里在增加一个斯柯达的4s店，我们应该如何考虑呢</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义一个车类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>:</span></span><br><span class="line">    <span class="comment"># 定义车的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">move</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"车在移动"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">stop</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"停车"</span>)</span><br><span class="line"><span class="comment">#定义三个子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bwm550</span><span class="params">(Car)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"550被领走了"</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X1</span><span class="params">(Car)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"x1被领走了"</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X6</span><span class="params">(Car)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"x6被领走了"</span></span><br><span class="line"><span class="comment"># 定义斯柯达汽车类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MR</span><span class="params">(Car)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"明锐被领走了"</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JR</span><span class="params">(Car)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"晶锐被领走类"</span></span><br><span class="line"><span class="comment"># 定义4s店的父类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Store</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getCar</span><span class="params">(self,type)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span>;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">order</span><span class="params">(self,type)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.getCar(type);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个宝马4s店类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BwmStore</span><span class="params">(Store)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getCar</span><span class="params">(self,type)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> BwmFactory.createCar(type);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SkdStore</span><span class="params">(Store)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getCar</span><span class="params">(self,type)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> SkdFactory.createCar(type);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SkdFactory</span>:</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">createCar</span><span class="params">(type)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> type==<span class="string">"明锐"</span>:</span><br><span class="line">            <span class="keyword">return</span> MR();</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> JR();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个函数用来生成具体的对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BwmFactory</span>:</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">createCar</span><span class="params">(type)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> type == <span class="string">"550"</span>:</span><br><span class="line">            <span class="keyword">return</span> Bwm550()</span><br><span class="line">        <span class="keyword">elif</span> type == <span class="string">"X1"</span>:</span><br><span class="line">            <span class="keyword">return</span> X1()</span><br><span class="line">        <span class="keyword">elif</span> type == <span class="string">"X6"</span>:</span><br><span class="line">            <span class="keyword">return</span> X6()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> Car()</span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">store=BwmStore()</span><br><span class="line">car1 =store.order(<span class="string">"550"</span>)</span><br><span class="line">print(car1)</span><br><span class="line">car2 =store.order(<span class="string">"X6"</span>)</span><br><span class="line">print(car2)</span><br><span class="line">car3 = store.order(<span class="string">"X1"</span>)</span><br><span class="line">print(car3)</span><br><span class="line"></span><br><span class="line">store2 =SkdStore();</span><br><span class="line">car4=store2.order(<span class="string">"明锐"</span>)</span><br><span class="line">print(car4)</span><br><span class="line">car5=store2.order(<span class="string">"晶锐"</span>)</span><br><span class="line">print(car5)</span><br></pre></td></tr></table></figure><p><strong>最后来看看工厂方法模式的定义</strong></p><blockquote><p>定义了一个创建对象的接口(可以理解为函数)，但由子类决定要实例化的类是哪一个，工厂方法模式让类的实例化推迟到子类，抽象的CarStore提供了一个创建对象的方法createCar，也叫作工厂方法。</p><p>子类真正实现这个createCar方法创建出具体产品。 创建者类不需要直到实际创建的产品是哪一个，选择了使用了哪个子类，自然也就决定了实际创建的产品是什么。</p></blockquote><p>欢迎扫描我的微信，进行技术交流</p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1527169907.png?imageMogr2/thumbnail/!70p" alt=""></p><p>同时也欢迎您的打赏，这将鼓励我写出更多的文章</p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1527169944.png?imageMogr2/thumbnail/!70p" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;toc&quot;&gt;

&lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#mian-xiang-dui-xiang-she-ji&quot;&gt;面向对象设计&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#she-ji-lei&quot;&gt;设计类&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a 
      
    
    </summary>
    
      <category term="Python" scheme="http://baofengketang.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://baofengketang.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python基础(八)</title>
    <link href="http://baofengketang.com/2018/05/08/python_base/python_08/"/>
    <id>http://baofengketang.com/2018/05/08/python_base/python_08/</id>
    <published>2018-05-08T04:41:28.000Z</published>
    <updated>2018-05-31T13:49:21.000Z</updated>
    
    <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#mian-xiang-dui-xiang-er">面向对象（二）</a><ul><li><a href="#bao-hu-dui-xiang-shu-xing">保护对象属性</a></li><li><a href="#del-fang-fa">__del__()方法</a></li><li><a href="#ji-cheng-jie-shao-yi-ji-dan-ji-cheng">继承介绍以及单继承</a></li><li><a href="#duo-ji-cheng">多继承</a></li><li><a href="#chong-xie-fu-lei-fang-fa-yu-diao-yong-fu-lei-fang-fa">重写父类方法与调用父类方法</a></li><li><a href="#duo-tai">多态</a></li><li><a href="#lei-shu-xing-shi-li-shu-xing">类属性、实例属性</a></li><li><a href="#jing-tai-fang-fa-he-lei-fang-fa">静态方法和类方法</a></li><li><a href="#zong-jie">总结</a></li></ul></li></ul><!-- tocstop --></div><h1><span id="mian-xiang-dui-xiang-er">面向对象（二）</span><a href="#mian-xiang-dui-xiang-er" class="header-anchor">#</a></h1><h2><span id="bao-hu-dui-xiang-shu-xing">保护对象属性</span><a href="#bao-hu-dui-xiang-shu-xing" class="header-anchor">#</a></h2><p>如果有一个对象，当需要对其进行修改属性时，有2种方法</p><ul><li>对象名.属性名 = 数据   —-&gt;直接修改</li><li>对象名.方法名()          —-&gt;间接修改</li></ul><p>为了更好的保存属性安全，即不能随意修改，一般的处理方式为</p><ul><li>将属性定义为私有属性</li><li>添加一个可以调用的方法，供调用</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.__name = name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getName</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.__name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setName</span><span class="params">(self, newName)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> len(newName) &gt;= <span class="number">5</span>:</span><br><span class="line">            self.__name = newName</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"error:名字长度需要大于或者等于5"</span>)</span><br><span class="line"></span><br><span class="line">xiaoming = People(<span class="string">"张三疯"</span>)</span><br><span class="line">print(xiaoming.__name)</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/Users/jinzhong/PycharmProjects/hello3/venv/bin/python /Users/jinzhong/PycharmProjects/hello3/demo/test16.py</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"/Users/jinzhong/PycharmProjects/hello3/demo/test16.py"</span>, line <span class="number">13</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    print(xiaoming.__name)</span><br><span class="line">AttributeError: <span class="string">'People'</span> object has no attribute <span class="string">'__name'</span></span><br><span class="line">Process finished <span class="keyword">with</span> exit code <span class="number">1</span></span><br></pre></td></tr></table></figure><p>上面的运行结果发现，__name不能直接被访问，接下来我们可以通过set、get方法来进行设置和访问</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.__name = name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getName</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.__name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setName</span><span class="params">(self, newName)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> len(newName) &gt;= <span class="number">5</span>:</span><br><span class="line">            self.__name = newName</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"error:名字长度需要大于或者等于5"</span>)</span><br><span class="line">p = People(<span class="string">"xiaot"</span>)</span><br><span class="line">p.setName(<span class="string">"as仙阁－辰鬼"</span>)</span><br><span class="line">print(p.getName())</span><br><span class="line">p.setName(<span class="string">"lisi"</span>)</span><br><span class="line">print(p.getName())</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/Users/jinzhong/PycharmProjects/hello3/venv/bin/python /Users/jinzhong/PycharmProjects/hello3/demo/test16.py</span><br><span class="line"><span class="keyword">as</span>仙阁－辰鬼</span><br><span class="line">error:名字长度需要大于或者等于<span class="number">5</span></span><br><span class="line"><span class="keyword">as</span>仙阁－辰鬼</span><br><span class="line">Process finished <span class="keyword">with</span> exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><p><strong>总结</strong></p><ul><li>Python中没有像C++中public和private这些关键字来区别公有属性和私有属性</li><li>它是以属性命名方式来区分，如果在属性名前面加了2个下划线’__’，则表明该属性是私有属性，否则为公有属性（方法也是一样，方法名前面加了2个下划线的话表示该方法是私有的，否则为公有的）。</li></ul><h2><span id="del-fang-fa">__del__()方法</span><a href="#del-fang-fa" class="header-anchor">#</a></h2><p>创建对象后，python解释器默认调用<code>__init__()</code>方法；</p><p>当删除一个对象时，python解释器也会默认调用一个方法，这个方法为<code>__del__()</code>方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="comment"># 初始化方法</span></span><br><span class="line">    <span class="comment"># 创建完对象后会自动被调用</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        print(<span class="string">'__init__方法被调用'</span>)</span><br><span class="line">        self.__name = name</span><br><span class="line">    <span class="comment"># 析构方法</span></span><br><span class="line">    <span class="comment"># 当对象被删除时，会自动被调用</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"__del__方法被调用"</span>)</span><br><span class="line">        print(<span class="string">"%s对象马上被干掉了..."</span>%self.__name)</span><br><span class="line"><span class="comment"># 创建对象</span></span><br><span class="line">dog = Animal(<span class="string">"哈皮狗"</span>)</span><br><span class="line"><span class="comment"># 删除对象</span></span><br><span class="line"><span class="keyword">del</span> dog</span><br><span class="line"></span><br><span class="line">cat = Animal(<span class="string">"波斯猫"</span>)</span><br><span class="line">cat2 = cat</span><br><span class="line">cat3 = cat</span><br><span class="line">print(<span class="string">"---马上 删除cat对象"</span>)</span><br><span class="line"><span class="keyword">del</span> cat</span><br><span class="line">print(<span class="string">"---马上 删除cat2对象"</span>)</span><br><span class="line"><span class="keyword">del</span> cat2</span><br><span class="line">print(<span class="string">"---马上 删除cat3对象"</span>)</span><br><span class="line"><span class="keyword">del</span> cat3</span><br><span class="line">print(<span class="string">"程序2秒钟后结束"</span>)</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/Users/jinzhong/PycharmProjects/hello3/venv/bin/python /Users/jinzhong/PycharmProjects/hello3/demo/test16.py</span><br><span class="line">__init__方法被调用</span><br><span class="line">__del__方法被调用</span><br><span class="line">哈皮狗对象马上被干掉了...</span><br><span class="line">__init__方法被调用</span><br><span class="line">---马上 删除cat对象</span><br><span class="line">---马上 删除cat2对象</span><br><span class="line">---马上 删除cat3对象</span><br><span class="line">__del__方法被调用</span><br><span class="line">波斯猫对象马上被干掉了...</span><br><span class="line">程序<span class="number">2</span>秒钟后结束</span><br><span class="line">Process finished <span class="keyword">with</span> exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><p><strong>总结</strong></p><ul><li>当有1个变量保存了对象的引用时，此对象的引用计数就会加1</li><li>当使用del删除变量指向的对象时，如果对象的引用计数不会1，比如3，那么此时只会让这个引用计数减1，即变为2，当再次调用del时，变为1，如果再调用1次del，此时会真的把对象进行删除</li></ul><p>补充：</p><p>在python中我们可以通过sys.getrefcount()方法来测试对象的引用计数器，通过sys.getrefcount()方法得到的引用计数比实际个数多一个</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="comment"># 初始化方法</span></span><br><span class="line">    <span class="comment"># 创建完对象后会自动被调用</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        print(<span class="string">'__init__方法被调用'</span>)</span><br><span class="line">        self.__name = name</span><br><span class="line">    <span class="comment"># 析构方法</span></span><br><span class="line">    <span class="comment"># 当对象被删除时，会自动被调用</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"__del__方法被调用"</span>)</span><br><span class="line">        print(<span class="string">"%s对象马上被干掉了..."</span>%self.__name)</span><br><span class="line">cat = Animal(<span class="string">"波斯猫"</span>)</span><br><span class="line">cat2 = cat</span><br><span class="line">cat3 = cat</span><br><span class="line">print(sys.getrefcount(cat3))</span><br><span class="line"><span class="keyword">del</span> cat3</span><br><span class="line">print(sys.getrefcount(cat2))</span><br><span class="line"><span class="keyword">del</span> cat2</span><br><span class="line">print(sys.getrefcount(cat))</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/Users/jinzhong/PycharmProjects/hello3/venv/bin/python /Users/jinzhong/PycharmProjects/hello3/demo/test16.py</span><br><span class="line">__init__方法被调用</span><br><span class="line">4</span><br><span class="line">3</span><br><span class="line">2</span><br><span class="line">__del__方法被调用</span><br><span class="line">波斯猫对象马上被干掉了...</span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><h2><span id="ji-cheng-jie-shao-yi-ji-dan-ji-cheng">继承介绍以及单继承</span><a href="#ji-cheng-jie-shao-yi-ji-dan-ji-cheng" class="header-anchor">#</a></h2><p><strong>继承的概念</strong></p><p>在现实生活中，继承一般指的是子女继承父辈的财产</p><p>在程序中，继承描述的是事物之间的所属关系，例如猫和狗都属于动物，程序中便可以描述为猫和狗继承自动物；同理，波斯猫和巴厘猫都继承自猫，而沙皮狗和斑点狗都继承狗</p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1525766153.png?imageMogr2/thumbnail/!70p" alt=""></p><p><strong>2.继承实例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义一个父类，如下:</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, color=<span class="string">"白色"</span>)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.color = color</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"%s--在跑"</span>%self.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个子类，继承Cat类如下:</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bosi</span><span class="params">(Cat)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setNewName</span><span class="params">(self, newName)</span>:</span></span><br><span class="line">        self.name = newName</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"%s--在吃"</span>%self.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">bs = Bosi(<span class="string">"印度猫"</span>)</span><br><span class="line">print(<span class="string">'bs的名字为:%s'</span>%bs.name)</span><br><span class="line">print(<span class="string">'bs的颜色为:%s'</span>%bs.color)</span><br><span class="line">bs.eat()</span><br><span class="line">bs.setNewName(<span class="string">'波斯'</span>)</span><br><span class="line">bs.run()</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/Users/jinzhong/PycharmProjects/hello3/venv/bin/python /Users/jinzhong/PycharmProjects/hello3/demo/test16.py</span><br><span class="line">bs的名字为:印度猫</span><br><span class="line">bs的颜色为:白色</span><br><span class="line">印度猫--在吃</span><br><span class="line">波斯--在跑</span><br><span class="line">Process finished <span class="keyword">with</span> exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>虽然子类没有定义<code>__init__</code>方法，但是父类有，所以在子类继承父类的时候这个方法就被继承了，所以只要创建Bosi的对象，就默认执行了那个继承过来的<code>__init__</code>方法</li></ul><p><strong>总结</strong></p><ul><li>子类在继承的时候，在定义类时，小括号()中为父类的名字</li><li>父类的属性、方法，会被继承给子类</li></ul><p><strong>注意点</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name=<span class="string">'动物'</span>, color=<span class="string">'白色'</span>)</span>:</span></span><br><span class="line">        self.__name = name</span><br><span class="line">        self.color = color</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__test</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.__name)</span><br><span class="line">        print(self.color)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.__name)</span><br><span class="line">        print(self.color)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">(Animal)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dogTest1</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment">#print(self.__name) #不能访问到父类的私有属性</span></span><br><span class="line">        print(self.color)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dogTest2</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment">#self.__test() #不能访问父类中的私有方法</span></span><br><span class="line">        self.test()</span><br><span class="line">A = Animal()</span><br><span class="line"><span class="comment">#print(A.__name) #程序出现异常，不能访问私有属性</span></span><br><span class="line">print(A.color)</span><br><span class="line"><span class="comment">#A.__test() #程序出现异常，不能访问私有方法</span></span><br><span class="line">A.test()</span><br><span class="line">print(<span class="string">"------分割线-----"</span>)</span><br><span class="line">D = Dog(name = <span class="string">"小花狗"</span>, color = <span class="string">"黄色"</span>)</span><br><span class="line">D.dogTest1()</span><br><span class="line">D.dogTest2()</span><br></pre></td></tr></table></figure><ul><li>私有的属性，不能通过对象直接访问，但是可以通过方法访问</li><li>私有的方法，不能通过对象直接访问</li><li>私有的属性、方法，不会被子类继承，也不能被访问</li><li>一般情况下，私有的属性、方法都是不对外公布的，往往用来做内部的事情，起到安全的作用</li></ul><h2><span id="duo-ji-cheng">多继承</span><a href="#duo-ji-cheng" class="header-anchor">#</a></h2><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1525766716.png?imageMogr2/thumbnail/!70p" alt=""></p><p>从图中能够看出，所谓多继承，即子类有多个父类，并且具有它们的特征</p><p>Python中多继承的格式如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义一个父类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printA</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'----A----'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个父类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printB</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'----B----'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个子类，继承自A、B</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(A,B)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printC</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'----C----'</span>)</span><br><span class="line"></span><br><span class="line">obj_C = C()</span><br><span class="line">obj_C.printA()</span><br><span class="line">obj_C.printB()</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">----A----</span><br><span class="line">----B----</span><br></pre></td></tr></table></figure><p><strong>说明</strong></p><blockquote><ul><li>python中是可以多继承的</li><li>父类中的方法、属性，子类会继承</li></ul></blockquote><p><strong>注意点</strong></p><ul><li><blockquote><p>如果在上面的多继承例子中，如果父类A和父类B中，有一个同名的方法，那么通过子类去调用的时候，调用哪个？</p></blockquote></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">base</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'----base test----'</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(base)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'----A test----'</span>)</span><br><span class="line"><span class="comment"># 定义一个父类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(base)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'----B test----'</span>)</span><br><span class="line"><span class="comment"># 定义一个子类，继承自A、B</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(A,B)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">obj_C = C()</span><br><span class="line">obj_C.test()</span><br><span class="line">print(C.__mro__) <span class="comment">#可以查看C类的对象搜索方法时的先后顺序</span></span><br></pre></td></tr></table></figure><h2><span id="chong-xie-fu-lei-fang-fa-yu-diao-yong-fu-lei-fang-fa">重写父类方法与调用父类方法</span><a href="#chong-xie-fu-lei-fang-fa-yu-diao-yong-fu-lei-fang-fa" class="header-anchor">#</a></h2><p><strong>1.重写父类方法</strong></p><p>所谓重写，就是子类中，有一个和父类相同名字的方法，在子类中的方法会覆盖掉父类中同名的方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sayHello</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"haha"</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bosi</span><span class="params">(Cat)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sayHello</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"hehe"</span>)</span><br><span class="line">bosi = Bosi()</span><br><span class="line">bosi.sayHello()</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/Users/jinzhong/PycharmProjects/hello3/venv/bin/python /Users/jinzhong/PycharmProjects/hello3/demo/test16.py</span><br><span class="line">hehe</span><br><span class="line">Process finished <span class="keyword">with</span> exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><p><strong>2.调用方法</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.color = <span class="string">'yellow'</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bosi</span><span class="params">(Cat)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name)</span>:</span></span><br><span class="line">        <span class="comment"># 调用父类的__init__方法1(python2)</span></span><br><span class="line">        <span class="comment">#Cat.__init__(self,name)</span></span><br><span class="line">        <span class="comment"># 调用父类的__init__方法2</span></span><br><span class="line">        <span class="comment"># super(Bosi,self).__init__(name)</span></span><br><span class="line">        <span class="comment"># 调用父类的__init__方法3</span></span><br><span class="line">        super().__init__(name)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getName</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line">bosi = Bosi(<span class="string">'妮妮'</span>)</span><br><span class="line">print(bosi.name)</span><br><span class="line">print(bosi.color)</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/Users/jinzhong/PycharmProjects/hello3/venv/bin/python /Users/jinzhong/PycharmProjects/hello3/demo/test16.py</span><br><span class="line">妮妮</span><br><span class="line">yellow</span><br><span class="line">Process finished <span class="keyword">with</span> exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><h2><span id="duo-tai">多态</span><a href="#duo-tai" class="header-anchor">#</a></h2><p>多态的概念是应用于Java和C#这一类强类型语言中，而Python崇尚“鸭子类型”。</p><p>所谓多态：定义时的类型和运行时的类型不一样，此时就成为多态</p><p>Python伪代码实现Java或C#的多态</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">F1</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'F1.show'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">S1</span><span class="params">(F1)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'S1.show'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">S2</span><span class="params">(F1)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'S2.show'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 由于在Java或C#中定义函数参数时，必须指定参数的类型</span></span><br><span class="line"><span class="comment"># 为了让Func函数既可以执行S1对象的show方法，又可以执行S2对象的show方法，所以，定义了一个S1和S2类的父类</span></span><br><span class="line"><span class="comment"># 而实际传入的参数是：S1对象和S2对象</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Func</span><span class="params">(F1 obj)</span>:</span></span><br><span class="line">    <span class="string">"""Func函数需要接收一个F1类型或者F1子类的类型"""</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">print</span> obj.show()</span><br><span class="line"></span><br><span class="line">s1_obj = S1()</span><br><span class="line">Func(s1_obj) <span class="comment"># 在Func函数中传入S1类的对象 s1_obj，执行 S1 的show方法，结果：S1.show</span></span><br><span class="line"></span><br><span class="line">s2_obj = S2()</span><br><span class="line">Func(s2_obj) <span class="comment"># 在Func函数中传入Ss类的对象 ss_obj，执行 Ss 的show方法，结果：S2.show</span></span><br></pre></td></tr></table></figure><p>Python “鸭子类型”</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">F1</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'F1.show'</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">S1</span><span class="params">(F1)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'S1.show'</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">S2</span><span class="params">(F1)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'S2.show'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Func</span><span class="params">(obj)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> obj.show()</span><br><span class="line">s1_obj = S1()</span><br><span class="line">Func(s1_obj) </span><br><span class="line"></span><br><span class="line">s2_obj = S2()</span><br><span class="line">Func(s2_obj)</span><br></pre></td></tr></table></figure><h2><span id="lei-shu-xing-shi-li-shu-xing">类属性、实例属性</span><a href="#lei-shu-xing-shi-li-shu-xing" class="header-anchor">#</a></h2><p>了解了类基本的东西之后，下面看一下python中这几个概念的区别</p><p>先来谈一下类属性和实例属性</p><p>在前面的例子中我们接触到的就是实例属性（对象属性），顾名思义，类属性就是类对象</p><p>所拥有的属性，它被所有类对象的实例对象所共有，在内存中只存在一个副本，这个和C++中类的静态成员变量有点类似。对于公有的类属性，在类外可以通过类对象和实例对象访问</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span><span class="params">(object)</span>:</span></span><br><span class="line">    name = <span class="string">'Tom'</span>  <span class="comment">#公有的类属性</span></span><br><span class="line">    __age = <span class="number">12</span>     <span class="comment">#私有的类属性</span></span><br><span class="line">p = People()</span><br><span class="line">print(p.name)           <span class="comment">#正确</span></span><br><span class="line">print(People.name)      <span class="comment">#正确</span></span><br><span class="line">print(p.__age)            <span class="comment">#错误，不能在类外通过实例对象访问私有的类属性</span></span><br><span class="line">print(People.__age)        <span class="comment">#错误，不能在类外通过类对象访问私有的类属性</span></span><br></pre></td></tr></table></figure><p><strong>实例属性（对象属性）</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span><span class="params">(object)</span>:</span></span><br><span class="line">    address = <span class="string">'山东'</span> <span class="comment">#类属性</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.name = <span class="string">'xiaowang'</span> <span class="comment">#实例属性</span></span><br><span class="line">        self.age = <span class="number">20</span> <span class="comment">#实例属性</span></span><br><span class="line">p = People()</span><br><span class="line">p.age =<span class="number">12</span> <span class="comment">#实例属性</span></span><br><span class="line">print(p.address) <span class="comment">#正确</span></span><br><span class="line">print(p.name)    <span class="comment">#正确</span></span><br><span class="line">print(p.age)     <span class="comment">#正确</span></span><br><span class="line">print(People.address) <span class="comment">#正确</span></span><br><span class="line">print(People.name)    <span class="comment">#错误</span></span><br><span class="line">print(People.age)     <span class="comment">#错误</span></span><br></pre></td></tr></table></figure><p><strong>通过实例对象去修改类属性</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span><span class="params">(object)</span>:</span></span><br><span class="line">    country = <span class="string">'china'</span> <span class="comment">#类属性</span></span><br><span class="line">print(People.country)</span><br><span class="line">p = People()</span><br><span class="line">print(p.country)</span><br><span class="line">p.country = <span class="string">'japan'</span></span><br><span class="line">print(p.country)      <span class="comment">#实例属性会屏蔽掉同名的类属性</span></span><br><span class="line">print(People.country)</span><br><span class="line"><span class="keyword">del</span> p.country    <span class="comment">#删除实例属性</span></span><br><span class="line">print(p.country)</span><br></pre></td></tr></table></figure><p><strong>总结</strong></p><p>如果需要在类外修改类属性，必须通过类对象去引用然后进行修改。如果通过实例对象去引用，会产生一个同名的实例属性，这种方式修改的是实例属性，不会影响到类属性，并且之后如果通过实例对象去引用该名称的属性，实例属性会强制屏蔽掉类属性，即引用的是实例属性，除非删除了该实例属性。</p><h2><span id="jing-tai-fang-fa-he-lei-fang-fa">静态方法和类方法</span><a href="#jing-tai-fang-fa-he-lei-fang-fa" class="header-anchor">#</a></h2><p><strong>1.类方法</strong></p><p>是类对象所拥有的方法，需要用修饰器<code>@classmethod</code>来标识其为类方法，对于类方法，第一个参数必须是类对象，一般以<code>cls</code>作为第一个参数（当然可以用其他名称的变量作为其第一个参数，但是大部分人都习惯以’cls’作为第一个参数的名字，就最好用’cls’了），能够通过实例对象和类对象去访问。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span><span class="params">(object)</span>:</span></span><br><span class="line">    country = <span class="string">'china'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#类方法，用classmethod来进行修饰</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getCountry</span><span class="params">(cls)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> cls.country</span><br><span class="line"></span><br><span class="line">p = People()</span><br><span class="line"><span class="keyword">print</span> p.getCountry()    <span class="comment">#可以用过实例对象引用</span></span><br><span class="line"><span class="keyword">print</span> People.getCountry()    <span class="comment">#可以通过类对象引用</span></span><br></pre></td></tr></table></figure><p>类方法还有一个用途就是可以对类属性进行修改：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span><span class="params">(object)</span>:</span></span><br><span class="line">    country = <span class="string">'china'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#类方法，用classmethod来进行修饰</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getCountry</span><span class="params">(cls)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> cls.country</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setCountry</span><span class="params">(cls,country)</span>:</span></span><br><span class="line">        cls.country = country</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = People()</span><br><span class="line"><span class="keyword">print</span> p.getCountry()    <span class="comment">#可以用过实例对象引用</span></span><br><span class="line"><span class="keyword">print</span> People.getCountry()    <span class="comment">#可以通过类对象引用</span></span><br><span class="line"></span><br><span class="line">p.setCountry(<span class="string">'japan'</span>)   </span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> p.getCountry()   </span><br><span class="line"><span class="keyword">print</span> People.getCountry()</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">china</span><br><span class="line">china</span><br><span class="line">japan</span><br><span class="line">japan</span><br></pre></td></tr></table></figure><p>结果显示在用类方法对类属性修改之后，通过类对象和实例对象访问都发生了改变</p><p><strong>2.静态方法</strong></p><p>需要通过修饰器<code>@staticmethod</code>来进行修饰，静态方法不需要多定义参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span><span class="params">(object)</span>:</span></span><br><span class="line">    country = <span class="string">'china'</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="comment">#静态方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getCountry</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">return</span> People.country</span><br><span class="line"><span class="keyword">print</span> People.getCountry()</span><br></pre></td></tr></table></figure><h2><span id="zong-jie">总结</span><a href="#zong-jie" class="header-anchor">#</a></h2><p>从类方法和实例方法以及静态方法的定义形式就可以看出来，类方法的第一个参数是类对象cls，那么通过cls引用的必定是类对象的属性和方法；而实例方法的第一个参数是实例对象self，那么通过self引用的可能是类属性、也有可能是实例属性（这个需要具体分析），不过在存在相同名称的类属性和实例属性的情况下，实例属性优先级更高。静态方法中不需要额外定义参数，因此在静态方法中引用类属性的话，必须通过类对象来引用</p><p>欢迎扫描我的微信，进行技术交流</p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1527169907.png?imageMogr2/thumbnail/!70p" alt=""></p><p>同时也欢迎您的打赏，这将鼓励我写出更多的文章</p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1527169944.png?imageMogr2/thumbnail/!70p" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;toc&quot;&gt;

&lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#mian-xiang-dui-xiang-er&quot;&gt;面向对象（二）&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#bao-hu-dui-xiang-shu-xing&quot;&gt;保护对象属性&lt;
      
    
    </summary>
    
      <category term="Python" scheme="http://baofengketang.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://baofengketang.com/tags/Python/"/>
    
  </entry>
  
</feed>
