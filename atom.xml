<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>KingDom</title>
  
  <subtitle>KingDom&#39;s Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://baofengketang.com/"/>
  <updated>2018-04-16T12:05:21.000Z</updated>
  <id>http://baofengketang.com/</id>
  
  <author>
    <name>[object Object]</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>古诗词（一）</title>
    <link href="http://baofengketang.com/2018/04/13/jinhaoze/number1/"/>
    <id>http://baofengketang.com/2018/04/13/jinhaoze/number1/</id>
    <published>2018-04-13T13:04:43.000Z</published>
    <updated>2018-04-16T12:05:21.000Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="jing-ye-si-li-bai-shi-zuo">静夜思(李白诗作)</span><a href="#jing-ye-si-li-bai-shi-zuo" class="header-anchor">#</a></h1><h3><span id="chuang-qian-ming-yue-guang-yi-shi-di-shang-shuang">床前明月光，疑是地上霜。</span><a href="#chuang-qian-ming-yue-guang-yi-shi-di-shang-shuang" class="header-anchor">#</a></h3><h3><span id="ju-tou-wang-ming-yue-di-tou-si-gu-xiang">举头望明月，低头思故乡。</span><a href="#ju-tou-wang-ming-yue-di-tou-si-gu-xiang" class="header-anchor">#</a></h3><hr><h1><span id="chun-xiao-tang-dai-meng-hao-ran-shi-zuo">春晓（唐代孟浩然诗作）</span><a href="#chun-xiao-tang-dai-meng-hao-ran-shi-zuo" class="header-anchor">#</a></h1><h3><span id="chun-mian-bu-jue-xiao-chu-chu-wen-ti-niao">春眠不觉晓，处处闻啼鸟。</span><a href="#chun-mian-bu-jue-xiao-chu-chu-wen-ti-niao" class="header-anchor">#</a></h3><h3><span id="ye-lai-feng-yu-sheng-hua-luo-zhi-duo-shao">夜来风雨声，花落知多少。</span><a href="#ye-lai-feng-yu-sheng-hua-luo-zhi-duo-shao" class="header-anchor">#</a></h3><hr><h1><span id="cun-ju-qing-dai-shi-ren-gao-ding">村居（清代诗人高鼎）</span><a href="#cun-ju-qing-dai-shi-ren-gao-ding" class="header-anchor">#</a></h1><h3><span id="cao-chang-ying-fei-er-yue-tian-fu-di-yang-liu-zui-chun-yan">草长莺飞二月天，拂堤杨柳醉春烟。</span><a href="#cao-chang-ying-fei-er-yue-tian-fu-di-yang-liu-zui-chun-yan" class="header-anchor">#</a></h3><h3><span id="er-tong-san-xue-gui-lai-zao-mang-chen-dong-feng-fang-zhi-yuan">儿童散学归来早，忙趁东风放纸鸢</span><a href="#er-tong-san-xue-gui-lai-zao-mang-chen-dong-feng-fang-zhi-yuan" class="header-anchor">#</a></h3><hr><h1><span id="suo-jian-qing-dai-shi-ren-yuan-mei">所见（清代诗人袁枚）</span><a href="#suo-jian-qing-dai-shi-ren-yuan-mei" class="header-anchor">#</a></h1><h3><span id="mu-tong-qi-huang-niu-ge-sheng-zhen-lin-yue">牧童骑黄牛，歌声振林樾。</span><a href="#mu-tong-qi-huang-niu-ge-sheng-zhen-lin-yue" class="header-anchor">#</a></h3><h3><span id="yi-yu-bu-ming-chan-hu-ran-bi-kou-li">意欲捕鸣蝉，忽然闭口立。</span><a href="#yi-yu-bu-ming-chan-hu-ran-bi-kou-li" class="header-anchor">#</a></h3><hr><h1><span id="xiao-chi-song-dai-shi-ren-yang-wan-li">小池（宋代诗人杨万里）</span><a href="#xiao-chi-song-dai-shi-ren-yang-wan-li" class="header-anchor">#</a></h1><h3><span id="quan-yan-wu-sheng-xi-xi-liu-shu-yin-zhao-shui-ai-qing-rou">泉眼无声惜细流，树阴照水爱晴柔。</span><a href="#quan-yan-wu-sheng-xi-xi-liu-shu-yin-zhao-shui-ai-qing-rou" class="header-anchor">#</a></h3><h3><span id="xiao-he-cai-lu-jian-jian-jiao-zao-you-qing-ting-li-shang-tou">小荷才露尖尖角，早有蜻蜓立上头。</span><a href="#xiao-he-cai-lu-jian-jian-jiao-zao-you-qing-ting-li-shang-tou" class="header-anchor">#</a></h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;&lt;span id=&quot;jing-ye-si-li-bai-shi-zuo&quot;&gt;静夜思(李白诗作)&lt;/span&gt;&lt;a href=&quot;#jing-ye-si-li-bai-shi-zuo&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;&lt;h3&gt;&lt;span id=&quot;
      
    
    </summary>
    
      <category term="java" scheme="http://baofengketang.com/categories/java/"/>
    
    
      <category term="亲子" scheme="http://baofengketang.com/tags/%E4%BA%B2%E5%AD%90/"/>
    
      <category term="诗词" scheme="http://baofengketang.com/tags/%E8%AF%97%E8%AF%8D/"/>
    
  </entry>
  
  <entry>
    <title>Linux基础（二）</title>
    <link href="http://baofengketang.com/2018/04/13/linux/linux_02/"/>
    <id>http://baofengketang.com/2018/04/13/linux/linux_02/</id>
    <published>2018-04-13T09:39:43.000Z</published>
    <updated>2018-04-16T12:05:12.000Z</updated>
    
    <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#linux-xi-tong-de-chang-yong-ming-ling-cao-zuo">Linux系统的常用命令操作</a><ul><li><a href="#wen-jian-yu-mu-lu">文件与目录</a></li><li><a href="#ming-ling">命令</a><ul><li><a href="#wen-jian-cao-zuo">文件操作</a></li></ul></li></ul></li></ul><!-- tocstop --></div><h1><span id="linux-xi-tong-de-chang-yong-ming-ling-cao-zuo">Linux系统的常用命令操作</span><a href="#linux-xi-tong-de-chang-yong-ming-ling-cao-zuo" class="header-anchor">#</a></h1><h2><span id="wen-jian-yu-mu-lu">文件与目录</span><a href="#wen-jian-yu-mu-lu" class="header-anchor">#</a></h2><p>在 windows 平台下， 打开“计算机”， 我们看到的是⼀个个的驱动器盘， 每个驱动器都有⾃⼰的根⽬录结构， 这样形成了多个树并列的情形。在 Linux 下， 我们是看不到这些驱动器盘符， 我们看到的是⽂件夹（⽬录） </p><p><strong>Unix系统的目录结构（了解）</strong></p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1523583223.png?imageMogr2/thumbnail/!70p" alt=""></p><ul><li><p>/： 根⽬录， ⼀般根⽬录下只存放⽬录， 在Linux下有且只有⼀个根⽬录。 所有的东⻄都是从这⾥开始。 当你在终端⾥输⼊“/home”， 你其实是在告诉电脑， 先从/（根⽬录） 开始， 再进⼊到home⽬录。</p></li><li><p>/bin、 /usr/bin: 可执⾏⼆进制⽂件的⽬录， 如常⽤的命令ls、 tar、 mv、 cat等。</p></li><li><p>/boot： 放置linux系统启动时⽤到的⼀些⽂件， 如Linux的内核⽂件： /boot/vmlinuz，系统引导管理器： /boot/grub。</p></li><li><p>/dev： 存放linux系统下的设备⽂件， 访问该⽬录下某个⽂件， 相当于访问某个设备，常⽤的是挂载光驱 mount /dev/cdrom /mnt。</p></li><li><p>/etc： 系统配置⽂件存放的⽬录， 不建议在此⽬录下存放可执⾏⽂件</p></li><li><p>/home： 系统默认的⽤户家⽬录， 新增⽤户账号时， ⽤户的家⽬录都存放在此⽬下， ~表示当前⽤户的家⽬录， ~edu 表示⽤户 edu 的家⽬录。</p></li><li><p>/lib、 /usr/lib、 /usr/local/lib： 系统使⽤的函数库的⽬录， 程序在执⾏过程中， 需要调⽤⼀些额外的参数时需要函数库的协助。</p></li><li><p>/lost+fount： 系统异常产⽣错误时， 会将⼀些遗失的⽚段放置于此⽬录下。/mnt: /media： 光盘默认挂载点， 通常光盘挂载于 /mnt/cdrom 下， 也不⼀定， 可以选择任意位置进⾏挂载。</p></li><li><p>/opt： 给主机额外安装软件所摆放的⽬录。</p></li><li><p>/proc： 此⽬录的数据都在内存中， 如系统核⼼， 外部设备， ⽹络状态， 由于数据都存放于内存中， 所以不占⽤磁盘空间， ⽐较重要的⽬录有/proc/cpuinfo、 /proc/interrupts、 /proc/dma、 /proc/ioports、/proc/net/* 等。</p></li><li><p>/root： 系统管理员root的家⽬录。</p></li><li><p>/sbin、 /usr/sbin、 /usr/local/sbin： 放置系统管理员使⽤的可执⾏命令， 如fdisk、shutdown、 mount 等。 与 /bin 不同的是， 这⼏个⽬录是给系统管理员 root使⽤的命令， ⼀般⽤户只能”查看”⽽不能设置和使⽤。</p></li><li><p>/tmp： ⼀般⽤户或正在执⾏的程序临时存放⽂件的⽬录， 任何⼈都可以访问， 重要数据不可放置在此⽬下。</p></li><li><p>/srv： 服务启动之后需要访问的数据⽬录， 如 www 服务需要访问的⽹⻚数据存放在/srv/www 内。</p></li><li><p>/usr： 应⽤程序存放⽬录， /usr/bin 存放应⽤程序， /usr/share 存放共享数据， /usr/lib存放不能直接运⾏的， 却是许多程序运⾏所必需的⼀些函数库⽂件。 /usr/local: 存放软件升级包。 /usr/share/doc: 系统说明⽂件存放⽬录。 /usr/share/man: 程序说明⽂件存放⽬录。</p></li><li><p>/var： 放置系统执⾏过程中经常变化的⽂件， 如随时更改的⽇志⽂件</p></li><li><p>/var/log， /var/log/message： 所有的登录⽂件存放⽬录， /var/spool/mail： 邮件存放的⽬录， /var/run:程序或服务启动后， 其PID存放在该⽬录下</p><p><strong>用户目录（重点）</strong></p><p>位于/home/user， 称之为⽤户⼯作⽬录或家⽬录,表示⽅式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jinzhong@ubuntu:~$ <span class="built_in">cd</span> ~</span><br><span class="line">jinzhong@ubuntu:~$ <span class="built_in">pwd</span></span><br><span class="line">/home/jinzhong</span><br></pre></td></tr></table></figure><p><strong>相对路径与绝对路径</strong></p><p>绝对路径： 从/⽬录开始描述的路径为绝对路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jinzhong@ubuntu:~$ <span class="built_in">cd</span> /home/jinzhong/</span><br><span class="line">jinzhong@ubuntu:~$ <span class="built_in">pwd</span></span><br><span class="line">/home/jinzhong</span><br></pre></td></tr></table></figure><p> 相对路径: 从当前位置开始描述的路径为相对路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">jinzhong@ubuntu:~$ cd .</span><br><span class="line">jinzhong@ubuntu:~$ pwd</span><br><span class="line">/home/jinzhong</span><br><span class="line">jinzhong@ubuntu:~$ cd ..</span><br><span class="line">jinzhong@ubuntu:/home$ pwd</span><br><span class="line">/home</span><br><span class="line">jinzhong@ubuntu:/home$</span><br></pre></td></tr></table></figure><p><strong>.和..</strong></p><p> 每个⽬录下都有.和..</p><p>. 表示当前⽬录</p><p>.. 表示上⼀级⽬录， 即⽗⽬录</p><p>根⽬录下的.和..都表示当前⽬录</p></li></ul><h2><span id="ming-ling">命令</span><a href="#ming-ling" class="header-anchor">#</a></h2><h3><span id="wen-jian-cao-zuo">文件操作</span><a href="#wen-jian-cao-zuo" class="header-anchor">#</a></h3><p><strong>ls命令:显示目录中的文件</strong></p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1523594563.png?imageMogr2/thumbnail/!70p" alt=""></p><p><strong>创建目录</strong></p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1523594765.png?imageMogr2/thumbnail/!70p" alt=""></p><p><strong>创建文件（在kingdom目录下）</strong></p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1523594926.png?imageMogr2/thumbnail/!70p" alt=""></p><p><strong>删除目录</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;toc&quot;&gt;

&lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#linux-xi-tong-de-chang-yong-ming-ling-cao-zuo&quot;&gt;Linux系统的常用命令操作&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#wen-j
      
    
    </summary>
    
      <category term="linux" scheme="http://baofengketang.com/categories/linux/"/>
    
    
      <category term="linux" scheme="http://baofengketang.com/tags/linux/"/>
    
      <category term="操作系统" scheme="http://baofengketang.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis源码解析</title>
    <link href="http://baofengketang.com/2018/04/13/mybatis/mybatis_01/"/>
    <id>http://baofengketang.com/2018/04/13/mybatis/mybatis_01/</id>
    <published>2018-04-13T07:48:19.000Z</published>
    <updated>2018-04-16T12:05:38.000Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="mybatis-ru-men">MyBatis入门</span><a href="#mybatis-ru-men" class="header-anchor">#</a></h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;&lt;span id=&quot;mybatis-ru-men&quot;&gt;MyBatis入门&lt;/span&gt;&lt;a href=&quot;#mybatis-ru-men&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
      
    
    </summary>
    
      <category term="mybatis" scheme="http://baofengketang.com/categories/mybatis/"/>
    
    
      <category term="mybatis" scheme="http://baofengketang.com/tags/mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Linux基础(一)</title>
    <link href="http://baofengketang.com/2018/04/13/linux/linux_01/"/>
    <id>http://baofengketang.com/2018/04/13/linux/linux_01/</id>
    <published>2018-04-13T07:06:54.000Z</published>
    <updated>2018-04-16T12:05:00.000Z</updated>
    
    <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#linux-xi-tong-de-fa-zhan-shi">Linux系统的发展史</a><ul><li><a href="#unix-xi-tong">Unix系统</a></li><li><a href="#minix">Minix</a></li><li><a href="#liunx">Liunx</a></li><li><a href="#zong-jie">总结</a></li></ul></li></ul><!-- tocstop --></div><h1><span id="linux-xi-tong-de-fa-zhan-shi">Linux系统的发展史</span><a href="#linux-xi-tong-de-fa-zhan-shi" class="header-anchor">#</a></h1><h2><span id="unix-xi-tong">Unix系统</span><a href="#unix-xi-tong" class="header-anchor">#</a></h2><p>1965年之前的时候， 电脑并不像现在⼀样普遍， 它可不是⼀般⼈能碰的起的， 除⾮是军事或者学院的研究机构， ⽽且当时⼤型主机⾄多能提供30台终端（30个键盘、 显示器)， 连接⼀台电脑</p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1523518478.png?imageMogr2/thumbnail/!70p" alt=""></p><p>为了解决数量不够⽤的问题，1965年左后由⻉尔实验室、 麻省理⼯学院以及通⽤电⽓共同发起了<strong>Multics</strong>项⽬， 想让⼤型主机⽀持300台终端</p><p>1969年前后这个项⽬进度缓慢， 资⾦短缺， ⻉尔实验室退出了研究</p><p>1969年从这个项⽬中退出的Ken Thompson当时在实验室⽆聊时， 为了让⼀台空闲的电脑上能够运⾏“星际旅⾏”游⾏， 在8⽉份左右趁着其妻⼦探亲的时间， ⽤了1个⽉的时间编写出了Unix操作系统的原型</p><p>1970年， 美国⻉尔实验室的 <strong>Ken Thompson</strong>， 以 BCPL语⾔ 为基础， 设计出很简单且很接近硬件的 B语⾔（取BCPL的⾸字⺟） ， 并且他⽤B语⾔写了第⼀个UNIX操作系统。因为B语⾔的跨平台性较差， 为了能够在其他的电脑上也能够运⾏这个⾮常棒的Unix操作系统， Dennis Ritchie和Ken Thompson 从B语⾔的基础上准备研究⼀个更好的语言</p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1523518810.png?imageMogr2/thumbnail/!70p" alt=""></p><p>1972年， 美国⻉尔实验室的 Dennis Ritchie在B语⾔的基础上最终设计出了⼀种新的语⾔， 他取了BCPL的第⼆个字⺟作为这种语⾔的名字， 这就是C语⾔</p><p>1973年初， C语⾔的主体完成。 Thompson和Ritchie迫不及待地开始⽤它完全重写了现在⼤名鼎鼎的Unix操作系统</p><h2><span id="minix">Minix</span><a href="#minix" class="header-anchor">#</a></h2><p>因为AT&amp;T(通⽤电⽓)的政策改变， 在Version 7 Unix推出之后， 发布新的使⽤条款， 将UNIX源代码私有化， 在⼤学中不再能使⽤UNIX源代码。 Andrew S. Tanenbaum(塔能鲍姆)教授为了能在课堂上教授学⽣操作系统运作的实务细节， 决定在不使⽤任何AT&amp;T的源代码前提下， ⾃⾏开发与UNIX兼容的操作系统， 以避免版权上的争议。 他以⼩型UNIX（mini-UNIX） 之意， 将它称为MINIX(仅用于教学，不做商用)</p><h2><span id="liunx">Liunx</span><a href="#liunx" class="header-anchor">#</a></h2><p>因为Minix只是教学使⽤， 因此功能并不强， 因此Torvalds利⽤GNU的bash当做开发环境， gcc当做编译⼯具， 编写了Linux内核-v0.02， 但是⼀开始Linux并不能兼容Unix， 即Unix上跑的应⽤程序不能在Linux上跑， 即应⽤程序与内核之间的接⼝不⼀致， 因为Unix是遵循POSIX规范的， 因此Torvalds修改了Linux， 并遵循POSIX（Portable OperatingSystem Interface， 他规范了应⽤程序与内核的接⼝规范） ； ⼀开始Linux只适⽤于386，后来经过全世界的⽹友的帮助， 最终能够兼容多种硬件；</p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1523521142.png?imageMogr2/thumbnail/!70p" alt=""></p><h2><span id="zong-jie">总结</span><a href="#zong-jie" class="header-anchor">#</a></h2><p><strong>Minix没有⽕起来的原因</strong></p><blockquote><p>Minix的创始⼈说， MINIX 3没有统治世界是源于他在1992年犯下的⼀个错误， 当时他认为BSD必然会⼀统天下， 因为它是⼀个更稳定和更成熟的系统， 其它操作系统难以与之竞争。 因此他的MINIX的重⼼集中在教育上。 四名BSD开发者已经成⽴了⼀家公司销售BSD系统， 他们甚⾄还有⼀个有趣的电话号码1-800-ITS-UNIX。 然⽽他们正因为这个电话号码⽽惹⽕上身。 美国电话电报公司因电话号码⽽提起诉讼。官司打了三年才解决。 在此期间， BSD陷于停滞， ⽽Linux则借此⼀⻜冲天。 他的错误在于没有意识官司竟然持续了如此⻓的时间， 以及BSD会因此受到削弱。 如果美国电话电报公司没有起诉， Linux永远不会流⾏起来， BSD将统治世界。</p></blockquote><p><strong>Linux现在版本</strong></p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1523524203.png?imageMogr2/thumbnail/!70p" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;toc&quot;&gt;

&lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#linux-xi-tong-de-fa-zhan-shi&quot;&gt;Linux系统的发展史&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#unix-xi-tong&quot;&gt;Unix系统&lt;/a&gt;&lt;
      
    
    </summary>
    
      <category term="linux" scheme="http://baofengketang.com/categories/linux/"/>
    
    
      <category term="linux" scheme="http://baofengketang.com/tags/linux/"/>
    
      <category term="操作系统" scheme="http://baofengketang.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>Maven项目构建</title>
    <link href="http://baofengketang.com/2018/04/11/maven/maven_01/"/>
    <id>http://baofengketang.com/2018/04/11/maven/maven_01/</id>
    <published>2018-04-11T02:39:13.000Z</published>
    <updated>2018-04-16T12:05:29.000Z</updated>
    
    <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#maven-xiang-mu-gou-jian">Maven项目构建</a><ul><li><a href="#wei-shi-me-yao-shi-yong-maven">为什么要使用Maven</a><ul><li><a href="#fang-bian-wo-men-tian-jia-jar-bao">方便我们添加jar包</a></li><li><a href="#jar-bao-zhi-jian-de-yi-lai-wen-ti">jar包之间的依赖问题</a></li><li><a href="#geng-jia-fang-bian-de-huo-qu-di-san-fang-jar-bao">更加方便的获取第三方jar包</a></li><li><a href="#jiang-xiang-mu-chai-fen-wei-duo-ge-gong-cheng-mo-kuai">将项目拆分为多个工程模块</a></li></ul></li><li><a href="#shi-me-shi-maven">什么是Maven</a><ul><li><a href="#shi-me-shi-gou-jian">什么是构建</a></li><li><a href="#gou-jian-de-guo-cheng">构建的过程</a></li><li><a href="#zi-dong-hua-gou-jian">自动化构建</a></li></ul></li><li><a href="#maven-huan-jing-da-jian">Maven环境搭建</a><ul><li><a href="#xia-zai-he-xin-maven-cheng-xu">下载核心maven程序</a></li><li><a href="#jian-ce-java-huan-jing">检测Java环境</a></li><li><a href="#pei-zhi-maven-de-huan-jing-bian-liang">配置Maven的环境变量</a></li><li><a href="#yan-zheng-huan-jing-shi-fou-da-jian-cheng-gong">验证环境是否搭建成功</a></li></ul></li></ul></li></ul><!-- tocstop --><p></div></p><h1><span id="maven-xiang-mu-gou-jian">Maven项目构建</span><a href="#maven-xiang-mu-gou-jian" class="header-anchor">#</a></h1><p>Maven 是干什么用的？这是刚开始接触Maven 时最大的问题。之所以会提出这个问题，是因为即使不使用Maven，我们依然可以进行B/S 结构项目的开发。从表述层、业务逻辑层到持久化层再到数据库都有成熟的解决方案——不使用Maven我们一样可以开发项目</p><h2><span id="wei-shi-me-yao-shi-yong-maven">为什么要使用Maven</span><a href="#wei-shi-me-yao-shi-yong-maven" class="header-anchor">#</a></h2><h3><span id="fang-bian-wo-men-tian-jia-jar-bao">方便我们添加jar包</span><a href="#fang-bian-wo-men-tian-jia-jar-bao" class="header-anchor">#</a></h3><p>在今天JavaEE的开发领域，有大量的第三方框架和工具可以供我们使用，要使用这些jar包最简单的方法就是复制粘贴到WEB-INF/lib目录下，但是这会导致每次创建一个新的工程就需要将jar包重复复制lib目录下，从而造成工作区中存在大量重复的文件，让我们的工程显得很臃肿，而使用maven后每个jar包本身只在本地仓库保存一份，需要jar包的工程只需要以坐标的方式简单的引用一下就可以了，不仅极大的节约了存储空间，让项目更轻巧，更避免了重复文件太多而造成的混乱</p><h3><span id="jar-bao-zhi-jian-de-yi-lai-wen-ti">jar包之间的依赖问题</span><a href="#jar-bao-zhi-jian-de-yi-lai-wen-ti" class="header-anchor">#</a></h3><p>项目中jar包往往不是孤立存在的，很多jar包都需要在其他jar包的支持下才能够正常工作，我们称之为jar包之间的依赖关系，最典型的案例是：commons-fileupload-1.3.jar 依赖于commons-io-2.0.1.jar,如果没有io包，那么FileUpload包就不能够正常工作。</p><p>那么问题来了，你知道你所使用的jar包的依赖关系吗？当你拿到一个新的从未使用过的jar包，你如何知道它需要哪些jar包的支持呢?如果不了解这个情况，导入的jar包不够，那么现有的程序将不能正常工作，当你的项目中需要使用上百个jar包时，你还会认为的手工的逐一确认他们依赖的其他jar包吗？</p><p>这简直不敢想象,而引入maven后，maven就可以替我们自动的将当前jar包所依赖的其他所有的jar包全部导入进来，无需人工参与，节约了我们大量的时间和精力，用实际例子来说明就是：通过 Maven导入commons-fileupload-1.3.jar 后commons-io-2.0.1.jar会被自动导入，程序员不必了解这个依赖关系</p><h3><span id="geng-jia-fang-bian-de-huo-qu-di-san-fang-jar-bao">更加方便的获取第三方jar包</span><a href="#geng-jia-fang-bian-de-huo-qu-di-san-fang-jar-bao" class="header-anchor">#</a></h3><p>JavaEE开发中需要使用到的jar包种类繁多，几乎每个jar包在其本身的官网上的获取方式都不尽相同，为了查找一个jar包找遍整个互联网，身心俱惫，没有经历的人获取体会不到这种折磨，不仅如此费劲心血找的jar包里面有的时候并没有你需要的那个类，又或者有同名的类但是没没有你要的方法，以不规范的方式获得的jar包也是不规范的</p><p>使用maven我们可以享受到一个完全统一规范的jar包管理体系，你只需要在你的项目中以坐标的方式依赖一个jar包，maven就会自动从中央仓库进行下载，并同时下载这个jar包所依赖的其他jar包–&gt;规范、完整、准确！一次性解决所有问题</p><p>关于规范：统一的规范几乎可以说是程序员的最高信仰，如果没有规范，就意味着每个具体的技术都各自为政，需要以诸多不同的方式加入到项目中，好不容易加入进来后，可能还会与其他技术各个不入，最终受苦的是我们，而任何一个领域统一的规范可以极大的降低程序员的工作难度，减少工作量</p><p>在java中，我们一直提倡面向接口编程，而接口就是一种标准，一种规范。例如usb接口可以外接各种设备，如果每个设备都有自己独特的接口，那么不仅制造商需要维护各个接口的设计方案，使用者也需要详细了解每个设备</p><h3><span id="jiang-xiang-mu-chai-fen-wei-duo-ge-gong-cheng-mo-kuai">将项目拆分为多个工程模块</span><a href="#jiang-xiang-mu-chai-fen-wei-duo-ge-gong-cheng-mo-kuai" class="header-anchor">#</a></h3><p>随着J2EE的项目的规模越来越大，开发团队的规模也与日剧增，一个项目上千人的团队开发很多年对于J2EE项目来说在正常不过了，那么我们想象一下：几百上千的人开发的项目是统一个web工程，那么架构师、项目经理该如何划分项目的模块、如何分工呢？这么大的项目已经不可能通过package结构来划分模块了，必须将项目拆分为多个工程协同开发，多个模块工程中有的是java工程，有的是web工程，那么工程拆分为后如何进行互相调用和访问呢？这就需要使用maven的依赖管理机制</p><h2><span id="shi-me-shi-maven">什么是Maven</span><a href="#shi-me-shi-maven" class="header-anchor">#</a></h2><p>Maven是Apache软件基金会组织维护的一款自动化构建工具，专注服务于java平台的项目构建和依赖管理，maven这个单词的本意是：专家、内行。构建工具的历程：Ant-Maven(大部分项目中依然使用)-Gradle</p><h3><span id="shi-me-shi-gou-jian">什么是构建</span><a href="#shi-me-shi-gou-jian" class="header-anchor">#</a></h3><p>构建并不是创建，创建一个工程并不等同于构建一个项目，要了解构建的含义，我们从以下几个层面来阐述</p><h4><span id="java-gong-cheng">Java工程</span><a href="#java-gong-cheng" class="header-anchor">#</a></h4><p>大家都知道，java是一门编译型语言，.java的扩展名的源文件需要编译成.class扩展名的字节码文件才能够执行，所以编写任何java代码想要执行的话就必须经过编译得到对应的class文件</p><h4><span id="web-gong-cheng">web工程</span><a href="#web-gong-cheng" class="header-anchor">#</a></h4><p>当我们需要通过浏览器访问java程序时就必须将包含java程序的web工程编译的结果放到服务器上的指定目录下，并启动服务器才行，这个过程我们称之为”部署”</p><h4><span id="zong-jie">总结</span><a href="#zong-jie" class="header-anchor">#</a></h4><p>在实际项目中整合第三方框架，web工程中除了java程序和jsp页面、图片等静态资源外，还包括第三方框架的jar包以及各种各样的配置文件，所有这些资源都必须按照正确的目录部署到服务器上才能够运行。所以综上所述：构建就是以我们编写的java的代码、框架配置文件、国家化等其他资源文件、jsp页面和图片静态资源作为原材料，去生产出一个可以运行的的项目过程。</p><h3><span id="gou-jian-de-guo-cheng">构建的过程</span><a href="#gou-jian-de-guo-cheng" class="header-anchor">#</a></h3><p>①清理：删除以前的编译结果，为重新编译做好准备</p><p>②编译：将java源程序编译为字节码文件</p><p>③测试：针对项目中的关键点进行测试，确保项目在迭代开发过程中关键点的正确性</p><p>④报告：在每次测试后以标准的格式记录和展示测试结果</p><p>⑤打包：在一个包含诸多文件的工程封装为一个压缩文件用于安装或部署，java工程对应jar包，web工程对应war包</p><p>⑥安装：在maven环境下特指将打包的结果–jar包或者war包安装到本地仓库中</p><p>⑦部署：将打包的结果部署到远程仓库或者war包部署到服务器上运行</p><h3><span id="zi-dong-hua-gou-jian">自动化构建</span><a href="#zi-dong-hua-gou-jian" class="header-anchor">#</a></h3><p>综上所述，我们在eclipse中都可以找到对应的操作，只是不太标准，那么既然IDE已经可以进行构建了，我们为什么还要使用maven这样的构建工具呢？，下面我们来看一个小故事：张三在工作中，某天，测试项目中跟他说系统中有一个bug，这个时候，张三需要进入IDE,运行自己的程序、编译、打包、部署到服务器、在进行测试–&gt;确立问题，接下来开始修复bug，修复完毕后，他又要重新开始编译、打包、部署、测试，确认没有问题了，在通知项目组进行测试</p><p>在这个过程中，我们发现了张三的工作大部分花在了“编译、打包、部署、测试”这些固定化的工作上面，而真正需要由“人”的智慧实现的分析问题和编码却只占了很少一部分，我们能否将这些固定的工作交给机器自动完成–&gt;当然可以，这就是自动化构建，此时maven的意义就体现出来了，它可以自动的从构建过的程序起点一直执行到终点。</p><h2><span id="maven-huan-jing-da-jian">Maven环境搭建</span><a href="#maven-huan-jing-da-jian" class="header-anchor">#</a></h2><h3><span id="xia-zai-he-xin-maven-cheng-xu">下载核心maven程序</span><a href="#xia-zai-he-xin-maven-cheng-xu" class="header-anchor">#</a></h3><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1523413494.png?imageMogr2/thumbnail/!70p" alt=""></p><h3><span id="jian-ce-java-huan-jing">检测Java环境</span><a href="#jian-ce-java-huan-jing" class="header-anchor">#</a></h3><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1523413929.png?imageMogr2/thumbnail/!70p" alt=""></p><h3><span id="pei-zhi-maven-de-huan-jing-bian-liang">配置Maven的环境变量</span><a href="#pei-zhi-maven-de-huan-jing-bian-liang" class="header-anchor">#</a></h3><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1523414063.png?imageMogr2/thumbnail/!70p" alt=""></p><h3><span id="yan-zheng-huan-jing-shi-fou-da-jian-cheng-gong">验证环境是否搭建成功</span><a href="#yan-zheng-huan-jing-shi-fou-da-jian-cheng-gong" class="header-anchor">#</a></h3><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1523414230.png?imageMogr2/thumbnail/!70p" alt=""><br>好了，如果看到上图就表示，我们就可以使用maven来构建项目了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;toc&quot;&gt;

&lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#maven-xiang-mu-gou-jian&quot;&gt;Maven项目构建&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#wei-shi-me-yao-shi-yong-maven&quot;&gt;为
      
    
    </summary>
    
      <category term="项目构建" scheme="http://baofengketang.com/categories/%E9%A1%B9%E7%9B%AE%E6%9E%84%E5%BB%BA/"/>
    
    
      <category term="maven" scheme="http://baofengketang.com/tags/maven/"/>
    
      <category term="项目构建" scheme="http://baofengketang.com/tags/%E9%A1%B9%E7%9B%AE%E6%9E%84%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>Java入门第一讲</title>
    <link href="http://baofengketang.com/2018/04/10/java/java01/"/>
    <id>http://baofengketang.com/2018/04/10/java/java01/</id>
    <published>2018-04-10T05:11:58.000Z</published>
    <updated>2018-04-16T12:05:52.000Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="java-ke-cheng-da-gang">Java课程大纲</span><a href="#java-ke-cheng-da-gang" class="header-anchor">#</a></h1><h2><span id="java-ru-men-zhi-shi">java入门知识</span><a href="#java-ru-men-zhi-shi" class="header-anchor">#</a></h2><ul><li>进制之间的转换</li><li>Java 基本数据类型</li><li>理解面向对象程序设计的概念</li><li>理解面向对象的三大基本特征:继承、封装与多态</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;&lt;span id=&quot;java-ke-cheng-da-gang&quot;&gt;Java课程大纲&lt;/span&gt;&lt;a href=&quot;#java-ke-cheng-da-gang&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;&lt;h2&gt;&lt;span id=&quot;java-ru-m
      
    
    </summary>
    
      <category term="java" scheme="http://baofengketang.com/categories/java/"/>
    
    
      <category term="java" scheme="http://baofengketang.com/tags/java/"/>
    
      <category term="web" scheme="http://baofengketang.com/tags/web/"/>
    
  </entry>
  
</feed>
