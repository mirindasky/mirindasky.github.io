<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>KingDom</title>
  
  <subtitle>KingDom&#39;s Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://baofengketang.com/"/>
  <updated>2018-04-11T02:51:04.000Z</updated>
  <id>http://baofengketang.com/</id>
  
  <author>
    <name>[object Object]</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Maven项目构建</title>
    <link href="http://baofengketang.com/2018/04/11/maven/maven_01/"/>
    <id>http://baofengketang.com/2018/04/11/maven/maven_01/</id>
    <published>2018-04-11T02:39:13.000Z</published>
    <updated>2018-04-11T02:51:04.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Maven项目构建"><a href="#Maven项目构建" class="headerlink" title="Maven项目构建"></a>Maven项目构建</h1><p>Maven 是干什么用的？这是刚开始接触Maven 时最大的问题。之所以会提出这个问题，是因为即使不使用Maven，我们依然可以进行B/S 结构项目的开发。从表述层、业务逻辑层到持久化层再到数据库都有成熟的解决方案——不使用Maven我们一样可以开发项目</p><h2 id="1、为什么要使用Maven"><a href="#1、为什么要使用Maven" class="headerlink" title="1、为什么要使用Maven"></a>1、为什么要使用Maven</h2><h3 id="1-1、方便我们添加jar包"><a href="#1-1、方便我们添加jar包" class="headerlink" title="1.1、方便我们添加jar包"></a>1.1、方便我们添加jar包</h3><p>在今天JavaEE的开发领域，有大量的第三方框架和工具可以供我们使用，要使用这些jar包最简单的方法就是复制粘贴到WEB-INF/lib目录下，但是这会导致每次创建一个新的工程就需要将jar包重复复制lib目录下，从而造成工作区中存在大量重复的文件，让我们的工程显得很臃肿，而使用maven后每个jar包本身只在本地仓库保存一份，需要jar包的工程只需要以坐标的方式简单的引用一下就可以了，不仅极大的节约了存储空间，让项目更轻巧，更避免了重复文件太多而造成的混乱</p><h3 id="1-2、jar包之间的依赖问题"><a href="#1-2、jar包之间的依赖问题" class="headerlink" title="1.2、jar包之间的依赖问题"></a>1.2、jar包之间的依赖问题</h3><p>项目中jar包往往不是孤立存在的，很多jar包都需要在其他jar包的支持下才能够正常工作，我们称之为jar包之间的依赖关系，最典型的案例是：commons-fileupload-1.3.jar 依赖于commons-io-2.0.1.jar,如果没有io包，那么FileUpload包就不能够正常工作。</p><p>那么问题来了，你知道你所使用的jar包的依赖关系吗？当你拿到一个新的从未使用过的jar包，你如何知道它需要哪些jar包的支持呢?如果不了解这个情况，导入的jar包不够，那么现有的程序将不能正常工作，当你的项目中需要使用上百个jar包时，你还会认为的手工的逐一确认他们依赖的其他jar包吗？</p><p>这简直不敢想象,而引入maven后，maven就可以替我们自动的将当前jar包所依赖的其他所有的jar包全部导入进来，无需人工参与，节约了我们大量的时间和精力，用实际例子来说明就是：通过 Maven导入commons-fileupload-1.3.jar 后commons-io-2.0.1.jar会被自动导入，程序员不必了解这个依赖关系</p><h3 id="1-3、更加方便的获取第三方jar包"><a href="#1-3、更加方便的获取第三方jar包" class="headerlink" title="1.3、更加方便的获取第三方jar包"></a>1.3、更加方便的获取第三方jar包</h3><p>JavaEE开发中需要使用到的jar包种类繁多，几乎每个jar包在其本身的官网上的获取方式都不尽相同，为了查找一个jar包找遍整个互联网，身心俱惫，没有经历的人获取体会不到这种折磨，不仅如此费劲心血找的jar包里面有的时候并没有你需要的那个类，又或者有同名的类但是没没有你要的方法，以不规范的方式获得的jar包也是不规范的</p><p>使用maven我们可以享受到一个完全统一规范的jar包管理体系，你只需要在你的项目中以坐标的方式依赖一个jar包，maven就会自动从中央仓库进行下载，并同时下载这个jar包所依赖的其他jar包–&gt;规范、完整、准确！一次性解决所有问题</p><p>关于规范：统一的规范几乎可以说是程序员的最高信仰，如果没有规范，就意味着每个具体的技术都各自为政，需要以诸多不同的方式加入到项目中，好不容易加入进来后，可能还会与其他技术各个不入，最终受苦的是我们，而任何一个领域统一的规范可以极大的降低程序员的工作难度，减少工作量</p><p>在java中，我们一直提倡面向接口编程，而接口就是一种标准，一种规范。例如usb接口可以外接各种设备，如果每个设备都有自己独特的接口，那么不仅制造商需要维护各个接口的设计方案，使用者也需要详细了解每个设备</p><h3 id="1-4、将项目拆分为多个工程模块"><a href="#1-4、将项目拆分为多个工程模块" class="headerlink" title="1.4、将项目拆分为多个工程模块"></a>1.4、将项目拆分为多个工程模块</h3><p>随着J2EE的项目的规模越来越大，开发团队的规模也与日剧增，一个项目上千人的团队开发很多年对于J2EE项目来说在正常不过了，那么我们想象一下：几百上千的人开发的项目是统一个web工程，那么架构师、项目经理该如何划分项目的模块、如何分工呢？这么大的项目已经不可能通过package结构来划分模块了，必须将项目拆分为多个工程协同开发，多个模块工程中有的是java工程，有的是web工程，那么工程拆分为后如何进行互相调用和访问呢？这就需要使用maven的依赖管理机制</p><h2 id="2、什么是Maven"><a href="#2、什么是Maven" class="headerlink" title="2、什么是Maven"></a>2、什么是Maven</h2><p>Maven是Apache软件基金会组织维护的一款自动化构建工具，专注服务于java平台的项目构建和依赖管理，maven这个单词的本意是：专家、内行。构建工具的历程：Ant-Maven(大部分项目中依然使用)-Gradle</p><h3 id="2-1、什么是构建"><a href="#2-1、什么是构建" class="headerlink" title="2.1、什么是构建"></a>2.1、什么是构建</h3><p>构建并不是创建，创建一个工程并不等同于构建一个项目，要了解构建的含义，我们从以下几个层面来阐述</p><h4 id="2-1-1、Java工程"><a href="#2-1-1、Java工程" class="headerlink" title="2.1.1、Java工程"></a>2.1.1、Java工程</h4><p>大家都知道，java是一门编译型语言，.java的扩展名的源文件需要编译成.class扩展名的字节码文件才能够执行，所以编写任何java代码想要执行的话就必须经过编译得到对应的class文件</p><h4 id="2-1-2、web工程"><a href="#2-1-2、web工程" class="headerlink" title="2.1.2、web工程"></a>2.1.2、web工程</h4><p>当我们需要通过浏览器访问java程序时就必须将包含java程序的web工程编译的结果放到服务器上的指定目录下，并启动服务器才行，这个过程我们称之为”部署”</p><h4 id="2-1-3、总结"><a href="#2-1-3、总结" class="headerlink" title="2.1.3、总结"></a>2.1.3、总结</h4><p>在实际项目中整合第三方框架，web工程中除了java程序和jsp页面、图片等静态资源外，还包括第三方框架的jar包以及各种各样的配置文件，所有这些资源都必须按照正确的目录部署到服务器上才能够运行。所以综上所述：构建就是以我们编写的java的代码、框架配置文件、国家化等其他资源文件、jsp页面和图片静态资源作为原材料，去生产出一个可以运行的的项目过程。</p><h3 id="2-2、构建的过程"><a href="#2-2、构建的过程" class="headerlink" title="2.2、构建的过程"></a>2.2、构建的过程</h3><p>①清理：删除以前的编译结果，为重新编译做好准备</p><p>②编译：将java源程序编译为字节码文件</p><p>③测试：针对项目中的关键点进行测试，确保项目在迭代开发过程中关键点的正确性</p><p>④报告：在每次测试后以标准的格式记录和展示测试结果</p><p>⑤打包：在一个包含诸多文件的工程封装为一个压缩文件用于安装或部署，java工程对应jar包，web工程对应war包</p><p>⑥安装：在maven环境下特指将打包的结果–jar包或者war包安装到本地仓库中</p><p>⑦部署：将打包的结果部署到远程仓库或者war包部署到服务器上运行</p><h3 id="2-3、自动化构建"><a href="#2-3、自动化构建" class="headerlink" title="2.3、自动化构建"></a>2.3、自动化构建</h3><p>综上所述，我们在eclipse中都可以找到对应的操作，只是不太标准，那么既然IDE已经可以进行构建了，我们为什么还要使用maven这样的构建工具呢？，下面我们来看一个小故事：张三在工作中，某天，测试项目中跟他说系统中有一个bug，这个时候，张三需要进入IDE,运行自己的程序、编译、打包、部署到服务器、在进行测试–&gt;确立问题，接下来开始修复bug，修复完毕后，他又要重新开始编译、打包、部署、测试，确认没有问题了，在通知项目组进行测试</p><p>在这个过程中，我们发现了张三的工作大部分花在了“编译、打包、部署、测试”这些固定化的工作上面，而真正需要由“人”的智慧实现的分析问题和编码却只占了很少一部分，我们能否将这些固定的工作交给机器自动完成–&gt;当然可以，这就是自动化构建，此时maven的意义就体现出来了，它可以自动的从构建过的程序起点一直执行到终点。</p><h2 id="3、Maven环境搭建"><a href="#3、Maven环境搭建" class="headerlink" title="3、Maven环境搭建"></a>3、Maven环境搭建</h2><h3 id="3-1、下载核心maven程序"><a href="#3-1、下载核心maven程序" class="headerlink" title="3.1、下载核心maven程序"></a>3.1、下载核心maven程序</h3><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1523413494.png?imageMogr2/thumbnail/!70p" alt=""></p><h3 id="3-2、检测Java环境"><a href="#3-2、检测Java环境" class="headerlink" title="3.2、检测Java环境"></a>3.2、检测Java环境</h3><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1523413929.png?imageMogr2/thumbnail/!70p" alt=""></p><h3 id="3-3、配置Maven的环境变量"><a href="#3-3、配置Maven的环境变量" class="headerlink" title="3.3、配置Maven的环境变量"></a>3.3、配置Maven的环境变量</h3><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1523414063.png?imageMogr2/thumbnail/!70p" alt=""></p><h3 id="3-4、验证环境是否搭建成功"><a href="#3-4、验证环境是否搭建成功" class="headerlink" title="3.4、验证环境是否搭建成功"></a>3.4、验证环境是否搭建成功</h3><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1523414230.png?imageMogr2/thumbnail/!70p" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Maven项目构建&quot;&gt;&lt;a href=&quot;#Maven项目构建&quot; class=&quot;headerlink&quot; title=&quot;Maven项目构建&quot;&gt;&lt;/a&gt;Maven项目构建&lt;/h1&gt;&lt;p&gt;Maven 是干什么用的？这是刚开始接触Maven 时最大的问题。之所以会提出这个问
      
    
    </summary>
    
      <category term="java" scheme="http://baofengketang.com/categories/java/"/>
    
    
      <category term="maven" scheme="http://baofengketang.com/tags/maven/"/>
    
      <category term="项目构建" scheme="http://baofengketang.com/tags/%E9%A1%B9%E7%9B%AE%E6%9E%84%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>Java入门第一讲</title>
    <link href="http://baofengketang.com/2018/04/10/java/java01/"/>
    <id>http://baofengketang.com/2018/04/10/java/java01/</id>
    <published>2018-04-10T05:11:58.000Z</published>
    <updated>2018-04-10T06:13:10.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#
      
    
    </summary>
    
      <category term="java" scheme="http://baofengketang.com/categories/java/"/>
    
    
      <category term="java" scheme="http://baofengketang.com/tags/java/"/>
    
      <category term="web" scheme="http://baofengketang.com/tags/web/"/>
    
  </entry>
  
</feed>
