<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>KingDom</title>
  
  <subtitle>KingDom&#39;s Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://baofengketang.com/"/>
  <updated>2018-05-13T15:19:19.000Z</updated>
  <id>http://baofengketang.com/</id>
  
  <author>
    <name>[object Object]</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用hexo搭建个人博客</title>
    <link href="http://baofengketang.com/2018/05/13/hexo/hexo_01/"/>
    <id>http://baofengketang.com/2018/05/13/hexo/hexo_01/</id>
    <published>2018-05-13T08:19:23.000Z</published>
    <updated>2018-05-13T15:19:19.000Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="shi-yong-hexo-da-jian-shu-yu-zi-ji-de-bo-ke">使用Hexo搭建属于自己的博客</span><a href="#shi-yong-hexo-da-jian-shu-yu-zi-ji-de-bo-ke" class="header-anchor">#</a></h1><p>因最近有很多小伙伴咨询我如何写一个自己的博客，因为我的博客是采用mac系统搭建的，大部分小伙伴用的是window，因此本套教程我使用虚拟机上模拟window的环境搭建而成</p><h2><span id="1-an-zhuang-nodejs-huan-jing">1.安装nodejs环境</span><a href="#1-an-zhuang-nodejs-huan-jing" class="header-anchor">#</a></h2><p>首先安装nodejs，我下载的版本是node-v8.11.1-x64，这个步骤就直接next就可以</p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1526200039.png?imageMogr2/thumbnail/!70p" alt=""></p><p><strong>检测环境是否安装成功</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\jinzhong&gt;node -v</span><br><span class="line">v8.11.1</span><br><span class="line">C:\Users\jinzhong&gt;npm -v</span><br><span class="line">5.6.0</span><br></pre></td></tr></table></figure><p>如果出现以上提示就表示环境搭建完毕</p><h2><span id="2-an-zhuang-git-huan-jing">2.安装git环境</span><a href="#2-an-zhuang-git-huan-jing" class="header-anchor">#</a></h2><p>git版本：Git-2.17.0-64-bit</p><p>接下来开始安装.基本上一路next即可</p><p><strong>检测环境</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git --version</span><br><span class="line">git version 2.17.0.windows.1</span><br></pre></td></tr></table></figure><h2><span id="3-github-she-zhi">3.github设置</span><a href="#3-github-she-zhi" class="header-anchor">#</a></h2><p><strong>1.注册好了github后，进入github官网</strong></p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1526201382.png?imageMogr2/thumbnail/!70p" alt=""></p><hr><p><strong>2.新建仓库</strong></p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1526201701.png?imageMogr2/thumbnail/!70p" alt=""></p><p><strong>3.设置仓库</strong></p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1526201588.png?imageMogr2/thumbnail/!70p" alt=""></p><p>发现页面已经部署到服务器了，我们可以直接访问<a href="http://njwangbohz.github.io" target="_blank" rel="noopener">http://njwangbohz.github.io</a></p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1526201766.png?imageMogr2/thumbnail/!70p" alt=""></p><p>我们也可以选择一个主题，然后从新浏览</p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1526202110.png?imageMogr2/thumbnail/!70p" alt=""></p><p>至此git目前就搭建完毕了～，后期我们可以继续加一些其它设置</p><h2><span id="4-an-zhuang-hexo">4.安装hexo</span><a href="#4-an-zhuang-hexo" class="header-anchor">#</a></h2><p><strong>安装Hexo，随便在某个目录创建一个文件夹</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">C:\&gt;mkdir blog</span><br><span class="line">C:\&gt;cd blog</span><br><span class="line">C:\blog&gt;npm install hexo -g</span><br><span class="line">npm WARN deprecated titlecase@1.1.2: no longer maintained</span><br><span class="line">C:\Users\jinzhong\AppData\Roaming\npm\hexo -&gt; C:\Users\jinzhong\AppData\Roaming\</span><br><span class="line">npm\node_modules\hexo\bin\hexo</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span> nunjucks@3.1.2 postinstall C:\Users\jinzhong\AppData\Roaming\npm\node_modules\</span><br><span class="line">hexo\node_modules\nunjucks</span><br><span class="line"><span class="meta">&gt;</span> node postinstall-build.js src</span><br><span class="line"></span><br><span class="line">npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.3 (node_modules\hex</span><br><span class="line">o\node_modules\fsevents):</span><br><span class="line">npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@</span><br><span class="line">1.2.3: wanted &#123;"os":"darwin","arch":"any"&#125; (current: &#123;"os":"win32","arch":"x64"&#125;</span><br><span class="line">)</span><br><span class="line">+ hexo@3.7.1</span><br><span class="line">added 205 packages in 1230.836s</span><br></pre></td></tr></table></figure><p><strong>输入hexo －v检查hexo是否安装成功</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">C:\blog&gt;hexo -v</span><br><span class="line">hexo-cli: 1.1.0</span><br><span class="line">os: Windows_NT 6.1.7601 win32 x64</span><br><span class="line">http_parser: 2.8.0</span><br><span class="line">node: 8.11.1</span><br><span class="line">v8: 6.2.414.50</span><br><span class="line">uv: 1.19.1</span><br><span class="line">zlib: 1.2.11</span><br><span class="line">ares: 1.10.1-DEV</span><br><span class="line">modules: 57</span><br><span class="line">nghttp2: 1.25.0</span><br><span class="line">openssl: 1.0.2o</span><br><span class="line">icu: 60.1</span><br><span class="line">unicode: 10.0</span><br><span class="line">cldr: 32.0</span><br><span class="line">tz: 2017c</span><br></pre></td></tr></table></figure><p><strong>输入hexo init进行初始化</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">C:\blog&gt;hexo init</span><br><span class="line">INFO  Cloning hexo-starter to C:\blog</span><br><span class="line">Cloning into 'C:\blog'...</span><br><span class="line">remote: Counting objects: 65, done.</span><br><span class="line">remote: Compressing objects: 100% (3/3), done.</span><br><span class="line">remote: Total 65 (delta 0), reused 0 (delta 0), pack-reused 62</span><br><span class="line">Unpacking objects: 100% (65/65), done.</span><br><span class="line">Submodule 'themes/landscape' (https://github.com/hexojs/hexo-theme-landscape.git</span><br><span class="line">) registered for path 'themes/landscape'</span><br><span class="line">Cloning into 'C:/blog/themes/landscape'...</span><br><span class="line">remote: Counting objects: 819, done.</span><br><span class="line">remote: Total 819 (delta 0), reused 0 (delta 0), pack-reused 819</span><br><span class="line">Receiving objects: 100% (819/819), 2.54 MiB | 819.00 KiB/s, done.</span><br><span class="line">Resolving deltas: 100% (432/432), done.</span><br><span class="line">Submodule path 'themes/landscape': checked out '73a23c51f8487cfcd7c6deec96ccc754</span><br><span class="line">3960d350'</span><br><span class="line">INFO  Install dependencies</span><br><span class="line">��Ϣ: ���ṩ��ģʽ�޷��ҵ��ļ�</span><br><span class="line">npm WARN deprecated titlecase@1.1.2: no longer maintained</span><br><span class="line"><span class="meta">&gt;</span> nunjucks@3.1.2 postinstall C:\blog\node_modules\nunjucks</span><br><span class="line"><span class="meta">&gt;</span> node postinstall-build.js src</span><br><span class="line">npm notice created a lockfile as package-lock.json. You should commit this file.</span><br><span class="line">npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.3 (node_modules\fse</span><br><span class="line">vents):</span><br><span class="line">npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@</span><br><span class="line">1.2.3: wanted &#123;"os":"darwin","arch":"any"&#125; (current: &#123;"os":"win32","arch":"x64"&#125;</span><br><span class="line">)</span><br><span class="line">added 276 packages in 206.107s</span><br><span class="line">INFO  Start blogging with Hexo!</span><br></pre></td></tr></table></figure><p>输入npm install 安装所需要的组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">C:\blog&gt;npm install</span><br><span class="line">npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.3 (node_modules\fsevents):</span><br><span class="line">npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.3: wanted &#123;&quot;os&quot;:&quot;darwin&quot;,&quot;arch&quot;:&quot;any</span><br><span class="line">&quot;&#125; (current: &#123;&quot;os&quot;:&quot;win32&quot;,&quot;arch&quot;:&quot;x64&quot;&#125;)</span><br></pre></td></tr></table></figure><p><strong>接下来就可以体验一下hexo,启动服务</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">C:\blog&gt;hexo s</span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure><p>使用浏览器访问</p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1526204555.png?imageMogr2/thumbnail/!70p" alt=""></p><p><strong>5.hexo与github联系起来</strong></p><p>配置git的用户名和密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jinzhong@WIN-Q673GTLFDM6 MINGW64 /c/blog</span><br><span class="line"><span class="meta">$</span> git config --global user.name e "njwangbohz"</span><br><span class="line">jinzhong@WIN-Q673GTLFDM6 MINGW64 /c/blog</span><br><span class="line"><span class="meta">$</span> git config --global user.email "15189838151@163.com"</span><br></pre></td></tr></table></figure><p>生成..ssh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"> ssh-keygen -t rsa -C "15189838151@163.COM"</span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/c/Users/jinzhong/.ssh/id_rsa):</span><br><span class="line">Created directory '/c/Users/jinzhong/.ssh'.</span><br><span class="line">Enter passphrase (empty for no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br><span class="line">Your identification has been saved in /c/Users/jinzhong/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved in /c/Users/jinzhong/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:gkcWg2JUUOvQqfIIUqX60WZxBzjK51uxDrIpQwINNbE 15189838151@163.COM</span><br><span class="line">The key's randomart image is:</span><br><span class="line">+---[RSA 2048]----+</span><br><span class="line">| o*=+o+          |</span><br><span class="line">|. o*+o +         |</span><br><span class="line">| =Eo=.+ .        |</span><br><span class="line">|.o+=.*..         |</span><br><span class="line">|* oo* ooS        |</span><br><span class="line">|+*.+o.o.         |</span><br><span class="line">|+ o+ =           |</span><br><span class="line">|o o . .          |</span><br><span class="line">| o               |</span><br><span class="line">+----[SHA256]-----+</span><br></pre></td></tr></table></figure><p>进入.ssh目录,查看key文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jinzhong@WIN-Q673GTLFDM6 MINGW64 ~/.ssh</span><br><span class="line">$ cat id_rsa.pub</span><br><span class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCspC2HQMc7wTlzeCib7m0rzAuihSjDozR6sL0B4H7APyWTTQ3HWgUO7zRNCMFmLA5QYBzzsr4EBaGskMQa8Olktcj2iG62QQ06wzdYiFBVzOCDsbPaHwIL52O9+BiMzjC5VTfD18acASJh/qXBgkEjA1YJ9pnhk0hMHf5N/j4CoiB4guhTMyezRh5lMpfhBE9uq0UFVXGdBjmu0l/gj/UVCeWP/CFSfYo070ii50k6IMn+pE3OkQYB/36yEycu4vQp0HTfgPAD6qp2s3QRfwuS/jzSrbyhWbBs7YuTyVREdCVKUxhqcm+/+AceV520cCpftz1yHe2dm/JpJ4AjydlL 15189838151@163.COM</span><br></pre></td></tr></table></figure><p>将这个key添加到git中</p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1526220571.png?imageMogr2/thumbnail/!70p" alt=""></p><p>测试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> ssh -T git@github.com</span><br><span class="line">The authenticity of host 'github.com (52.74.223.119)' can't be established.</span><br><span class="line">RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.</span><br><span class="line">Are you sure you want to continue connecting (yes/no)? yes</span><br><span class="line">Warning: Permanently added 'github.com,52.74.223.119' (RSA) to the list of known hosts.</span><br><span class="line">Hi njwangbohz! You've successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure><p>配置blog目录下的_config.xml文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span><span class="attr">https://github.com/njwangbohz/njwangbohz.github.io.git</span></span><br><span class="line"><span class="attr">  type:</span><span class="string">git</span></span><br><span class="line"><span class="attr">  branch:</span><span class="string">master</span></span><br></pre></td></tr></table></figure><p>安装插件并发布到git</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">C:\blog&gt;npm install --save hexo-deployer-git</span><br><span class="line">npm WARN deprecated swig@1.4.2: This package is no longer maintained</span><br><span class="line">npm WARN notice [SECURITY] uglify-js has 1 low vulnerability. Go here for more details: https://nodesecurity.io/advisori</span><br><span class="line">es?search=uglify-js&amp;version=2.4.24 - Run `npm i npm@latest -g` to upgrade your npm version, and then `npm audit` to get</span><br><span class="line">more info.</span><br><span class="line">npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.3 (node_modules\fsevents):</span><br><span class="line">npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.3: wanted &#123;"os":"darwin","arch":"any</span><br><span class="line">"&#125; (current: &#123;"os":"win32","arch":"x64"&#125;)</span><br><span class="line"></span><br><span class="line">+ hexo-deployer-git@0.3.1</span><br><span class="line">added 32 packages in 171.121s</span><br><span class="line"></span><br><span class="line">C:\blog&gt;hexo d</span><br><span class="line">INFO  Deploying: git</span><br><span class="line">INFO  Setting up Git deployment...</span><br><span class="line">Initialized empty Git repository in C:/blog/.deploy_git/.git/</span><br><span class="line">[master (root-commit) 86378a6] First commit</span><br><span class="line"> 1 file changed, 0 insertions(+), 0 deletions(-)</span><br><span class="line"> create mode 100644 placeholder</span><br><span class="line">INFO  Clearing .deploy_git folder...</span><br><span class="line">INFO  Copying files from public folder...</span><br><span class="line">INFO  Copying files from extend dirs...</span><br><span class="line">warning: LF will be replaced by CRLF in 2018/05/13/hello-world/index.html.</span><br><span class="line">The file will have its original line endings in your working directory.</span><br><span class="line">warning: LF will be replaced by CRLF in archives/2018/05/index.html.</span><br><span class="line">The file will have its original line endings in your working directory.</span><br><span class="line">warning: LF will be replaced by CRLF in archives/2018/index.html.</span><br><span class="line">The file will have its original line endings in your working directory.</span><br><span class="line">warning: LF will be replaced by CRLF in archives/index.html.</span><br><span class="line">The file will have its original line endings in your working directory.</span><br><span class="line">warning: LF will be replaced by CRLF in css/style.css.</span><br><span class="line">The file will have its original line endings in your working directory.</span><br><span class="line">warning: LF will be replaced by CRLF in fancybox/helpers/jquery.fancybox-buttons.css.</span><br><span class="line">The file will have its original line endings in your working directory.</span><br><span class="line">warning: LF will be replaced by CRLF in fancybox/helpers/jquery.fancybox-buttons.js.</span><br><span class="line">The file will have its original line endings in your working directory.</span><br><span class="line">warning: LF will be replaced by CRLF in fancybox/helpers/jquery.fancybox-media.js.</span><br><span class="line">The file will have its original line endings in your working directory.</span><br><span class="line">warning: LF will be replaced by CRLF in fancybox/helpers/jquery.fancybox-thumbs.css.</span><br><span class="line">The file will have its original line endings in your working directory.</span><br><span class="line">warning: LF will be replaced by CRLF in fancybox/helpers/jquery.fancybox-thumbs.js.</span><br><span class="line">The file will have its original line endings in your working directory.</span><br><span class="line">warning: LF will be replaced by CRLF in fancybox/jquery.fancybox.css.</span><br><span class="line">The file will have its original line endings in your working directory.</span><br><span class="line">warning: LF will be replaced by CRLF in fancybox/jquery.fancybox.js.</span><br><span class="line">The file will have its original line endings in your working directory.</span><br><span class="line">warning: LF will be replaced by CRLF in fancybox/jquery.fancybox.pack.js.</span><br><span class="line">The file will have its original line endings in your working directory.</span><br><span class="line">warning: LF will be replaced by CRLF in index.html.</span><br><span class="line">The file will have its original line endings in your working directory.</span><br><span class="line">warning: LF will be replaced by CRLF in js/script.js.</span><br><span class="line">The file will have its original line endings in your working directory.</span><br><span class="line">[master e16eabb] Site updated: 2018-05-13 23:14:34</span><br><span class="line"> 29 files changed, 5777 insertions(+)</span><br><span class="line"> create mode 100644 2018/05/13/hello-world/index.html</span><br><span class="line"> create mode 100644 archives/2018/05/index.html</span><br><span class="line"> create mode 100644 archives/2018/index.html</span><br><span class="line"> create mode 100644 archives/index.html</span><br><span class="line"> create mode 100644 css/fonts/FontAwesome.otf</span><br><span class="line"> create mode 100644 css/fonts/fontawesome-webfont.eot</span><br><span class="line"> create mode 100644 css/fonts/fontawesome-webfont.svg</span><br><span class="line"> create mode 100644 css/fonts/fontawesome-webfont.ttf</span><br><span class="line"> create mode 100644 css/fonts/fontawesome-webfont.woff</span><br><span class="line"> create mode 100644 css/images/banner.jpg</span><br><span class="line"> create mode 100644 css/style.css</span><br><span class="line"> create mode 100644 fancybox/blank.gif</span><br><span class="line"> create mode 100644 fancybox/fancybox_loading.gif</span><br><span class="line"> create mode 100644 fancybox/fancybox_loading@2x.gif</span><br><span class="line"> create mode 100644 fancybox/fancybox_overlay.png</span><br><span class="line"> create mode 100644 fancybox/fancybox_sprite.png</span><br><span class="line"> create mode 100644 fancybox/fancybox_sprite@2x.png</span><br><span class="line"> create mode 100644 fancybox/helpers/fancybox_buttons.png</span><br><span class="line"> create mode 100644 fancybox/helpers/jquery.fancybox-buttons.css</span><br><span class="line"> create mode 100644 fancybox/helpers/jquery.fancybox-buttons.js</span><br><span class="line"> create mode 100644 fancybox/helpers/jquery.fancybox-media.js</span><br><span class="line"> create mode 100644 fancybox/helpers/jquery.fancybox-thumbs.css</span><br><span class="line"> create mode 100644 fancybox/helpers/jquery.fancybox-thumbs.js</span><br><span class="line"> create mode 100644 fancybox/jquery.fancybox.css</span><br><span class="line"> create mode 100644 fancybox/jquery.fancybox.js</span><br><span class="line"> create mode 100644 fancybox/jquery.fancybox.pack.js</span><br><span class="line"> create mode 100644 index.html</span><br><span class="line"> create mode 100644 js/script.js</span><br><span class="line"> delete mode 100644 placeholder</span><br><span class="line">Username for 'https://github.com': 15189838151@163.com</span><br><span class="line">Password for 'https://15189838151@163.com@github.com':</span><br><span class="line">Branch 'master' set up to track remote branch 'master' from 'https://github.com/njwangbohz/njwangbohz.github.io.git'.</span><br><span class="line">To https://github.com/njwangbohz/njwangbohz.github.io.git</span><br><span class="line"> + 50f63d0...e16eabb HEAD -&gt; master (forced update)</span><br><span class="line">INFO  Deploy done: git</span><br><span class="line">C:\blog&gt;</span><br></pre></td></tr></table></figure><p>访问：</p><p><img src="/var/folders/7z/8ydsbb052nxb3j2jff7dnqnc0000gn/T/abnerworks.Typora/image-20180513231816647.png" alt="image-20180513231816647"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;&lt;span id=&quot;shi-yong-hexo-da-jian-shu-yu-zi-ji-de-bo-ke&quot;&gt;使用Hexo搭建属于自己的博客&lt;/span&gt;&lt;a href=&quot;#shi-yong-hexo-da-jian-shu-yu-zi-ji-de-bo-ke&quot; clas
      
    
    </summary>
    
      <category term="hexo" scheme="http://baofengketang.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://baofengketang.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Python基础(十三)</title>
    <link href="http://baofengketang.com/2018/05/13/python_base/python_13/"/>
    <id>http://baofengketang.com/2018/05/13/python_base/python_13/</id>
    <published>2018-05-13T03:52:56.000Z</published>
    <updated>2018-05-13T04:18:24.000Z</updated>
    
    <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#gei-cheng-xu-chuan-di-can-shu">给程序传递参数</a></li><li><a href="#lie-biao-tui-dao-shi">列表推导式</a></li><li><a href="#set-ji-he">Set集合</a></li></ul><!-- tocstop --></div><h1><span id="gei-cheng-xu-chuan-di-can-shu">给程序传递参数</span><a href="#gei-cheng-xu-chuan-di-can-shu" class="header-anchor">#</a></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">print(sys.argv)</span><br></pre></td></tr></table></figure><p>执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jinzhongdeMacBook-Pro:~ jinzhong$ python3 hello.py 1,2,3,4,5</span><br><span class="line">helloworld</span><br><span class="line">[&apos;hello.py&apos;, &apos;1,2,3,4,5&apos;]</span><br></pre></td></tr></table></figure><h1><span id="lie-biao-tui-dao-shi">列表推导式</span><a href="#lie-biao-tui-dao-shi" class="header-anchor">#</a></h1><p>所谓的列表推导式，指的就是轻量级循环创建列表</p><p><strong>基本方式</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">14</span>]: a= [x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">5</span>)]</span><br><span class="line">In [<span class="number">15</span>]: a</span><br><span class="line">Out[<span class="number">15</span>]: [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">In [<span class="number">16</span>]: a=[x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">3</span>,<span class="number">4</span>)]</span><br><span class="line">In [<span class="number">17</span>]: a</span><br><span class="line">In [<span class="number">19</span>]: a=[x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">2</span>,<span class="number">20</span>)]</span><br><span class="line">In [<span class="number">20</span>]: a</span><br><span class="line">Out[<span class="number">20</span>]: [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>]</span><br><span class="line">In [<span class="number">21</span>]: a=[x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">2</span>,<span class="number">20</span>,<span class="number">2</span>)]</span><br><span class="line">In [<span class="number">22</span>]: a</span><br><span class="line">Out[<span class="number">22</span>]: [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">16</span>, <span class="number">18</span>]</span><br></pre></td></tr></table></figure><p><strong>循环中使用if</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">28</span>]: a=[x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">2</span>,<span class="number">20</span>) <span class="keyword">if</span> x%<span class="number">2</span>==<span class="number">0</span>]</span><br><span class="line">In [<span class="number">29</span>]: a</span><br><span class="line">Out[<span class="number">29</span>]: [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">16</span>, <span class="number">18</span>]</span><br></pre></td></tr></table></figure><p><strong>2个for循环及多个循环</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">32</span>]: a=[(x,y) <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">3</span>)  <span class="keyword">for</span> y <span class="keyword">in</span> range(<span class="number">3</span>)]</span><br><span class="line">In [<span class="number">33</span>]: a</span><br><span class="line">Out[<span class="number">33</span>]: [(<span class="number">1</span>, <span class="number">0</span>), (<span class="number">1</span>, <span class="number">1</span>), (<span class="number">1</span>, <span class="number">2</span>), (<span class="number">2</span>, <span class="number">0</span>), (<span class="number">2</span>, <span class="number">1</span>), (<span class="number">2</span>, <span class="number">2</span>)]</span><br><span class="line"></span><br><span class="line">In [<span class="number">36</span>]: a=[(x,y,z) <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">3</span>) <span class="keyword">for</span> y <span class="keyword">in</span> range(<span class="number">3</span>,<span class="number">5</span>) <span class="keyword">for</span> z <span class="keyword">in</span> range(<span class="number">5</span>,<span class="number">8</span>)]</span><br><span class="line">    ...:</span><br><span class="line">In [<span class="number">37</span>]: a</span><br><span class="line">Out[<span class="number">37</span>]:</span><br><span class="line">[(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>),</span><br><span class="line"> (<span class="number">1</span>, <span class="number">3</span>, <span class="number">6</span>),</span><br><span class="line"> (<span class="number">1</span>, <span class="number">3</span>, <span class="number">7</span>),</span><br><span class="line"> (<span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>),</span><br><span class="line"> (<span class="number">1</span>, <span class="number">4</span>, <span class="number">6</span>),</span><br><span class="line"> (<span class="number">1</span>, <span class="number">4</span>, <span class="number">7</span>),</span><br><span class="line"> (<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>),</span><br><span class="line"> (<span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>),</span><br><span class="line"> (<span class="number">2</span>, <span class="number">3</span>, <span class="number">7</span>),</span><br><span class="line"> (<span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>),</span><br><span class="line"> (<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>),</span><br><span class="line"> (<span class="number">2</span>, <span class="number">4</span>, <span class="number">7</span>)]</span><br></pre></td></tr></table></figure><h1><span id="set-ji-he">Set集合</span><a href="#set-ji-he" class="header-anchor">#</a></h1><p><strong>set集合</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: a=set()</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: type(a)</span><br><span class="line">Out[<span class="number">2</span>]: set</span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: b=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">12</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: b</span><br><span class="line">Out[<span class="number">4</span>]: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">12</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: c=set(b)</span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: type(c)</span><br><span class="line">Out[<span class="number">6</span>]: set</span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: c</span><br><span class="line">Out[<span class="number">7</span>]: &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">12</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: d=list(c)</span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: d</span><br><span class="line">Out[<span class="number">9</span>]: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">12</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]: type(d)</span><br><span class="line">Out[<span class="number">10</span>]: list</span><br></pre></td></tr></table></figure><p><strong>互相转换</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">13</span>]: d</span><br><span class="line">Out[<span class="number">13</span>]: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">12</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">14</span>]: e=tuple(d)</span><br><span class="line"></span><br><span class="line">In [<span class="number">15</span>]: e</span><br><span class="line">Out[<span class="number">15</span>]: (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">12</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">16</span>]: f =list(e)</span><br><span class="line"></span><br><span class="line">In [<span class="number">17</span>]: f</span><br><span class="line">Out[<span class="number">17</span>]: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">12</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">18</span>]: g=set(e)</span><br><span class="line"></span><br><span class="line">In [<span class="number">19</span>]: g</span><br><span class="line">Out[<span class="number">19</span>]: &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">12</span>&#125;</span><br></pre></td></tr></table></figure><p>使用set可以快速的完成对list中的元素的去重复操作</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;toc&quot;&gt;

&lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#gei-cheng-xu-chuan-di-can-shu&quot;&gt;给程序传递参数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#lie-biao-tui-dao-shi&quot;&gt;列表推导式
      
    
    </summary>
    
      <category term="Python" scheme="http://baofengketang.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://baofengketang.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>爬虫实践－爬取51job岗位</title>
    <link href="http://baofengketang.com/2018/05/10/python_data/python_data_06/"/>
    <id>http://baofengketang.com/2018/05/10/python_data/python_data_06/</id>
    <published>2018-05-10T14:54:03.000Z</published>
    <updated>2018-05-13T02:56:21.000Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="pa-chong-shi-jian-pa-qu-51job-gang-wei">爬虫实践－爬取51job岗位</span><a href="#pa-chong-shi-jian-pa-qu-51job-gang-wei" class="header-anchor">#</a></h1><h2><span id="fen-xi-ji-ben-yuan-su-pa-qu">分析-基本元素爬取</span><a href="#fen-xi-ji-ben-yuan-su-pa-qu" class="header-anchor">#</a></h2><p>打开网站</p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1526177758.png?imageMogr2/thumbnail/!70p" alt=""></p><p>我们现在要获取到职位、公司、工作地点、薪资，发布时间这里的数据，通过审查元素来观察一下</p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1526178105.png?imageMogr2/thumbnail/!70p" alt=""></p><p>有了这些规则，那么我们就可以通过爬虫来进行数据的爬取操作了</p><p>首先我们来爬取本页的第一条数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#encoding="UTF-8"</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">headers=&#123;</span><br><span class="line">    <span class="string">"User-Agent"</span>:<span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:59.0) Gecko/20100101 Firefox/59.0"</span></span><br><span class="line">&#125;</span><br><span class="line">url=<span class="string">"https://search.51job.com/list/070200,000000,0000,00,9,99,java,2,1.html?lang=c&amp;stype=1&amp;postchannel=0000&amp;workyear=99&amp;cotype=99&amp;degreefrom=99&amp;jobterm=99&amp;companysize=99&amp;lonlat=0%2C0&amp;radius=-1&amp;ord_field=0&amp;confirmdate=9&amp;fromType=&amp;dibiaoid=0&amp;address=&amp;line=&amp;specialarea=00&amp;from=&amp;welfare="</span></span><br><span class="line">count=<span class="number">0</span>;</span><br><span class="line">res=requests.get(url,headers=headers)</span><br><span class="line">res.encoding=<span class="string">"gb2312"</span></span><br><span class="line">soup = BeautifulSoup(res.text,<span class="string">"html.parser"</span>);</span><br><span class="line">soup.prettify()</span><br><span class="line">titles=soup.select(<span class="string">"span.t1,p.t1 span"</span>)</span><br><span class="line">company = soup.select(<span class="string">"span.t2"</span>)</span><br><span class="line">address = soup.select(<span class="string">".dw_table span.t3"</span>)</span><br><span class="line">sal= soup.select(<span class="string">"span.t4"</span>)</span><br><span class="line">publishTime=soup.select(<span class="string">"span.t5"</span>)</span><br><span class="line">i=<span class="number">1</span></span><br><span class="line">print(titles[i].text.strip(),company[i].text.strip(),address[i].text.strip(),sal[i].text.strip(),publishTime[i].text.strip());</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hadoop开发工程师 南京森根科技发展有限公司 南京 1-2万/月 05-13</span><br></pre></td></tr></table></figure><h2><span id="fen-xi-dong-tai-pa-qu">分析-动态爬取</span><a href="#fen-xi-dong-tai-pa-qu" class="header-anchor">#</a></h2><p>好了，有了第一条数据之后，我们下面来增加动态的操作，用来爬取每页的所有数据，先观察一共多少页，以及页面的地址的变化</p><p>点击第二页，观察页面地址</p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1526178701.png?imageMogr2/thumbnail/!70p" alt=""></p><p>同时我们也猜测了一下，如果将上图中的java换成python试试看页面的运行结果是什么</p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1526178777.png?imageMogr2/thumbnail/!70p" alt=""></p><p>那么接下来我们就可以通过参数拼接的方式来进行动态爬取了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#encoding="UTF-8"</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">headers=&#123;</span><br><span class="line">    <span class="string">"User-Agent"</span>:<span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:59.0) Gecko/20100101 Firefox/59.0"</span></span><br><span class="line">&#125;</span><br><span class="line">url=<span class="string">"https://search.51job.com/list/070200,000000,0000,00,9,99,java,2,1.html?lang=c&amp;stype=1&amp;postchannel=0000&amp;workyear=99&amp;cotype=99&amp;degreefrom=99&amp;jobterm=99&amp;companysize=99&amp;lonlat=0%2C0&amp;radius=-1&amp;ord_field=0&amp;confirmdate=9&amp;fromType=&amp;dibiaoid=0&amp;address=&amp;line=&amp;specialarea=00&amp;from=&amp;welfare="</span></span><br><span class="line">count=<span class="number">0</span>;</span><br><span class="line">keywords=<span class="string">"java"</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">91</span>):</span><br><span class="line">    res=requests.get(<span class="string">"https://search.51job.com/list/070200,000000,0000,00,9,99,"</span>+keywords+<span class="string">",2,"</span>+str(j)+<span class="string">".html?lang=c&amp;stype=1&amp;postchannel=0000&amp;workyear=99&amp;cotype=99&amp;degreefrom=99&amp;jobterm=99&amp;companysize=99&amp;lonlat=0%2C0&amp;radius=-1&amp;ord_field=0&amp;confirmdate=9&amp;fromType=&amp;dibiaoid=0&amp;address=&amp;line=&amp;specialarea=00&amp;from=&amp;welfare="</span>,headers=headers)</span><br><span class="line">    res.encoding=<span class="string">"gb2312"</span></span><br><span class="line">    soup = BeautifulSoup(res.text,<span class="string">"html.parser"</span>);</span><br><span class="line">    soup.prettify()</span><br><span class="line">    titles=soup.select(<span class="string">"span.t1,p.t1 span"</span>)</span><br><span class="line">    company = soup.select(<span class="string">"span.t2"</span>)</span><br><span class="line">    address = soup.select(<span class="string">".dw_table span.t3"</span>)</span><br><span class="line">    sal= soup.select(<span class="string">"span.t4"</span>)</span><br><span class="line">    publishTime=soup.select(<span class="string">"span.t5"</span>)</span><br><span class="line">    i=<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> i&lt;len(titles):</span><br><span class="line">        print(titles[i].text.strip(),company[i].text.strip(),address[i].text.strip(),sal[i].text.strip(),publishTime[i].text.strip());</span><br><span class="line">        i = i + <span class="number">1</span></span><br><span class="line">print(count)</span><br></pre></td></tr></table></figure><p>运行结果就不展示了，数据量太大</p><h2><span id="bao-cun-shu-ju">保存数据</span><a href="#bao-cun-shu-ju" class="header-anchor">#</a></h2><p>之前我们都是将数据保存在文本中的，那么如果我想讲数据保存到数据库中怎么办呢？这里以mysql数据库为例</p><p>首先我们得通过pip安装mysqlclient库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install mysqlclient</span><br></pre></td></tr></table></figure><p>安装完毕后，就可以使用mysql来进行保存数据了，关于mysql的具体操作，这里就不做详细介绍了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#encoding="UTF-8"</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="comment">#引入mysql数据库</span></span><br><span class="line"><span class="keyword">import</span> MySQLdb</span><br><span class="line">headers=&#123;</span><br><span class="line">    <span class="string">"User-Agent"</span>:<span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:59.0) Gecko/20100101 Firefox/59.0"</span></span><br><span class="line">&#125;</span><br><span class="line">url=<span class="string">"https://search.51job.com/list/070200,000000,0000,00,9,99,java,2,1.html?lang=c&amp;stype=1&amp;postchannel=0000&amp;workyear=99&amp;cotype=99&amp;degreefrom=99&amp;jobterm=99&amp;companysize=99&amp;lonlat=0%2C0&amp;radius=-1&amp;ord_field=0&amp;confirmdate=9&amp;fromType=&amp;dibiaoid=0&amp;address=&amp;line=&amp;specialarea=00&amp;from=&amp;welfare="</span></span><br><span class="line">count=<span class="number">0</span>;</span><br><span class="line">keywords=<span class="string">"java"</span></span><br><span class="line"><span class="comment">#获取mysql的链接</span></span><br><span class="line">conn=MySQLdb.connect(<span class="string">"localhost"</span>,port=<span class="number">3306</span>,user=<span class="string">"root"</span>,password=<span class="string">"root"</span>,db=<span class="string">"mytest"</span>,charset=<span class="string">"utf8"</span>)</span><br><span class="line">print(conn)</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">90</span>):</span><br><span class="line">    res=requests.get(<span class="string">"https://search.51job.com/list/070200,000000,0000,00,9,99,"</span>+keywords+<span class="string">",2,"</span>+str(j)+<span class="string">".html?lang=c&amp;stype=1&amp;postchannel=0000&amp;workyear=99&amp;cotype=99&amp;degreefrom=99&amp;jobterm=99&amp;companysize=99&amp;lonlat=0%2C0&amp;radius=-1&amp;ord_field=0&amp;confirmdate=9&amp;fromType=&amp;dibiaoid=0&amp;address=&amp;line=&amp;specialarea=00&amp;from=&amp;welfare="</span>,headers=headers)</span><br><span class="line">    res.encoding=<span class="string">"gb2312"</span></span><br><span class="line">    soup = BeautifulSoup(res.text,<span class="string">"html.parser"</span>);</span><br><span class="line">    soup.prettify()</span><br><span class="line">    titles=soup.select(<span class="string">"span.t1,p.t1 span"</span>)</span><br><span class="line">    company = soup.select(<span class="string">"span.t2"</span>)</span><br><span class="line">    address = soup.select(<span class="string">".dw_table span.t3"</span>)</span><br><span class="line">    sal= soup.select(<span class="string">"span.t4"</span>)</span><br><span class="line">    publishTime=soup.select(<span class="string">"span.t5"</span>)</span><br><span class="line">    i=<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> i&lt;len(titles):</span><br><span class="line">        print(titles[i].text.strip(),company[i].text.strip(),address[i].text.strip(),sal[i].text.strip(),publishTime[i].text.strip());</span><br><span class="line">        count+=<span class="number">1</span></span><br><span class="line">        cursor=conn.cursor()</span><br><span class="line">        <span class="comment">#执行游标</span></span><br><span class="line">        cursor.execute(<span class="string">"insert into jobs(title,company,address,sal,pub_time) values (%s,%s,%s,%s,%s)"</span>,(titles[i].text.strip(),company[i].text.strip(),address[i].text.strip(),sal[i].text.strip(),publishTime[i].text.strip()))</span><br><span class="line">        i = i + <span class="number">1</span></span><br><span class="line"><span class="comment">#关闭资源</span></span><br><span class="line">conn.commit()</span><br><span class="line">cursor.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;&lt;span id=&quot;pa-chong-shi-jian-pa-qu-51job-gang-wei&quot;&gt;爬虫实践－爬取51job岗位&lt;/span&gt;&lt;a href=&quot;#pa-chong-shi-jian-pa-qu-51job-gang-wei&quot; class=&quot;header-a
      
    
    </summary>
    
      <category term="爬虫" scheme="http://baofengketang.com/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="http://baofengketang.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Python爬虫实践－今日头条（获取js动态内容）</title>
    <link href="http://baofengketang.com/2018/05/10/python_data/python_data_05/"/>
    <id>http://baofengketang.com/2018/05/10/python_data/python_data_05/</id>
    <published>2018-05-10T08:03:34.000Z</published>
    <updated>2018-05-10T09:29:51.000Z</updated>
    
    <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#python-pa-chong-shi-jian-jin-ri-tou-tiao">Python爬虫实践－今日头条</a><ul><li><a href="#xu-qiu-fen-xi">需求分析</a></li><li><a href="#pa-qu-jin-ri-tou-tiao">爬取今日头条</a></li></ul></li></ul><!-- tocstop --></div><h1><span id="python-pa-chong-shi-jian-jin-ri-tou-tiao">Python爬虫实践－今日头条</span><a href="#python-pa-chong-shi-jian-jin-ri-tou-tiao" class="header-anchor">#</a></h1><h2><span id="xu-qiu-fen-xi">需求分析</span><a href="#xu-qiu-fen-xi" class="header-anchor">#</a></h2><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1525940989.png?imageMogr2/thumbnail/!70p" alt=""></p><p>通过审查元素我们发现页面内容基本上都是js生成而来的，我们在浏览器上看到，但是html源码中缺发现不了</p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1525941194.png?imageMogr2/thumbnail/!70p" alt=""></p><p>对于这种情况我们应该如何进行爬取呢</p><blockquote><p>方式一:从网页响应中找到js脚本返回的json数据</p><p>方式二:使用Selenium对网页进行模拟访问</p></blockquote><p>这里我们采用第一种方式</p><h2><span id="pa-qu-jin-ri-tou-tiao">爬取今日头条</span><a href="#pa-qu-jin-ri-tou-tiao" class="header-anchor">#</a></h2><p>即使网页内容是由 JS 动态生成加载的,JS 也需要对某个接口进行调用,并根据接口返回 的 JSON 数据再进行加载和渲染。所以我们可以找到 JS 调用的数据接口,从数据接口中找 到网页中最后呈现的数据。就以今日头条为例来演示: </p><p>找到js请求的数据接口</p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1525942736.png?imageMogr2/thumbnail/!70p" alt=""></p><p>这里我们就采用python来爬去该网站的图片轮播图这块的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">url=<span class="string">"https://www.toutiao.com/api/pc/focus/"</span></span><br><span class="line">data=requests.get(url).text</span><br><span class="line">myjsons=json.loads(data)</span><br><span class="line">titles=myjsons[<span class="string">"data"</span>][<span class="string">"pc_feed_focus"</span>]</span><br><span class="line"><span class="keyword">for</span> temp <span class="keyword">in</span> titles:</span><br><span class="line">    title= temp.get(<span class="string">"title"</span>)</span><br><span class="line">    image_url=temp.get(<span class="string">"image_url"</span>)[<span class="number">2</span>:]</span><br><span class="line">    print(<span class="string">"标题:"</span>,title,<span class="string">"图片链接："</span>,image_url)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;toc&quot;&gt;

&lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#python-pa-chong-shi-jian-jin-ri-tou-tiao&quot;&gt;Python爬虫实践－今日头条&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#xu-qiu-fe
      
    
    </summary>
    
      <category term="爬虫" scheme="http://baofengketang.com/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="http://baofengketang.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Python网络爬虫实践－腾讯新闻</title>
    <link href="http://baofengketang.com/2018/05/10/python_data/python_data_04/"/>
    <id>http://baofengketang.com/2018/05/10/python_data/python_data_04/</id>
    <published>2018-05-10T03:36:41.000Z</published>
    <updated>2018-05-10T10:11:27.000Z</updated>
    
    <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#pa-chong-shi-jian-teng-xun-xin-wen">爬虫实践－腾讯新闻</a><ul><li><a href="#wang-zhan-fen-xi">网站分析</a></li><li><a href="#ding-zhi-qing-qiu-tou">定制请求头</a></li><li><a href="#chuan-di-url-can-shu">传递url参数</a></li><li><a href="#fa-song-post-qing-qiu">发送POST请求</a></li><li><a href="#chao-shi">超时</a></li><li><a href="#huo-qu-xiang-ying-de-nei-rong">获取响应的内容</a></li><li><a href="#kai-shi-pa-qu-shu-ju">开始爬取数据</a></li></ul></li></ul><!-- tocstop --></div><h1><span id="pa-chong-shi-jian-teng-xun-xin-wen">爬虫实践－腾讯新闻</span><a href="#pa-chong-shi-jian-teng-xun-xin-wen" class="header-anchor">#</a></h1><h2><span id="wang-zhan-fen-xi">网站分析</span><a href="#wang-zhan-fen-xi" class="header-anchor">#</a></h2><p>打开腾讯新闻：<a href="http://news.qq.com/" target="_blank" rel="noopener">http://news.qq.com/</a></p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1525936909.png?imageMogr2/thumbnail/!70p" alt=""></p><h2><span id="ding-zhi-qing-qiu-tou">定制请求头</span><a href="#ding-zhi-qing-qiu-tou" class="header-anchor">#</a></h2><p>观察一下该网站的请求头</p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1525937054.png?imageMogr2/thumbnail/!70p" alt=""></p><p>请求头Headers提供了关于请求、响应或者其它发送实体的信息，对于爬虫而言，请求头十分重要，如果没有请求头或者请求头和实际网页不一致，就可能无法返回正确的结果</p><p>Request并不会基于定制的请求头Header的具体情况改变自己的行为，只是在最后的请求中，所有的请求头信息都会被传递进去</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">headers=&#123;</span><br><span class="line">    <span class="string">"User-Agent"</span>:<span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:59.0) Gecko/20100101 Firefox/59.0"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="chuan-di-url-can-shu">传递url参数</span><a href="#chuan-di-url-can-shu" class="header-anchor">#</a></h2><p>为了请求特定的数据，我们需要在URL的查询字符串中加入某些数据，如果你是自己构建的url，那么数据一般会跟在一个问好后面，并且以键/值的形式放在URL中,比如 url?key1=value1</p><p>在Request中，我们可以将这些参数保存在字典中，用params构建至url中,例如传递key1＝value1和key2=value2</p><p>到url上可以这么编写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">headers=&#123;</span><br><span class="line">    <span class="string">"User-Agent"</span>:<span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:59.0) Gecko/20100101 Firefox/59.0"</span></span><br><span class="line">&#125;</span><br><span class="line">key_dict=&#123;<span class="string">"key1"</span>:<span class="string">"value1"</span>,<span class="string">"key2"</span>:<span class="string">"value2"</span>&#125;</span><br><span class="line">url=<span class="string">"http://news.qq.com/"</span></span><br><span class="line">r=requests.get(url,headers=headers,params=key_dict)</span><br><span class="line">print(<span class="string">"响应状态码"</span>,r.status_code)</span><br></pre></td></tr></table></figure><h2><span id="fa-song-post-qing-qiu">发送POST请求</span><a href="#fa-song-post-qing-qiu" class="header-anchor">#</a></h2><p>除了发送get请求外，有时候还需要发送一些编码为表单形式的数据，比如登陆的时候为POST,因为如果使用GET请求，密码显示在URL上，这是非常不安全的，如果实现post请求，只需要简单的传递一个字典给Requests中的data参数，这个字典就会在发出请求的时候自动编码为表单形式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">headers=&#123;</span><br><span class="line">    <span class="string">"User-Agent"</span>:<span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:59.0) Gecko/20100101 Firefox/59.0"</span></span><br><span class="line">&#125;</span><br><span class="line">key_dict=&#123;<span class="string">"key1"</span>:<span class="string">"value1"</span>,<span class="string">"key2"</span>:<span class="string">"value2"</span>&#125;</span><br><span class="line">url=<span class="string">"http://news.qq.com/"</span></span><br><span class="line">r=requests.post(url,headers=headers,data=key_dict)</span><br><span class="line">print(<span class="string">"响应状态码"</span>,r.status_code)</span><br></pre></td></tr></table></figure><h2><span id="chao-shi">超时</span><a href="#chao-shi" class="header-anchor">#</a></h2><p>有的时候爬虫会遇到服务器长时间不返回，这个时候爬虫就会一直等待，造成爬虫没有顺利的进行，因此可以在requests的timeout参数设定的秒数结束之后停止等待响应，意思就是，服务器在timeout秒内没有应答，就返回异常</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">headers=&#123;</span><br><span class="line">    <span class="string">"User-Agent"</span>:<span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:59.0) Gecko/20100101 Firefox/59.0"</span></span><br><span class="line">&#125;</span><br><span class="line">key_dict=&#123;<span class="string">"key1"</span>:<span class="string">"value1"</span>,<span class="string">"key2"</span>:<span class="string">"value2"</span>&#125;</span><br><span class="line">url=<span class="string">"https://movie.douban.com/top250"</span></span><br><span class="line">r=requests.get(url,headers=headers,timeout=<span class="number">0.001</span>)</span><br><span class="line">print(<span class="string">"响应状态码"</span>,r.status_code)</span><br></pre></td></tr></table></figure><p>运行时报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">requests.exceptions.ConnectTimeout: HTTPSConnectionPool(host=&apos;news.qq.com&apos;, port=443): Max retries exceeded with url: /top250 (Caused by ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x1086c3080&gt;, &apos;Connection to movie.douban.com timed out. (connect timeout=0.001)&apos;))</span><br></pre></td></tr></table></figure><p>一般情况我们将这个值设置为20秒</p><h2><span id="huo-qu-xiang-ying-de-nei-rong">获取响应的内容</span><a href="#huo-qu-xiang-ying-de-nei-rong" class="header-anchor">#</a></h2><blockquote><p>在request中，最常用的功能就是获取某个网页的内容</p><p>r=requests.get(“url”)：方法返回一个response对象</p><p>通过这个response对象我们可以获取我们想要的信息</p><p>r.text:是服务器响应的内容，会自动根据响应头部的字符编码进行解码</p><p>r.encoding:是服务器内容使用的文本编码</p><p>r.status_code:用于监测响应的状态码，如200，404等</p><p>r.content:是字节码的响应体，会自动解码gzip和deflate编码的数据</p><p>r.json():是requests中内置的josn解码器</p></blockquote><h2><span id="kai-shi-pa-qu-shu-ju">开始爬取数据</span><a href="#kai-shi-pa-qu-shu-ju" class="header-anchor">#</a></h2><p>我们需要爬取这个页面的每个新闻的标题，鼠标右击一条新闻标题，选择“审查元素”<img src="http://p6wdo7p1v.bkt.clouddn.com/1525937309.png?imageMogr2/thumbnail/!70p" alt=""></p><p>在次审查一下另外一个元素</p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1525937389.png?imageMogr2/thumbnail/!70p" alt=""></p><p>发现有共性，接下来我们就可以采用爬虫来进行爬取我们需要的标题与链接内容了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#encoding=UTF-8</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">headers=&#123;</span><br><span class="line">    <span class="string">"User-Agent"</span>:<span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:59.0) Gecko/20100101 Firefox/59.0"</span></span><br><span class="line">&#125;</span><br><span class="line">url = <span class="string">"http://news.qq.com"</span></span><br><span class="line">r=requests.get(url,headers=headers)</span><br><span class="line">data = r.text</span><br><span class="line">soup =BeautifulSoup(data,<span class="string">"html.parser"</span>)</span><br><span class="line">news=soup.select(<span class="string">"div.text em.l24 a.linkto"</span>)</span><br><span class="line">f=open(<span class="string">"news.txt"</span>,<span class="string">"w"</span>)</span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> news:</span><br><span class="line">    title=n.get_text();</span><br><span class="line">    link=n.get(<span class="string">"href"</span>)</span><br><span class="line">    data=&#123;</span><br><span class="line">        <span class="string">"标题"</span>:title,</span><br><span class="line">        <span class="string">"链接"</span>:link</span><br><span class="line">    &#125;</span><br><span class="line">    print(data)</span><br><span class="line">    f.write(<span class="string">"%s:%s"</span>%(title,link)+<span class="string">"\n"</span>)</span><br><span class="line"></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;toc&quot;&gt;

&lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#pa-chong-shi-jian-teng-xun-xin-wen&quot;&gt;爬虫实践－腾讯新闻&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#wang-zhan-fen-xi&quot;&gt;网站分
      
    
    </summary>
    
      <category term="爬虫" scheme="http://baofengketang.com/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="http://baofengketang.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Python爬虫入门</title>
    <link href="http://baofengketang.com/2018/05/10/python_data/python_data_03/"/>
    <id>http://baofengketang.com/2018/05/10/python_data/python_data_03/</id>
    <published>2018-05-10T01:32:32.000Z</published>
    <updated>2018-05-10T03:36:26.000Z</updated>
    
    <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#python-pa-chong-ru-men">Python爬虫入门</a><ul><li><a href="#http-qing-qiu">Http请求</a></li><li><a href="#http-de-ji-ben-gai-nian">Http的基本概念</a><ul><li><a href="#http-gai-lan">HTTP概览</a></li><li><a href="#http-qing-qiu-tou">Http请求头</a></li></ul></li><li><a href="#bian-xie-di-yi-ge-jian-dan-de-pa-chong">编写第一个简单的爬虫</a><ul><li><a href="#di-yi-bu-huo-qu-ye-mian">第一步：获取页面</a></li><li><a href="#di-er-bu-huo-qu-xu-yao-de-shu-ju">第二步：获取需要的数据</a></li><li><a href="#di-san-bu-cun-chu-shu-ju">第三步：存储数据</a></li></ul></li></ul></li></ul><!-- tocstop --></div><h1><span id="python-pa-chong-ru-men">Python爬虫入门</span><a href="#python-pa-chong-ru-men" class="header-anchor">#</a></h1><h2><span id="http-qing-qiu">Http请求</span><a href="#http-qing-qiu" class="header-anchor">#</a></h2><p>无论我们通过浏览器打开网站、访问网页,还是通过脚本对 URL 网址进行访问,本质上都 是对HTTP服务器的请求,浏览器上所呈现的、控制台所显示的都是HTTP服务器对我们请求的响应。 </p><p>以打开我的博客为例,我们在地址栏输入“<a href="http://www.baofengketang.com”,浏览器上呈现的是下图" target="_blank" rel="noopener">www.baofengketang.com”,浏览器上呈现的是下图</a></p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1525916301.png?imageMogr2/thumbnail/!70p" alt=""></p><p>进入到开发者模式</p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1525916518.png?imageMogr2/thumbnail/!70p" alt=""></p><p>响应的源代码如下</p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1525916673.png?imageMogr2/thumbnail/!70p" alt=""></p><h2><span id="http-de-ji-ben-gai-nian">Http的基本概念</span><a href="#http-de-ji-ben-gai-nian" class="header-anchor">#</a></h2><p>通常 HTTP 消息包括客户机向服务器的请求消息和服务器向客户机的响应消息。这两种类型的消息由一个起始行,一个或者多个头域,一个指示头域结束的空行和可选的消息体组成</p><h3><span id="http-gai-lan">HTTP概览</span><a href="#http-gai-lan" class="header-anchor">#</a></h3><p>Request URl:表示请求的 URL  Request Method:表示请求的方法,此处为 GET。除此之外,HTTP 的请求方法还有 OPTION、 HEAD、POST、DELETE、PUT 等,而最常用的就是 GET 和 POST 方法: </p><blockquote><p>POST</p><p>向指定资源提交数据,请求服务器进行处理(例如提交表单或者上传文件)。数据被包含在请求本文中。这个请求可能会创建新的资源或修改现有资源,或二者皆有。 </p><p>GET</p><p>向指定的资源发出“显示”请求</p></blockquote><p>Status Code:显示 HTTP 请求和状态码,表示 HTTP 请求的状态,此处为 200,表示请求已被服务器接收、理解和处理; 状态代码的第一个数字代表当前响应的类型,HTTP 协议中有以下几种响应类型 </p><blockquote><p>1xx 消息——请求已被服务器接收,继续处理 </p><p>2xx 成功——请求已成功被服务器接收、理解、并接受 </p><p>3xx 重定向——需要后续操作才能完成这一请求 </p><p>4xx 请求错误——请求含有词法错误或者无法被执行 </p></blockquote><h3><span id="http-qing-qiu-tou">Http请求头</span><a href="#http-qing-qiu-tou" class="header-anchor">#</a></h3><blockquote><p>Accept:表示请求的资源类型 </p><p>Cookie:为了辨别用户身份、进行 session 跟踪而储存在用户本地终端上的数据; </p><p>User-Agent:表示浏览器标识; </p><p>Accept-Language:表示浏览器所支持的语言类型;  </p><p>Accept-Charset:告诉 Web 服务器,浏览器可以接受哪些字符编码;</p><p>Accept:表示浏览器支持的 MIME 类型;</p><p>Accept-Encoding:表示浏览器有能力解码的编码类型; </p><p>Connection:表示客户端与服务连接类型; </p></blockquote><p>基本的 HTTP 介绍就结束了,如果需要更加详细的 HTTP 知识, 可以阅读相关书籍</p><h2><span id="bian-xie-di-yi-ge-jian-dan-de-pa-chong">编写第一个简单的爬虫</span><a href="#bian-xie-di-yi-ge-jian-dan-de-pa-chong" class="header-anchor">#</a></h2><p>使用python爬去我的博客中的首页中的文章标题</p><h3><span id="di-yi-bu-huo-qu-ye-mian">第一步：获取页面</span><a href="#di-yi-bu-huo-qu-ye-mian" class="header-anchor">#</a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:UTF-8</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url=<span class="string">"https://baofengketang.com"</span></span><br><span class="line">data = requests.get(url)</span><br><span class="line">headers = &#123;<span class="string">"User-Agent"</span>:<span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:59.0) Gecko/20100101 Firefox/59.0"</span>&#125;</span><br><span class="line">res = requests.get(url,headers=headers)</span><br><span class="line">print(res.text)</span><br></pre></td></tr></table></figure><p> <strong>注意：</strong></p><blockquote><p>requests的headers伪装成浏览器访问</p><p>res是requests的Response对象，我们可以从中获取到我们的信息,res.text是获取网页内容代码</p></blockquote><h3><span id="di-er-bu-huo-qu-xu-yao-de-shu-ju">第二步：获取需要的数据</span><a href="#di-er-bu-huo-qu-xu-yao-de-shu-ju" class="header-anchor">#</a></h3><p>首先观察页面中我们需要的数据的特征</p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1525920715.png?imageMogr2/thumbnail/!70p" alt=""></p><p>测试编写代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:UTF-8</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">url=<span class="string">"https://baofengketang.com"</span></span><br><span class="line">data = requests.get(url)</span><br><span class="line">headers = &#123;<span class="string">"User-Agent"</span>:<span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:59.0) Gecko/20100101 Firefox/59.0"</span>&#125;</span><br><span class="line">res = requests.get(url,headers=headers)</span><br><span class="line">soup = BeautifulSoup(res.text,<span class="string">"html.parser"</span>)</span><br><span class="line">titles = soup.select(<span class="string">"div.mini-article__info h3.mini-article__title a"</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(titles)):</span><br><span class="line">    title = titles[i].text.strip()</span><br><span class="line">    print(<span class="string">"第%d篇文章的标题是:%s"</span>%(i+<span class="number">1</span>,title))</span><br></pre></td></tr></table></figure><h3><span id="di-san-bu-cun-chu-shu-ju">第三步：存储数据</span><a href="#di-san-bu-cun-chu-shu-ju" class="header-anchor">#</a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:UTF-8</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">url=<span class="string">"https://baofengketang.com"</span></span><br><span class="line">data = requests.get(url)</span><br><span class="line">headers = &#123;<span class="string">"User-Agent"</span>:<span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:59.0) Gecko/20100101 Firefox/59.0"</span>&#125;</span><br><span class="line">res = requests.get(url,headers=headers)</span><br><span class="line">print(res.status_code) <span class="comment">#返回状态码</span></span><br><span class="line">print(res.text)  <span class="comment">#得到响应的结果</span></span><br><span class="line">print(res.encoding)<span class="comment">#响应状态码</span></span><br><span class="line">soup = BeautifulSoup(res.text,<span class="string">"html.parser"</span>)</span><br><span class="line">titles = soup.select(<span class="string">"div.mini-article__info h3.mini-article__title a"</span>)</span><br><span class="line">f = open(<span class="string">"博客.txt"</span>,<span class="string">'w'</span>);</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(titles)):</span><br><span class="line">    title = titles[i].text.strip()</span><br><span class="line">    print(<span class="string">"第%d篇文章的标题是:%s"</span>%(i+<span class="number">1</span>,title))</span><br><span class="line">    f.write(<span class="string">"第%d篇文章的标题是:%s"</span>%(i+<span class="number">1</span>,title)+<span class="string">"\n"</span>)</span><br><span class="line"></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>运行结果如下</p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1525921239.png?imageMogr2/thumbnail/!70p" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;toc&quot;&gt;

&lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#python-pa-chong-ru-men&quot;&gt;Python爬虫入门&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#http-qing-qiu&quot;&gt;Http请求&lt;/a&gt;&lt;/li&gt;
&lt;
      
    
    </summary>
    
      <category term="爬虫" scheme="http://baofengketang.com/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="http://baofengketang.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Python网络爬虫环境准备</title>
    <link href="http://baofengketang.com/2018/05/10/python_data/python_data_02/"/>
    <id>http://baofengketang.com/2018/05/10/python_data/python_data_02/</id>
    <published>2018-05-10T01:12:14.000Z</published>
    <updated>2018-05-10T01:32:48.000Z</updated>
    
    <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#huan-jing-zhun-bei">环境准备</a><ul><li><a href="#ji-ben-zhi-shi">基本知识</a></li><li><a href="#kai-fa-huan-jing">开发环境</a></li><li><a href="#di-san-fang-yi-lai-ku">第三方依赖库</a><ul><li><a href="#yi-lai-ku-de-an-zhuang">依赖库的安装</a></li></ul></li></ul></li></ul><!-- tocstop --></div><h1><span id="huan-jing-zhun-bei">环境准备</span><a href="#huan-jing-zhun-bei" class="header-anchor">#</a></h1><h2><span id="ji-ben-zhi-shi">基本知识</span><a href="#ji-ben-zhi-shi" class="header-anchor">#</a></h2><p>使用 Python 编写爬虫,当然至少得了解 Python 基本的语法,了解以下几点即可 </p><blockquote><p>基本数据结构 </p><p>数据类型 </p><p>控制流 </p><p>函数的使用 模块的使用 </p></blockquote><p>不需要过多深入的python知识，如果不懂的小伙伴可以阅读我的博客中的python基础章节</p><h2><span id="kai-fa-huan-jing">开发环境</span><a href="#kai-fa-huan-jing" class="header-anchor">#</a></h2><blockquote><p>操作系统：mac</p><p>python版本：python3.6</p><p>IDE: PyCharm</p></blockquote><h2><span id="di-san-fang-yi-lai-ku">第三方依赖库</span><a href="#di-san-fang-yi-lai-ku" class="header-anchor">#</a></h2><blockquote><p>Requests:一个方便、简洁、高效且人性化的 HTTP 请求库 </p><p>BeautifulSoup:HTML 解析库 </p><p>Pymongo:MongoDB 的 Python 封装模块 </p><p>Selenium:一个 Web 自动化测试框架,用于模拟登录和获取 JS 动态数据 </p><p>Pytesseract:一个 OCR 识别模块,用于验证码识别 </p><p>Pillow:Python 图像处理模块 </p></blockquote><h3><span id="yi-lai-ku-de-an-zhuang">依赖库的安装</span><a href="#yi-lai-ku-de-an-zhuang" class="header-anchor">#</a></h3><p>这里我们不需要安装全部，有选择的安装一下</p><p><strong>requests的安装</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install requests</span><br></pre></td></tr></table></figure><p><strong>BeautifulSoup的安装</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install bs4</span><br></pre></td></tr></table></figure><p><strong>Pymongo的安装</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pymongo</span><br></pre></td></tr></table></figure><p><strong>Selenium的安装</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install selenium</span><br></pre></td></tr></table></figure><p><strong>pillow的安装</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pillow</span><br></pre></td></tr></table></figure><p><strong>pytesseract的安装</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pytesseract</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;toc&quot;&gt;

&lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#huan-jing-zhun-bei&quot;&gt;环境准备&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#ji-ben-zhi-shi&quot;&gt;基本知识&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=
      
    
    </summary>
    
      <category term="爬虫" scheme="http://baofengketang.com/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="http://baofengketang.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Python网络爬虫(一)</title>
    <link href="http://baofengketang.com/2018/05/10/python_data/python_data_01/"/>
    <id>http://baofengketang.com/2018/05/10/python_data/python_data_01/</id>
    <published>2018-05-09T23:00:32.000Z</published>
    <updated>2018-05-10T01:13:56.000Z</updated>
    
    <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#wang-luo-pa-chong">网络爬虫</a><ul><li><a href="#pa-chong-gai-nian">爬虫概念</a></li><li><a href="#wei-shi-me-yao-xue-xi-wang-luo-pa-chong">为什么要学习网络爬虫</a><ul><li><a href="#wang-luo-pa-chong-neng-dai-lai-de-hao-chu">网络爬虫能带来的好处</a></li><li><a href="#da-shu-ju-fen-xi-de-ji-chu">大数据分析的基础</a></li></ul></li><li><a href="#wang-luo-pa-chong-shi-fou-he-fa">网络爬虫是否合法</a><ul><li><a href="#robots-xie-yi">Robots协议</a></li><li><a href="#wang-luo-pa-chong-de-yue-shu">网络爬虫的约束</a></li></ul></li><li><a href="#wang-luo-pa-chong-de-liu-cheng">网络爬虫的流程</a><ul><li><a href="#python-pa-chong-liu-cheng">Python爬虫流程</a></li></ul></li></ul></li></ul><!-- tocstop --></div><h1><span id="wang-luo-pa-chong">网络爬虫</span><a href="#wang-luo-pa-chong" class="header-anchor">#</a></h1><h2><span id="pa-chong-gai-nian">爬虫概念</span><a href="#pa-chong-gai-nian" class="header-anchor">#</a></h2><p>网络爬虫是当前互联网比较流行的概念，特别是对于搜索引擎、数据处理等，都需要我们从网上去“取”一些符合要求的数据。总的来说，一般的爬虫分为两个功能模块，也就是取数据和存数据。</p><p>取数据是爬虫的关键，特别对于一些具有“防御性”的情况，比如说网站需要登陆的情况，需要挂代理访问的情况，需要限制访问频率的情况，甚至需要输入验证码的情况，都需要在我们设计爬虫方法的时候考虑到。</p><p>存数据则是涉及到我们对数据的处理，是保存到数据库中，还是保存到本地文件中，或者临时保存在计算机内存中。</p><p>一般所谓的取网页内容，指的是通过程序（某种语言的程序代码，比如Python脚本语言）实现访问某个URL地址，然后获得其所返回的内容（HTML源码，Json格式的字符串等）。然后通过解析规则，分析出我们需要的数据并取出来。</p><h2><span id="wei-shi-me-yao-xue-xi-wang-luo-pa-chong">为什么要学习网络爬虫</span><a href="#wei-shi-me-yao-xue-xi-wang-luo-pa-chong" class="header-anchor">#</a></h2><h3><span id="wang-luo-pa-chong-neng-dai-lai-de-hao-chu">网络爬虫能带来的好处</span><a href="#wang-luo-pa-chong-neng-dai-lai-de-hao-chu" class="header-anchor">#</a></h3><p>对于企业和个人来说，我们都可以通过爬虫来采集互联网的公开数据，那么对于企业来说，爬取互联网的技术有什么好处呢？下面我们以国内几大电商网站为例举例说明</p><p>对于某个品牌的电商产品，该品牌需要获悉对手的产品的特点、价格、以及销售情况，才能及时跟进产品开发进度和营销策略从而知己知彼。</p><p>过去的常用做法就是让产品研发部手动访问某个页面人工复制到excel中，这种重复性的工作不仅浪费了宝贵的时间，一不留神复制少了一个数据还会导致数据操作，最重要的是，如果对手的数据更新的比较慢，那么我们的数据就缺少时效性，而使用爬虫则能够为我们解决这个问题.</p><h3><span id="da-shu-ju-fen-xi-de-ji-chu">大数据分析的基础</span><a href="#da-shu-ju-fen-xi-de-ji-chu" class="header-anchor">#</a></h3><p>近几年随着大数据的火爆，毕竟有数据才可以分析，网络爬虫已经成为大数据库分析领域的第一个环节，对于这些公开的有价值的数据，我们可以KYC来说明</p><p>Know Your Company</p><p>Know your Competitor</p><p>Know your Customer</p><p>对于数据，我们可以通过机器学习和统计算法分析，在营销领域给企业带来4p</p><p>Product:产品更新</p><p>Place：只能选址</p><p>Price:动态价格</p><p>Promotion:数据驱动的营销服务</p><h2><span id="wang-luo-pa-chong-shi-fou-he-fa">网络爬虫是否合法</span><a href="#wang-luo-pa-chong-shi-fou-he-fa" class="header-anchor">#</a></h2><p>互联网已经通过自身协议建立起一个道德规范（Robots协议）但法律部门还在建立和完善中，一半情况如果爬取的数据属于个人或者科研范畴，基本没有问题，而如果数据属于商业范畴，就要就事论事，可能违法也可能不违法。</p><h3><span id="robots-xie-yi">Robots协议</span><a href="#robots-xie-yi" class="header-anchor">#</a></h3><p>Robots协议（爬虫协议）全名：“网络爬虫排除标准”（Robots Exclusion Protocol）网站通过Robots协议告诉搜索引擎哪些页面可以抓取，哪些页面不可以抓取。</p><p>以淘宝网为例，我们可以访问如下代码：</p><p><a href="https://www.taobao.com/robots.txt" target="_blank" rel="noopener">https://www.taobao.com/robots.txt</a></p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1525909825.png?imageMogr2/thumbnail/!70p" alt=""></p><p>该文件则规定了哪些页面可以允许百度爬虫引擎访问，哪些页面不允许页面访问</p><p>同时我们在百度中搜索淘宝时也可以发现</p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1525913605.png?imageMogr2/thumbnail/!70p" alt=""></p><h3><span id="wang-luo-pa-chong-de-yue-shu">网络爬虫的约束</span><a href="#wang-luo-pa-chong-de-yue-shu" class="header-anchor">#</a></h3><p>除了robots协议之外，我们使用网络爬虫时还需要对自己进行约束，过于快速或者频繁的网络爬虫都会对服务器产生巨大的压力，网站可能会封锁你的ip，甚至采取进一步的法律行动，因此，你需要约束自己的网络行为，请将请求速度限定在一个合理的范围之内</p><h2><span id="wang-luo-pa-chong-de-liu-cheng">网络爬虫的流程</span><a href="#wang-luo-pa-chong-de-liu-cheng" class="header-anchor">#</a></h2><h3><span id="python-pa-chong-liu-cheng">Python爬虫流程</span><a href="#python-pa-chong-liu-cheng" class="header-anchor">#</a></h3><p>网络爬虫的流程实际上非常简单，主要分为三个部分</p><blockquote><p>第一步：获取网页</p><p>第二步：解析网页（提取数据）</p><p>第三步:   存储数据</p></blockquote><p>1.获取网页就是给一个网址发送一个请求，该网址会返回整个网页的数据，类似于在浏览器中键入一个回车键，然后就可以看到网站的整个内容</p><p>2.解析网页就是从整个网页的数据中提取自己想要的数据</p><p>3.存书数据也容易理解，就是把提取的数据存储下来，我们可以存储在csv中也可以存储在数据库中</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;toc&quot;&gt;

&lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#wang-luo-pa-chong&quot;&gt;网络爬虫&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#pa-chong-gai-nian&quot;&gt;爬虫概念&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a hre
      
    
    </summary>
    
      <category term="爬虫" scheme="http://baofengketang.com/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="http://baofengketang.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Python基础(十二)</title>
    <link href="http://baofengketang.com/2018/05/09/python_base/python_12/"/>
    <id>http://baofengketang.com/2018/05/09/python_base/python_12/</id>
    <published>2018-05-09T06:43:57.000Z</published>
    <updated>2018-05-13T03:52:20.000Z</updated>
    
    <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#mo-kuai">模块</a><ul><li><a href="#mo-kuai-jie-shao">模块介绍</a><ul><li><a href="#python-zhong-de-mo-kuai">python中的模块</a></li><li><a href="#import">import</a></li><li><a href="#from-import">from import</a></li><li><a href="#from-import">from … import *</a></li><li><a href="#as-wei-mo-kuai-qi-bie-ming">as:为模块起别名</a></li><li><a href="#ding-wei-mo-kuai">定位模块</a></li></ul></li><li><a href="#mo-kuai-zhi-zuo">模块制作</a><ul><li><a href="#ding-yi-zi-ji-de-mo-kuai">定义自己的模块</a></li><li><a href="#diao-yong-zi-ji-mo-kuai">调用自己模块</a></li><li><a href="#ce-shi-mo-kuai">测试模块</a></li></ul></li><li><a href="#mo-kuai-zhong-de-all">模块中的__all__</a><ul><li><a href="#mei-you-all-de-qing-kuang">没有__all__的情况</a></li><li><a href="#mo-kuai-zhong-bao-han-all">模块中包含__all__</a></li><li><a href="#zong-jie">总结</a></li></ul></li><li><a href="#python-zhong-de-bao">python中的包</a></li><li><a href="#yin-ru-bao">引入包</a></li><li><a href="#init-wen-jian-de-zuo-yong">__init__文件的作用</a></li></ul></li></ul><!-- tocstop --></div><h1><span id="mo-kuai">模块</span><a href="#mo-kuai" class="header-anchor">#</a></h1><h2><span id="mo-kuai-jie-shao">模块介绍</span><a href="#mo-kuai-jie-shao" class="header-anchor">#</a></h2><h3><span id="python-zhong-de-mo-kuai">python中的模块</span><a href="#python-zhong-de-mo-kuai" class="header-anchor">#</a></h3><p>有过C语言编程经验的朋友都知道在C语言中如果要引用sqrt函数，必须用语句#include &lt;math.h&gt;引入math.h这个头文件，否则是无法正常进行调用的。</p><p>那么在Python中，如果要引用一些其他的函数，该怎么处理呢？</p><p>在Python中有一个概念叫做模块（module），这个和C语言中的头文件以及Java中的包很类似，比如在Python中要调用sqrt函数，必须用import关键字引入math这个模块，下面就来了解一下Python中的模块。</p><p>说的通俗点：模块就好比是工具包，要想使用这个工具包中的工具(就好比函数)，就需要导入这个模块</p><h3><span id="import">import</span><a href="#import" class="header-anchor">#</a></h3><p>在Python中用关键字<code>import</code>来引入某个模块，比如要引用模块math，就可以在文件最开始的地方用import math来引入。</p><p>形如:    </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> module1,mudule2...</span><br></pre></td></tr></table></figure><p>当解释器遇到import语句，如果模块在当前的搜索路径就会被导入。</p><p>在调用math模块中的函数时，必须这样引用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">　　模块名.函数名</span><br></pre></td></tr></table></figure><ul><li><p>想一想:</p><blockquote><p>为什么必须加上模块名调用呢？</p></blockquote></li><li><p>答:</p><blockquote><p>因为可能存在这样一种情况：在多个模块中含有相同名称的函数，此时如果只是通过函数名来调用，解释器无法知道到底要调用哪个函数。所以如果像上述这样引入模块的时候，调用函数必须加上模块名</p></blockquote></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="comment">#这样会报错</span></span><br><span class="line"><span class="keyword">print</span> sqrt(<span class="number">2</span>)</span><br><span class="line"><span class="comment">#这样才能正确输出结果</span></span><br><span class="line"><span class="keyword">print</span> math.sqrt(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>有时候我们只需要用到模块中的某个函数，只需要引入该函数即可，此时可以用下面方法实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> 模块名 <span class="keyword">import</span> 函数名<span class="number">1</span>,函数名<span class="number">2.</span>...</span><br></pre></td></tr></table></figure><p>不仅可以引入函数，还可以引入一些全局变量、类等</p><ul><li><p>注意:</p><blockquote><ul><li>通过这种方式引入的时候，调用函数时只能给出函数名，不能给出模块名，但是当两个模块中含有相同名称函数的时候，后面一次引入会覆盖前一次引入。也就是说假如模块A中有函数function(  )，在模块B中也有函数function(  )，如果引入A中的function在先、B中的function在后，那么当调用function函数的时候，是去执行模块B中的function函数。</li><li>如果想一次性引入math中所有的东西，还可以通过from math import *来实现</li></ul></blockquote></li></ul><h3><span id="from-import">from import</span><a href="#from-import" class="header-anchor">#</a></h3><p>Python的from语句让你从模块中导入一个指定的部分到当前命名空间中</p><p>语法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">from modname import name1[, name2[, ... nameN]]</span><br></pre></td></tr></table></figure><p>例如，要导入模块fib的fibonacci函数，使用如下语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">from fib import fibonacci</span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><ul><li>不会把整个fib模块导入到当前的命名空间中，它只会将fib里的fibonacci单个引入</li></ul><h3><span id="from-import">from … import *</span><a href="#from-import" class="header-anchor">#</a></h3><p>把一个模块的所有内容全都导入到当前的命名空间也是可行的，只需使用如下声明：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> modname <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><ul><li>这提供了一个简单的方法来导入一个模块中的所有项目。然而这种声明不该被过多地使用。</li></ul><h3><span id="as-wei-mo-kuai-qi-bie-ming">as:为模块起别名</span><a href="#as-wei-mo-kuai-qi-bie-ming" class="header-anchor">#</a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">2</span>]: <span class="keyword">import</span> time <span class="keyword">as</span> tm</span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: time.sleep(<span class="number">3</span>)</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">NameError                                 Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input<span class="number">-3</span><span class="number">-127</span>a5bdb7b75&gt; <span class="keyword">in</span> &lt;module&gt;()</span><br><span class="line">----&gt; 1 time.sleep(3)</span><br><span class="line"></span><br><span class="line">NameError: name <span class="string">'time'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: tm.sleep(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>主要加入了别名，那么以后只能采用别名访问</p><h3><span id="ding-wei-mo-kuai">定位模块</span><a href="#ding-wei-mo-kuai" class="header-anchor">#</a></h3><p>当你导入一个模块，Python解析器对模块位置的搜索顺序是：</p><ol><li>当前目录</li><li>如果不在当前目录，Python则搜索在shell变量PYTHONPATH下的每个目录。</li><li>如果都找不到，Python会察看默认路径。UNIX下，默认路径一般为/usr/local/lib/python/</li><li>模块搜索路径存储在system模块的sys.path变量中。变量里包含当前目录，PYTHONPATH和由安装过程决定的默认目录。</li></ol><h2><span id="mo-kuai-zhi-zuo">模块制作</span><a href="#mo-kuai-zhi-zuo" class="header-anchor">#</a></h2><h3><span id="ding-yi-zi-ji-de-mo-kuai">定义自己的模块</span><a href="#ding-yi-zi-ji-de-mo-kuai" class="header-anchor">#</a></h3><p>在Python中，每个Python文件都可以作为一个模块，模块的名字就是文件的名字。</p><p>比如有这样一个文件test.py，在test.py中定义了函数add</p><p>test.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(a,b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> a+b</span><br></pre></td></tr></table></figure><h3><span id="diao-yong-zi-ji-mo-kuai">调用自己模块</span><a href="#diao-yong-zi-ji-mo-kuai" class="header-anchor">#</a></h3><p>那么在其他文件中就可以先import test，然后通过test.add(a,b)来调用了，当然也可以通过from test import add来引入</p><p>my.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> test</span><br><span class="line">result = test.add(<span class="number">11</span>,<span class="number">22</span>)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><h3><span id="ce-shi-mo-kuai">测试模块</span><a href="#ce-shi-mo-kuai" class="header-anchor">#</a></h3><p>实际开中，当一个开发人员编写完一个模块后，为了让模块能够在项目中达到想要的效果，这个开发人员会自行在py文件中添加一些测试信息，例如：</p><p><code>test.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(a,b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> a+b</span><br><span class="line">result =add(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">print(<span class="string">"测试:1+2=%d"</span>%result)</span><br></pre></td></tr></table></figure><p>如果此时，在其他py文件中引入了此文件的话，想想看，测试的那段代码是否也会执行呢！</p><p>my.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> test</span><br><span class="line">print(test.add(<span class="number">1</span>,<span class="number">2</span>))</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/Library/Frameworks/Python.framework/Versions/3.6/bin/python3 /Users/jinzhong/PycharmProjects/hello3/demo/model/my.py</span><br><span class="line">测试:1+2=3</span><br><span class="line">3</span><br></pre></td></tr></table></figure><p>至此，可发现test.py中的测试代码，应该是单独执行test.py文件时才应该执行的，不应该是其他的文件中引用而执行</p><p>为了解决这个问题，python在执行一个文件时有个变量<code>__name__</code></p><p>更改test.py的内容，并且执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(a,b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> a+b</span><br><span class="line">result =add(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">print(__name__)</span><br><span class="line">print(<span class="string">"测试:1+2=%d"</span>%result)</span><br></pre></td></tr></table></figure><p>观察结果(test.py)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sh-3.2# python3 test.py</span><br><span class="line">__main__</span><br><span class="line">测试:1+2=3</span><br></pre></td></tr></table></figure><p>观察结果(my.py)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sh-3.2# python3 my.py</span><br><span class="line">test</span><br><span class="line">测试:1+2=3</span><br><span class="line">3</span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>可以根据<strong>name</strong>变量的结果能够判断出，是直接执行的python脚本还是被引入执行的，从而能够有选择性的执行测试代码</li></ul><p>更改test.py代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(a,b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> a+b</span><br><span class="line">result =add(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">print(__name__)</span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</span><br><span class="line">    print(<span class="string">"测试:1+2=%d"</span>%result)</span><br></pre></td></tr></table></figure><h2><span id="mo-kuai-zhong-de-all">模块中的__all__</span><a href="#mo-kuai-zhong-de-all" class="header-anchor">#</a></h2><h3><span id="mei-you-all-de-qing-kuang">没有__all__的情况</span><a href="#mei-you-all-de-qing-kuang" class="header-anchor">#</a></h3><p>test.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"add1..."</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add2</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"add2..."</span>)</span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</span><br><span class="line">    add()</span><br><span class="line">    add2()</span><br></pre></td></tr></table></figure><p>hello.py</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from test import *</span><br><span class="line">add1()</span><br><span class="line">add2()</span><br></pre></td></tr></table></figure><p>执行结果：</p><p>add1…</p><p>add2…</p><h3><span id="mo-kuai-zhong-bao-han-all">模块中包含__all__</span><a href="#mo-kuai-zhong-bao-han-all" class="header-anchor">#</a></h3><p>test.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">__all__=[<span class="string">"add1"</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"add1..."</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add2</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"add2..."</span>)</span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</span><br><span class="line">    add1()</span><br><span class="line">    add2()</span><br></pre></td></tr></table></figure><p>hello.py</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from test import *</span><br><span class="line">add1()</span><br><span class="line">add2()</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/Library/Frameworks/Python.framework/Versions/3.6/bin/python3 /Users/jinzhong/PycharmProjects/hello3/demo/model/hello.py</span><br><span class="line">add1...</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;/Users/jinzhong/PycharmProjects/hello3/demo/model/hello.py&quot;, line 3, in &lt;module&gt;</span><br><span class="line">    add2()</span><br><span class="line">NameError: name &apos;add2&apos; is not defined</span><br><span class="line">Process finished with exit code 1</span><br></pre></td></tr></table></figure><h3><span id="zong-jie">总结</span><a href="#zong-jie" class="header-anchor">#</a></h3><ul><li>如果一个文件中有__all__变量，那么也就意味着只有这个变量中的元素，才会被from xxx import *时导入</li></ul><h2><span id="python-zhong-de-bao">python中的包</span><a href="#python-zhong-de-bao" class="header-anchor">#</a></h2><h2><span id="yin-ru-bao">引入包</span><a href="#yin-ru-bao" class="header-anchor">#</a></h2><p><strong>将功能相同的包放在同一个文件夹下</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">sh-3.2# pwd</span><br><span class="line">/Users/jinzhong/PycharmProjects/hello3/包</span><br><span class="line">sh-3.2# tree</span><br><span class="line">.</span><br><span class="line">├── __init__.py</span><br><span class="line">└── vo</span><br><span class="line">    ├── __init__.py</span><br><span class="line">    ├── __pycache__</span><br><span class="line">    │   ├── __init__.cpython-36.pyc</span><br><span class="line">    │   └── dog.cpython-36.pyc</span><br><span class="line">    ├── cat.py</span><br><span class="line">    └── dog.py</span><br><span class="line"></span><br><span class="line">2 directories, 6 files</span><br></pre></td></tr></table></figure><p><strong>使用import 文件.模块 的方式导入</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">43</span>]: pwd</span><br><span class="line">Out[<span class="number">43</span>]: <span class="string">'/Users/jinzhong/PycharmProjects/hello3/包'</span></span><br><span class="line">In [<span class="number">44</span>]: ls</span><br><span class="line">__init__.py  vo/</span><br><span class="line">In [<span class="number">45</span>]: <span class="keyword">import</span> vo.dog</span><br><span class="line">In [<span class="number">46</span>]: dog.add1()</span><br><span class="line">add1..</span><br><span class="line">In [<span class="number">47</span>]: dog.add2()</span><br><span class="line">add2..</span><br></pre></td></tr></table></figure><p><strong>使用from 文件夹 import 模块 的方式导入</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">8</span>]: <span class="keyword">from</span> vo <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: dog.add1()</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">NameError                                 Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input<span class="number">-9</span><span class="number">-2472712858</span>f4&gt; <span class="keyword">in</span> &lt;module&gt;()</span><br><span class="line">----&gt; 1 dog.add1()</span><br><span class="line"></span><br><span class="line">NameError: name <span class="string">'dog'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]: dog.add2()</span><br></pre></td></tr></table></figure><p><strong>在__init__.py文件中写入代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__all__=[<span class="string">"dog"</span>]</span><br></pre></td></tr></table></figure><p>再次进行测试</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: <span class="keyword">from</span> vo <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: dog.add1()</span><br><span class="line">add1..</span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]: dog.add2()</span><br><span class="line">add2..</span><br><span class="line"></span><br><span class="line">In [<span class="number">11</span>]: cat.add3()</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">NameError                                 Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input<span class="number">-11</span>-e39bd0c9b05b&gt; <span class="keyword">in</span> &lt;module&gt;()</span><br><span class="line">----&gt; 1 cat.add3()</span><br><span class="line"></span><br><span class="line">NameError: name <span class="string">'cat'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br></pre></td></tr></table></figure><p><strong>总结1：</strong></p><ul><li>包将有联系的模块组织在一起，即放到同一个文件夹下，并且在这个文件夹创建一个名字为<code>__init__.py</code> 文件，那么这个文件夹就称之为<code>包</code></li><li>有效避免模块名称冲突问题，让应用组织结构更加清晰</li></ul><h2><span id="init-wen-jian-de-zuo-yong">__init__文件的作用</span><a href="#init-wen-jian-de-zuo-yong" class="header-anchor">#</a></h2><p>__init__.py控制着包的导入行为</p><blockquote><p>__init__.py为空:仅仅是把这个包导入，不回导入包中的模块</p><p><strong>all__:在</strong>init__.py文件中，定义一个__all__变量，它控制着 from 包名 import *时导入的模块</p><p>可以在这个文件中编写语句，当导入时，这些语句就会被执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;__all__=[&quot;dog&quot;]</span><br><span class="line">&gt;print(&quot;******&quot;)</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>继续执行导入操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;In [<span class="number">7</span>]: <span class="keyword">from</span> vo <span class="keyword">import</span> *</span><br><span class="line">&gt;******</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;toc&quot;&gt;

&lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#mo-kuai&quot;&gt;模块&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#mo-kuai-jie-shao&quot;&gt;模块介绍&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#python-zho
      
    
    </summary>
    
      <category term="Python" scheme="http://baofengketang.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://baofengketang.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python基础(十一)</title>
    <link href="http://baofengketang.com/2018/05/09/python_base/python_11/"/>
    <id>http://baofengketang.com/2018/05/09/python_base/python_11/</id>
    <published>2018-05-09T01:35:58.000Z</published>
    <updated>2018-05-09T06:43:37.000Z</updated>
    
    <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#yi-chang">异常</a><ul><li><a href="#yi-chang-jian-jie">异常简介</a></li><li><a href="#bu-huo-yi-chang">捕获异常</a><ul><li><a href="#bu-huo-yi-chang-try-exception">捕获异常try … exception</a></li><li><a href="#exception-bu-huo-duo-ge-yi-chang">exception捕获多个异常</a></li><li><a href="#bu-huo-suo-you-yi-chang">捕获所有异常</a></li><li><a href="#else">else</a></li><li><a href="#try-finally">try…finally…</a></li></ul></li><li><a href="#yi-chang-de-chuan-di">异常的传递</a><ul><li><a href="#try-qian-tao-zhong">try嵌套中</a></li><li><a href="#han-shu-qian-tao-diao-yong-zhong">函数嵌套调用中</a></li></ul></li><li><a href="#pao-chu-zi-ding-yi-de-yi-chang">抛出自定义的异常</a></li><li><a href="#yi-chang-chu-li-zhong-pao-chu-yi-chang">异常处理中抛出异常</a></li></ul></li></ul><!-- tocstop --></div><h1><span id="yi-chang">异常</span><a href="#yi-chang" class="header-anchor">#</a></h1><h2><span id="yi-chang-jian-jie">异常简介</span><a href="#yi-chang-jian-jie" class="header-anchor">#</a></h2><p>看下面的例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"*"</span>*<span class="number">50</span>)</span><br><span class="line">f=open(<span class="string">"hello1.txt"</span>)＃该文件不存在</span><br><span class="line">print(<span class="string">"*"</span>*<span class="number">50</span>)</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/Users/jinzhong/PycharmProjects/hello3/venv/bin/python /Users/jinzhong/PycharmProjects/hello3/demo/test20.py</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">**************************************************</span><br><span class="line">  File &quot;/Users/jinzhong/PycharmProjects/hello3/demo/test20.py&quot;, line 2, in &lt;module&gt;</span><br><span class="line">    f=open(&quot;hello1.txt&quot;)</span><br><span class="line">FileNotFoundError: [Errno 2] No such file or directory: &apos;hello1.txt&apos;</span><br><span class="line">Process finished with exit code 1</span><br></pre></td></tr></table></figure><p>说明:</p><blockquote><p>打开一个不存在的文件123.txt，当找不到123.txt 文件时，就会抛出给我们一个IOError类型的错误，No such file or directory：123.txt （没有123.txt这样的文件或目录）</p></blockquote><p><strong>异常:</strong></p><blockquote><p>当Python检测到一个错误时，解释器就无法继续执行了，反而出现了一些错误的提示，这就是所谓的”异常”</p></blockquote><h2><span id="bu-huo-yi-chang">捕获异常</span><a href="#bu-huo-yi-chang" class="header-anchor">#</a></h2><h3><span id="bu-huo-yi-chang-try-exception">捕获异常try … exception</span><a href="#bu-huo-yi-chang-try-exception" class="header-anchor">#</a></h3><p>看如下示例:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(<span class="string">"*"</span>*<span class="number">50</span>)</span><br><span class="line">    f=open(<span class="string">"hello1.txt"</span>)</span><br><span class="line">    print(<span class="string">"*"</span>*<span class="number">50</span>)</span><br><span class="line"><span class="keyword">except</span> IOError:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/Users/jinzhong/PycharmProjects/hello3/venv/bin/python /Users/jinzhong/PycharmProjects/hello3/demo/test20.py</span><br><span class="line">**************************************************</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><p>说明:</p><ul><li>此程序看不到任何错误，因为用except 捕获到了IOError异常，并添加了处理的方法</li><li>pass 表示实现了相应的实现，但什么也不做；如果把pass改为print语句，那么就会输出其他信息</li></ul><p>小总结:</p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1525830541.png?imageMogr2/thumbnail/!70p" alt=""></p><ul><li>把可能出现问题的代码，放在try中</li><li>把处理异常的代码，放在except中</li></ul><h3><span id="exception-bu-huo-duo-ge-yi-chang">exception捕获多个异常</span><a href="#exception-bu-huo-duo-ge-yi-chang" class="header-anchor">#</a></h3><p>看下面的案例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(<span class="string">"*"</span>*<span class="number">50</span>)</span><br><span class="line">    f=open(<span class="string">"hello.txt"</span>)</span><br><span class="line">    print(<span class="string">"*"</span>*<span class="number">50</span>)</span><br><span class="line">    print(num)</span><br><span class="line"><span class="keyword">except</span> IOError:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/Users/jinzhong/PycharmProjects/hello3/venv/bin/python /Users/jinzhong/PycharmProjects/hello3/demo/test20.py</span><br><span class="line">**************************************************</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">**************************************************</span><br><span class="line">  File &quot;/Users/jinzhong/PycharmProjects/hello3/demo/test20.py&quot;, line 5, in &lt;module&gt;</span><br><span class="line">    print(num)</span><br><span class="line">NameError: name &apos;num&apos; is not defined</span><br><span class="line">Process finished with exit code 1</span><br></pre></td></tr></table></figure><p>想一想:</p><blockquote><p>上例程序，已经使用except来捕获异常了，为什么还会看到错误的信息提示？</p></blockquote><p>答:</p><blockquote><p>except捕获的错误类型是IOError，而此时程序产生的异常为 NameError ，所以except没有生效</p></blockquote><p>修改后的代码为:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(<span class="string">"*"</span>*<span class="number">50</span>)</span><br><span class="line">    f=open(<span class="string">"hello.txt"</span>)</span><br><span class="line">    print(<span class="string">"*"</span>*<span class="number">50</span>)</span><br><span class="line">    print(num)</span><br><span class="line"><span class="keyword">except</span> IOError:</span><br><span class="line">    print(<span class="string">"产生了io异常"</span>)</span><br><span class="line"><span class="keyword">except</span> NameError:</span><br><span class="line">    print(<span class="string">"对不起，变量未定义"</span>)</span><br></pre></td></tr></table></figure><p>实际开发中，捕获多个异常方式也可以通过如下代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(<span class="string">"*"</span>*<span class="number">50</span>)</span><br><span class="line">    f=open(<span class="string">"hello.txt"</span>)</span><br><span class="line">    print(<span class="string">"*"</span>*<span class="number">50</span>)</span><br><span class="line">    print(num)</span><br><span class="line"><span class="keyword">except</span> (IOError,NameError) <span class="keyword">as</span> result: <span class="comment">#result可以保存异常的原始信息</span></span><br><span class="line">    print(result)</span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><blockquote><p>当捕获多个异常时，可以把要捕获的异常的名字，放到except 后，并使用元组的方式仅进行存储</p></blockquote><h3><span id="bu-huo-suo-you-yi-chang">捕获所有异常</span><a href="#bu-huo-suo-you-yi-chang" class="header-anchor">#</a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(<span class="string">"*"</span>*<span class="number">50</span>)</span><br><span class="line">    f=open(<span class="string">"hello.txt"</span>)</span><br><span class="line">    print(<span class="string">"*"</span>*<span class="number">50</span>)</span><br><span class="line">    print(num)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> result:</span><br><span class="line">    print(result)</span><br></pre></td></tr></table></figure><h3><span id="else">else</span><a href="#else" class="header-anchor">#</a></h3><p>在if中，它的作用是当条件不满足时执行的实行；同样在try…except…中也是如此，即如果没有捕获到异常，那么就执行else中的事情</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    num = <span class="number">100</span></span><br><span class="line">    print(num)</span><br><span class="line"><span class="keyword">except</span> NameError <span class="keyword">as</span> errorMsg:</span><br><span class="line">    print(<span class="string">'产生错误了:%s'</span>%errorMsg)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'没有捕获到异常，真高兴'</span>)</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/Users/jinzhong/PycharmProjects/hello3/venv/bin/python /Users/jinzhong/PycharmProjects/hello3/demo/test20.py</span><br><span class="line"><span class="number">100</span></span><br><span class="line">没有捕获到异常，真高兴</span><br><span class="line">Process finished <span class="keyword">with</span> exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><h3><span id="try-finally">try…finally…</span><a href="#try-finally" class="header-anchor">#</a></h3><p>try…finally…语句用来表达这样的情况：</p><blockquote><p>在程序中，如果一个段代码必须要执行，即无论异常是否产生都要执行，那么此时就需要使用finally。 比如文件关闭，释放锁，把数据库连接返还给连接池等</p></blockquote><p>demo(终端演示):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f = open(<span class="string">'hello.txt'</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            content = f.readline()</span><br><span class="line">            <span class="keyword">if</span> len(content) == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            time.sleep(<span class="number">2</span>)</span><br><span class="line">            print(content)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="comment">#如果在读取文件的过程中，产生了异常，那么就会捕获到</span></span><br><span class="line">        <span class="comment">#比如 按下了 ctrl+c</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        f.close()</span><br><span class="line">        print(<span class="string">'关闭文件'</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">"没有这个文件"</span>)</span><br></pre></td></tr></table></figure><p>说明:</p><blockquote><p>test.txt文件中每一行数据打印，但是我有意在每打印一行之前用time.sleep方法暂停2秒钟。这样做的原因是让程序运行得慢一些。在程序运行的时候，按Ctrl+c中断（取消）程序。</p><p>我们可以观察到KeyboardInterrupt异常被触发，程序退出。但是在程序退出之前，finally从句仍然被执行，把文件关闭。</p></blockquote><h2><span id="yi-chang-de-chuan-di">异常的传递</span><a href="#yi-chang-de-chuan-di" class="header-anchor">#</a></h2><h3><span id="try-qian-tao-zhong">try嵌套中</span><a href="#try-qian-tao-zhong" class="header-anchor">#</a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f = open(<span class="string">'test.txt'</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            content = f.readline()</span><br><span class="line">            <span class="keyword">if</span> len(content) == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            time.sleep(<span class="number">2</span>)</span><br><span class="line">            print(content)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        f.close()</span><br><span class="line">        print(<span class="string">'关闭文件'</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">"没有这个文件"</span>)</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">26</span>]: <span class="keyword">import</span> time</span><br><span class="line">    ...: <span class="keyword">try</span>:</span><br><span class="line">    ...:     f = open(<span class="string">'test.txt'</span>)</span><br><span class="line">    ...:     <span class="keyword">try</span>:</span><br><span class="line">    ...:         <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    ...:             content = f.readline()</span><br><span class="line">    ...:             <span class="keyword">if</span> len(content) == <span class="number">0</span>:</span><br><span class="line">    ...:                 <span class="keyword">break</span></span><br><span class="line">    ...:             time.sleep(<span class="number">2</span>)</span><br><span class="line">    ...:             print(content)</span><br><span class="line">    ...:     <span class="keyword">finally</span>:</span><br><span class="line">    ...:         f.close()</span><br><span class="line">    ...:         print(<span class="string">'关闭文件'</span>)</span><br><span class="line">    ...: <span class="keyword">except</span>:</span><br><span class="line">    ...:     print(<span class="string">"没有这个文件"</span>)</span><br><span class="line">    ...: <span class="keyword">finally</span>:</span><br><span class="line">    ...:     print(<span class="string">"最后的finally"</span>)</span><br><span class="line">    ...:     </span><br><span class="line">xxxxxxx---&gt;这是test.txt文件中读取到信息</span><br><span class="line">^C关闭文件</span><br><span class="line">没有这个文件</span><br><span class="line">最后的<span class="keyword">finally</span></span><br></pre></td></tr></table></figure><h3><span id="han-shu-qian-tao-diao-yong-zhong">函数嵌套调用中</span><a href="#han-shu-qian-tao-diao-yong-zhong" class="header-anchor">#</a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"----test1-1----"</span>)</span><br><span class="line">    print(num)</span><br><span class="line">    print(<span class="string">"----test1-2----"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test2</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"----test2-1----"</span>)</span><br><span class="line">    test1()</span><br><span class="line">    print(<span class="string">"----test2-2----"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test3</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        print(<span class="string">"----test3-1----"</span>)</span><br><span class="line">        test1()</span><br><span class="line">        print(<span class="string">"----test3-2----"</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> result:</span><br><span class="line">        print(<span class="string">"捕获到了异常，信息是:%s"</span>%result)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"----test3-2----"</span>)</span><br><span class="line">test3()</span><br><span class="line">print(<span class="string">"------华丽的分割线-----"</span>)</span><br><span class="line">test2()</span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>如果try嵌套，那么如果里面的try没有捕获到这个异常，那么外面的try会接收到这个异常，然后进行处理，如果外边的try依然没有捕获到，那么再进行传递。。。</li><li>如果一个异常是在一个函数中产生的，例如函数A—-&gt;函数B—-&gt;函数C,而异常是在函数C中产生的，那么如果函数C中没有对这个异常进行处理，那么这个异常会传递到函数B中，如果函数B有异常处理那么就会按照函数B的处理方式进行执行；如果函数B也没有异常处理，那么这个异常会继续传递，以此类推。。。如果所有的函数都没有处理，那么此时就会进行异常的默认处理，即通常见到的那样</li><li>注意观察上图中，当调用test3函数时，在test1函数内部产生了异常，此异常被传递到test3函数中完成了异常处理，而当异常处理完后，并没有返回到函数test1中进行执行，而是在函数test3中继续执行</li></ul><h2><span id="pao-chu-zi-ding-yi-de-yi-chang">抛出自定义的异常</span><a href="#pao-chu-zi-ding-yi-de-yi-chang" class="header-anchor">#</a></h2><p>你可以用raise语句来引发一个异常。异常/错误对象必须有一个名字，且它们应是Error或Exception类的子类</p><p>下面是一个引发异常的例子:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShortInputException</span><span class="params">(Exception)</span>:</span></span><br><span class="line">    <span class="string">'''自定义的异常类'''</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, length, atleast)</span>:</span></span><br><span class="line">        <span class="comment">#super().__init__()</span></span><br><span class="line">        self.length = length</span><br><span class="line">        self.atleast = atleast</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        s = input(<span class="string">'请输入 --&gt; '</span>)</span><br><span class="line">        <span class="keyword">if</span> len(s) &lt; <span class="number">3</span>:</span><br><span class="line">            <span class="comment"># raise引发一个你定义的异常</span></span><br><span class="line">            <span class="keyword">raise</span> ShortInputException(len(s), <span class="number">3</span>)</span><br><span class="line">    <span class="keyword">except</span> ShortInputException <span class="keyword">as</span> result:<span class="comment">#x这个变量被绑定到了错误的实例</span></span><br><span class="line">        print(<span class="string">'ShortInputException: 输入的长度是 %d,长度至少应是 %d'</span>% (result.length, result.atleast))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'没有异常发生.'</span>)</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">请输入 --&gt; hello</span><br><span class="line">没有异常发生.</span><br><span class="line">请输入 --&gt; t</span><br><span class="line">ShortInputException: 输入的长度是 1,长度至少应是 3</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><p><strong>以上程序中，关于代码<code>#super().__init__()</code>的说明</strong></p><blockquote><p>这一行代码，可以调用也可以不调用，建议调用，因为<code>__init__</code>方法往往是用来对创建完的对象进行初始化工作，如果在子类中重写了父类的<code>__init__</code>方法，即意味着父类中的很多初始化工作没有做，这样就不保证程序的稳定了，所以在以后的开发中，如果重写了父类的<code>__init__</code>方法，最好是先调用父类的这个方法，然后再添加自己的功能</p></blockquote><h2><span id="yi-chang-chu-li-zhong-pao-chu-yi-chang">异常处理中抛出异常</span><a href="#yi-chang-chu-li-zhong-pao-chu-yi-chang" class="header-anchor">#</a></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, switch)</span>:</span></span><br><span class="line">        self.switch = switch <span class="comment">#开关</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">calc</span><span class="params">(self, a, b)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> a/b</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> result:</span><br><span class="line">            <span class="keyword">if</span> self.switch:</span><br><span class="line">                print(<span class="string">"捕获开启，已经捕获到了异常，信息如下:"</span>)</span><br><span class="line">                print(result)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment">#重新抛出这个异常，此时就不会被这个异常处理给捕获到，从而触发默认的异常处理</span></span><br><span class="line">                <span class="keyword">raise</span></span><br><span class="line">a = Test(<span class="keyword">True</span>) <span class="comment">## 处理异常</span></span><br><span class="line">a.calc(<span class="number">11</span>,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"----------------------华丽的分割线----------------"</span>)</span><br><span class="line"></span><br><span class="line">a.switch = <span class="keyword">False</span> <span class="comment">## 不处理异常</span></span><br><span class="line">a.calc(<span class="number">11</span>,<span class="number">0</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;toc&quot;&gt;

&lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#yi-chang&quot;&gt;异常&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#yi-chang-jian-jie&quot;&gt;异常简介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#bu-huo-
      
    
    </summary>
    
      <category term="Python" scheme="http://baofengketang.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://baofengketang.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python基础(十)</title>
    <link href="http://baofengketang.com/2018/05/08/python_base/python_10/"/>
    <id>http://baofengketang.com/2018/05/08/python_base/python_10/</id>
    <published>2018-05-08T15:13:20.000Z</published>
    <updated>2018-05-09T01:34:45.000Z</updated>
    
    <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#mian-xiang-dui-xiang-san">面向对象（三）</a><ul><li><a href="#new-fang-fa">__new__方法</a></li><li><a href="#dan-li-mo-shi">单例模式</a></li></ul></li></ul><!-- tocstop --></div><h1><span id="mian-xiang-dui-xiang-san">面向对象（三）</span><a href="#mian-xiang-dui-xiang-san" class="header-anchor">#</a></h1><h2><span id="new-fang-fa">__new__方法</span><a href="#new-fang-fa" class="header-anchor">#</a></h2><p><strong><strong>new__和</strong>init__的作用</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"对象初始化"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls)</span>:</span></span><br><span class="line">        print(<span class="string">"对象创建"</span>)</span><br><span class="line">        <span class="keyword">return</span> object.__new__(cls)</span><br><span class="line"></span><br><span class="line">dog=Dog()</span><br></pre></td></tr></table></figure><p><strong>总结：</strong></p><ul><li><code>__new__</code>至少要有一个参数cls，代表要实例化的类，此参数在实例化时由Python解释器自动提供</li><li><code>__new__</code>必须要有返回值，返回实例化出来的实例，这点在自己实现<code>__new__</code>时要特别注意，可以return父类<code>__new__</code>出来的实例，或者直接是object的<code>__new__</code>出来的实例</li><li><code>__init__</code>有一个参数self，就是这个<code>__new__</code>返回的实例，<code>__init__</code>在<code>__new__</code>的基础上可以完成一些其它初始化的动作，<code>__init__</code>不需要返回值</li><li>我们可以将类比作制造商，<code>__new__</code>方法就是前期的原材料购买环节，<code>__init__</code>方法就是在有原材料的基础上，加工，初始化商品环节</li></ul><p><strong>注意：</strong></p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1525794107.png?imageMogr2/thumbnail/!70p" alt=""></p><h2><span id="dan-li-mo-shi">单例模式</span><a href="#dan-li-mo-shi" class="header-anchor">#</a></h2><p><strong>1.单例是什么</strong></p><p>举个常见的单例模式例子，我们日常使用的电脑上都有一个回收站，在整个操作系统中，回收站只能有一个实例，整个系统都使用这个唯一的实例，而且回收站自行提供自己的实例。因此回收站是单例模式的应用。</p><p>确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例，这个类称为单例类，单例模式是一种对象创建型模式。</p><p><strong>2.创建单例模式</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 实例化一个单例</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span><span class="params">(object)</span>:</span></span><br><span class="line">    __instance = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, age, name)</span>:</span></span><br><span class="line">        <span class="comment">#如果类数字能够__instance没有或者没有赋值</span></span><br><span class="line">        <span class="comment">#那么就创建一个对象，并且赋值为这个对象的引用，保证下次调用这个方法时</span></span><br><span class="line">        <span class="comment">#能够知道之前已经创建过对象了，这样就保证了只有1个对象</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> cls.__instance:</span><br><span class="line">            cls.__instance = object.__new__(cls)</span><br><span class="line">        <span class="keyword">return</span> cls.__instance</span><br><span class="line"></span><br><span class="line">a = Singleton(<span class="number">18</span>, <span class="string">"zhangsan"</span>)</span><br><span class="line">b = Singleton(<span class="number">8</span>, <span class="string">"lisi"</span>)</span><br><span class="line"></span><br><span class="line">print(id(a))</span><br><span class="line">print(id(b))</span><br><span class="line"></span><br><span class="line">a.age = <span class="number">19</span> <span class="comment">#给a指向的对象添加一个属性</span></span><br><span class="line">print(b.age)<span class="comment">#获取b指向的对象的age属性</span></span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/Users/jinzhong/PycharmProjects/hello3/venv/bin/python /Users/jinzhong/PycharmProjects/hello3/demo/test19.py</span><br><span class="line"><span class="number">4369269256</span></span><br><span class="line"><span class="number">4369269256</span></span><br><span class="line"><span class="number">19</span></span><br><span class="line">Process finished <span class="keyword">with</span> exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><p><strong>3.创建单例时，只执行1次__init__方法</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 实例化一个单例</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span><span class="params">(object)</span>:</span></span><br><span class="line">    __instance = <span class="keyword">None</span></span><br><span class="line">    __first_init = <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, age, name)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> cls.__instance:</span><br><span class="line">            cls.__instance = object.__new__(cls)</span><br><span class="line">        <span class="keyword">return</span> cls.__instance</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, age, name)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.__first_init==<span class="keyword">False</span>:</span><br><span class="line">            self.age = age</span><br><span class="line">            self.name = name</span><br><span class="line">            Singleton.__first_init = <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">a = Singleton(<span class="number">18</span>, <span class="string">"zhangsan"</span>)</span><br><span class="line">b = Singleton(<span class="number">8</span>, <span class="string">"lisi"</span>)</span><br><span class="line"></span><br><span class="line">print(id(a))</span><br><span class="line">print(id(b))</span><br><span class="line">print(a.age)</span><br><span class="line">print(b.age)</span><br><span class="line"></span><br><span class="line">a.age = <span class="number">19</span></span><br><span class="line">print(b.age)</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/Users/jinzhong/PycharmProjects/hello3/venv/bin/python /Users/jinzhong/PycharmProjects/hello3/demo/test19.py</span><br><span class="line"><span class="number">4503540232</span></span><br><span class="line"><span class="number">4503540232</span></span><br><span class="line"><span class="number">18</span></span><br><span class="line"><span class="number">18</span></span><br><span class="line"><span class="number">19</span></span><br><span class="line">Process finished <span class="keyword">with</span> exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;toc&quot;&gt;

&lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#mian-xiang-dui-xiang-san&quot;&gt;面向对象（三）&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#new-fang-fa&quot;&gt;__new__方法&lt;/a&gt;&lt;/li&gt;
&lt;
      
    
    </summary>
    
      <category term="Python" scheme="http://baofengketang.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://baofengketang.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python基础(九)</title>
    <link href="http://baofengketang.com/2018/05/08/python_base/python_09/"/>
    <id>http://baofengketang.com/2018/05/08/python_base/python_09/</id>
    <published>2018-05-08T13:11:50.000Z</published>
    <updated>2018-05-08T15:13:07.000Z</updated>
    
    <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#mian-xiang-dui-xiang-she-ji">面向对象设计</a><ul><li><a href="#she-ji-lei">设计类</a><ul><li><a href="#she-ji-yi-ge-mai-che-de-4s-dian">设计一个买车的4s店</a></li><li><a href="#she-ji-yi-ge-mai-bao-ma-che-de-4s-dian">设计一个买宝马车的4s店</a></li></ul></li><li><a href="#jian-dan-gong-han-mo-shi">简单工厂模式</a><ul><li><a href="#shi-yong-han-shu-lai-jie-jue">使用函数来解决</a></li><li><a href="#shi-yong-lei-lai-shi-xian">使用类来实现</a></li></ul></li><li><a href="#gong-han-fang-fa-mo-shi">工厂方法模式</a></li></ul></li></ul><!-- tocstop --></div><h1><span id="mian-xiang-dui-xiang-she-ji">面向对象设计</span><a href="#mian-xiang-dui-xiang-she-ji" class="header-anchor">#</a></h1><h2><span id="she-ji-lei">设计类</span><a href="#she-ji-lei" class="header-anchor">#</a></h2><h3><span id="she-ji-yi-ge-mai-che-de-4s-dian">设计一个买车的4s店</span><a href="#she-ji-yi-ge-mai-che-de-4s-dian" class="header-anchor">#</a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义一个车类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>:</span></span><br><span class="line">    <span class="comment"># 定义车的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">move</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"车在移动"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">stop</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"停车"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个汽车cs店类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Store</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">order</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'产生一辆汽车'</span>)</span><br><span class="line">        <span class="keyword">return</span> Car()</span><br><span class="line"></span><br><span class="line">store=Store()</span><br><span class="line">car =store.order()</span><br><span class="line">car.move()</span><br><span class="line">car.stop()</span><br></pre></td></tr></table></figure><p><strong>说明</strong></p><blockquote><p>上面的4s店，只能销售那一种类型的车</p><p>如果这个是个销售宝马品牌的车，比如550、x6,x1等，该怎样做呢？</p></blockquote><h3><span id="she-ji-yi-ge-mai-bao-ma-che-de-4s-dian">设计一个买宝马车的4s店</span><a href="#she-ji-yi-ge-mai-bao-ma-che-de-4s-dian" class="header-anchor">#</a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义一个车类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>:</span></span><br><span class="line">    <span class="comment"># 定义车的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">move</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"车在移动"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">stop</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"停车"</span>)</span><br><span class="line"><span class="comment">#定义三个子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bwm550</span><span class="params">(Car)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"550被领走了"</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X1</span><span class="params">(Car)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"x1被领走了"</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X6</span><span class="params">(Car)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"x6被领走了"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个汽车cs店类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Store</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">order</span><span class="params">(self,type)</span>:</span></span><br><span class="line">        print(<span class="string">'产生一辆汽车'</span>)</span><br><span class="line">        <span class="keyword">if</span> type==<span class="string">"550"</span>:</span><br><span class="line">            <span class="keyword">return</span> Bwm550()</span><br><span class="line">        <span class="keyword">elif</span> type ==<span class="string">"X1"</span>:</span><br><span class="line">            <span class="keyword">return</span> X1()</span><br><span class="line">        <span class="keyword">elif</span> type ==<span class="string">"X6"</span>:</span><br><span class="line">            <span class="keyword">return</span> X6()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> Car()</span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">store=Store()</span><br><span class="line">car1 =store.order(<span class="string">"550"</span>)</span><br><span class="line">print(car1)</span><br><span class="line">car2 =store.order(<span class="string">"X6"</span>)</span><br><span class="line">print(car2)</span><br><span class="line">car3 = store.order(<span class="string">"X1"</span>)</span><br><span class="line">print(car3)</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/Users/jinzhong/PycharmProjects/hello3/venv/bin/python /Users/jinzhong/PycharmProjects/hello3/demo/test17.py</span><br><span class="line">产生一辆汽车</span><br><span class="line">550被领走了</span><br><span class="line">产生一辆汽车</span><br><span class="line">x6被领走了</span><br><span class="line">产生一辆汽车</span><br><span class="line">x1被领走了</span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><blockquote><p>这样做，不太好，因为当宝马又生产一种新类型的车时，又得在Store类中修改，有没有好的解决办法呢？</p></blockquote><h2><span id="jian-dan-gong-han-mo-shi">简单工厂模式</span><a href="#jian-dan-gong-han-mo-shi" class="header-anchor">#</a></h2><h3><span id="shi-yong-han-shu-lai-jie-jue">使用函数来解决</span><a href="#shi-yong-han-shu-lai-jie-jue" class="header-anchor">#</a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义一个车类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>:</span></span><br><span class="line">    <span class="comment"># 定义车的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">move</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"车在移动"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">stop</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"停车"</span>)</span><br><span class="line"><span class="comment">#定义三个子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bwm550</span><span class="params">(Car)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"550被领走了"</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X1</span><span class="params">(Car)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"x1被领走了"</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X6</span><span class="params">(Car)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"x6被领走了"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个汽车cs店类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Store</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">order</span><span class="params">(self,type)</span>:</span></span><br><span class="line">        print(<span class="string">'产生一辆汽车'</span>)</span><br><span class="line">        <span class="keyword">return</span> createCar(type)</span><br><span class="line"><span class="comment"># 定义一个函数用来生成具体的对象</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createCar</span><span class="params">(type)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> type == <span class="string">"550"</span>:</span><br><span class="line">        <span class="keyword">return</span> Bwm550()</span><br><span class="line">    <span class="keyword">elif</span> type == <span class="string">"X1"</span>:</span><br><span class="line">        <span class="keyword">return</span> X1()</span><br><span class="line">    <span class="keyword">elif</span> type == <span class="string">"X6"</span>:</span><br><span class="line">        <span class="keyword">return</span> X6()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> Car()</span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">store=Store()</span><br><span class="line">car1 =store.order(<span class="string">"550"</span>)</span><br><span class="line">print(car1)</span><br><span class="line">car2 =store.order(<span class="string">"X6"</span>)</span><br><span class="line">print(car2)</span><br><span class="line">car3 = store.order(<span class="string">"X1"</span>)</span><br><span class="line">print(car3)</span><br></pre></td></tr></table></figure><h3><span id="shi-yong-lei-lai-shi-xian">使用类来实现</span><a href="#shi-yong-lei-lai-shi-xian" class="header-anchor">#</a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义一个车类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>:</span></span><br><span class="line">    <span class="comment"># 定义车的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">move</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"车在移动"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">stop</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"停车"</span>)</span><br><span class="line"><span class="comment">#定义三个子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bwm550</span><span class="params">(Car)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"550被领走了"</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X1</span><span class="params">(Car)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"x1被领走了"</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X6</span><span class="params">(Car)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"x6被领走了"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个汽车cs店类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Store</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">order</span><span class="params">(self,type)</span>:</span></span><br><span class="line">        print(<span class="string">'产生一辆汽车'</span>)</span><br><span class="line">        <span class="keyword">return</span> Factory.createCar(type)</span><br><span class="line"><span class="comment"># 定义一个工厂类，通过工厂类的静态方法产生对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Factory</span>:</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">createCar</span><span class="params">(type)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> type == <span class="string">"550"</span>:</span><br><span class="line">            <span class="keyword">return</span> Bwm550()</span><br><span class="line">        <span class="keyword">elif</span> type == <span class="string">"X1"</span>:</span><br><span class="line">            <span class="keyword">return</span> X1()</span><br><span class="line">        <span class="keyword">elif</span> type == <span class="string">"X6"</span>:</span><br><span class="line">            <span class="keyword">return</span> X6()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> Car()</span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">store=Store()</span><br><span class="line">car1 =store.order(<span class="string">"550"</span>)</span><br><span class="line">print(car1)</span><br><span class="line">car2 =store.order(<span class="string">"X6"</span>)</span><br><span class="line">print(car2)</span><br><span class="line">car3 = store.order(<span class="string">"X1"</span>)</span><br><span class="line">print(car3)</span><br></pre></td></tr></table></figure><blockquote><p>咋一看来，好像只是把生产环节重新创建了一个类，这确实比较像是一种编程习惯，此种解决方式被称作简单工厂模式</p><p>工厂函数、工厂类对具体的生成环节进行了封装，这样有利于代码的后需扩展，即把功能划分的更具体，4s店只负责销售，汽车厂只负责制造</p></blockquote><h2><span id="gong-han-fang-fa-mo-shi">工厂方法模式</span><a href="#gong-han-fang-fa-mo-shi" class="header-anchor">#</a></h2><p>当买车时，我们发现4s店其实很多，现在要求在系统里在增加一个斯柯达的4s店，我们应该如何考虑呢</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义一个车类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>:</span></span><br><span class="line">    <span class="comment"># 定义车的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">move</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"车在移动"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">stop</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"停车"</span>)</span><br><span class="line"><span class="comment">#定义三个子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bwm550</span><span class="params">(Car)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"550被领走了"</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X1</span><span class="params">(Car)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"x1被领走了"</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X6</span><span class="params">(Car)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"x6被领走了"</span></span><br><span class="line"><span class="comment"># 定义斯柯达汽车类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MR</span><span class="params">(Car)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"明锐被领走了"</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JR</span><span class="params">(Car)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"晶锐被领走类"</span></span><br><span class="line"><span class="comment"># 定义4s店的父类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Store</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getCar</span><span class="params">(self,type)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span>;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">order</span><span class="params">(self,type)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.getCar(type);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个宝马4s店类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BwmStore</span><span class="params">(Store)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getCar</span><span class="params">(self,type)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> BwmFactory.createCar(type);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SkdStore</span><span class="params">(Store)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getCar</span><span class="params">(self,type)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> SkdFactory.createCar(type);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SkdFactory</span>:</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">createCar</span><span class="params">(type)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> type==<span class="string">"明锐"</span>:</span><br><span class="line">            <span class="keyword">return</span> MR();</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> JR();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个函数用来生成具体的对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BwmFactory</span>:</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">createCar</span><span class="params">(type)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> type == <span class="string">"550"</span>:</span><br><span class="line">            <span class="keyword">return</span> Bwm550()</span><br><span class="line">        <span class="keyword">elif</span> type == <span class="string">"X1"</span>:</span><br><span class="line">            <span class="keyword">return</span> X1()</span><br><span class="line">        <span class="keyword">elif</span> type == <span class="string">"X6"</span>:</span><br><span class="line">            <span class="keyword">return</span> X6()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> Car()</span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">store=BwmStore()</span><br><span class="line">car1 =store.order(<span class="string">"550"</span>)</span><br><span class="line">print(car1)</span><br><span class="line">car2 =store.order(<span class="string">"X6"</span>)</span><br><span class="line">print(car2)</span><br><span class="line">car3 = store.order(<span class="string">"X1"</span>)</span><br><span class="line">print(car3)</span><br><span class="line"></span><br><span class="line">store2 =SkdStore();</span><br><span class="line">car4=store2.order(<span class="string">"明锐"</span>)</span><br><span class="line">print(car4)</span><br><span class="line">car5=store2.order(<span class="string">"晶锐"</span>)</span><br><span class="line">print(car5)</span><br></pre></td></tr></table></figure><p><strong>最后来看看工厂方法模式的定义</strong></p><blockquote><p>定义了一个创建对象的接口(可以理解为函数)，但由子类决定要实例化的类是哪一个，工厂方法模式让类的实例化推迟到子类，抽象的CarStore提供了一个创建对象的方法createCar，也叫作工厂方法。</p><p>子类真正实现这个createCar方法创建出具体产品。 创建者类不需要直到实际创建的产品是哪一个，选择了使用了哪个子类，自然也就决定了实际创建的产品是什么。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;toc&quot;&gt;

&lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#mian-xiang-dui-xiang-she-ji&quot;&gt;面向对象设计&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#she-ji-lei&quot;&gt;设计类&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a 
      
    
    </summary>
    
      <category term="Python" scheme="http://baofengketang.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://baofengketang.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python基础(八)</title>
    <link href="http://baofengketang.com/2018/05/08/python_base/python_08/"/>
    <id>http://baofengketang.com/2018/05/08/python_base/python_08/</id>
    <published>2018-05-08T04:41:28.000Z</published>
    <updated>2018-05-08T13:12:15.000Z</updated>
    
    <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#mian-xiang-dui-xiang-er">面向对象（二）</a><ul><li><a href="#bao-hu-dui-xiang-shu-xing">保护对象属性</a></li><li><a href="#del-fang-fa">__del__()方法</a></li><li><a href="#ji-cheng-jie-shao-yi-ji-dan-ji-cheng">继承介绍以及单继承</a></li><li><a href="#duo-ji-cheng">多继承</a></li><li><a href="#chong-xie-fu-lei-fang-fa-yu-diao-yong-fu-lei-fang-fa">重写父类方法与调用父类方法</a></li><li><a href="#duo-tai">多态</a></li><li><a href="#lei-shu-xing-shi-li-shu-xing">类属性、实例属性</a></li><li><a href="#jing-tai-fang-fa-he-lei-fang-fa">静态方法和类方法</a></li><li><a href="#zong-jie">总结</a></li></ul></li></ul><!-- tocstop --></div><h1><span id="mian-xiang-dui-xiang-er">面向对象（二）</span><a href="#mian-xiang-dui-xiang-er" class="header-anchor">#</a></h1><h2><span id="bao-hu-dui-xiang-shu-xing">保护对象属性</span><a href="#bao-hu-dui-xiang-shu-xing" class="header-anchor">#</a></h2><p>如果有一个对象，当需要对其进行修改属性时，有2种方法</p><ul><li>对象名.属性名 = 数据   —-&gt;直接修改</li><li>对象名.方法名()          —-&gt;间接修改</li></ul><p>为了更好的保存属性安全，即不能随意修改，一般的处理方式为</p><ul><li>将属性定义为私有属性</li><li>添加一个可以调用的方法，供调用</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.__name = name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getName</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.__name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setName</span><span class="params">(self, newName)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> len(newName) &gt;= <span class="number">5</span>:</span><br><span class="line">            self.__name = newName</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"error:名字长度需要大于或者等于5"</span>)</span><br><span class="line"></span><br><span class="line">xiaoming = People(<span class="string">"张三疯"</span>)</span><br><span class="line">print(xiaoming.__name)</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/Users/jinzhong/PycharmProjects/hello3/venv/bin/python /Users/jinzhong/PycharmProjects/hello3/demo/test16.py</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"/Users/jinzhong/PycharmProjects/hello3/demo/test16.py"</span>, line <span class="number">13</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    print(xiaoming.__name)</span><br><span class="line">AttributeError: <span class="string">'People'</span> object has no attribute <span class="string">'__name'</span></span><br><span class="line">Process finished <span class="keyword">with</span> exit code <span class="number">1</span></span><br></pre></td></tr></table></figure><p>上面的运行结果发现，__name不能直接被访问，接下来我们可以通过set、get方法来进行设置和访问</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.__name = name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getName</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.__name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setName</span><span class="params">(self, newName)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> len(newName) &gt;= <span class="number">5</span>:</span><br><span class="line">            self.__name = newName</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"error:名字长度需要大于或者等于5"</span>)</span><br><span class="line">p = People(<span class="string">"xiaot"</span>)</span><br><span class="line">p.setName(<span class="string">"as仙阁－辰鬼"</span>)</span><br><span class="line">print(p.getName())</span><br><span class="line">p.setName(<span class="string">"lisi"</span>)</span><br><span class="line">print(p.getName())</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/Users/jinzhong/PycharmProjects/hello3/venv/bin/python /Users/jinzhong/PycharmProjects/hello3/demo/test16.py</span><br><span class="line"><span class="keyword">as</span>仙阁－辰鬼</span><br><span class="line">error:名字长度需要大于或者等于<span class="number">5</span></span><br><span class="line"><span class="keyword">as</span>仙阁－辰鬼</span><br><span class="line">Process finished <span class="keyword">with</span> exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><p><strong>总结</strong></p><ul><li>Python中没有像C++中public和private这些关键字来区别公有属性和私有属性</li><li>它是以属性命名方式来区分，如果在属性名前面加了2个下划线’__’，则表明该属性是私有属性，否则为公有属性（方法也是一样，方法名前面加了2个下划线的话表示该方法是私有的，否则为公有的）。</li></ul><h2><span id="del-fang-fa">__del__()方法</span><a href="#del-fang-fa" class="header-anchor">#</a></h2><p>创建对象后，python解释器默认调用<code>__init__()</code>方法；</p><p>当删除一个对象时，python解释器也会默认调用一个方法，这个方法为<code>__del__()</code>方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="comment"># 初始化方法</span></span><br><span class="line">    <span class="comment"># 创建完对象后会自动被调用</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        print(<span class="string">'__init__方法被调用'</span>)</span><br><span class="line">        self.__name = name</span><br><span class="line">    <span class="comment"># 析构方法</span></span><br><span class="line">    <span class="comment"># 当对象被删除时，会自动被调用</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"__del__方法被调用"</span>)</span><br><span class="line">        print(<span class="string">"%s对象马上被干掉了..."</span>%self.__name)</span><br><span class="line"><span class="comment"># 创建对象</span></span><br><span class="line">dog = Animal(<span class="string">"哈皮狗"</span>)</span><br><span class="line"><span class="comment"># 删除对象</span></span><br><span class="line"><span class="keyword">del</span> dog</span><br><span class="line"></span><br><span class="line">cat = Animal(<span class="string">"波斯猫"</span>)</span><br><span class="line">cat2 = cat</span><br><span class="line">cat3 = cat</span><br><span class="line">print(<span class="string">"---马上 删除cat对象"</span>)</span><br><span class="line"><span class="keyword">del</span> cat</span><br><span class="line">print(<span class="string">"---马上 删除cat2对象"</span>)</span><br><span class="line"><span class="keyword">del</span> cat2</span><br><span class="line">print(<span class="string">"---马上 删除cat3对象"</span>)</span><br><span class="line"><span class="keyword">del</span> cat3</span><br><span class="line">print(<span class="string">"程序2秒钟后结束"</span>)</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/Users/jinzhong/PycharmProjects/hello3/venv/bin/python /Users/jinzhong/PycharmProjects/hello3/demo/test16.py</span><br><span class="line">__init__方法被调用</span><br><span class="line">__del__方法被调用</span><br><span class="line">哈皮狗对象马上被干掉了...</span><br><span class="line">__init__方法被调用</span><br><span class="line">---马上 删除cat对象</span><br><span class="line">---马上 删除cat2对象</span><br><span class="line">---马上 删除cat3对象</span><br><span class="line">__del__方法被调用</span><br><span class="line">波斯猫对象马上被干掉了...</span><br><span class="line">程序<span class="number">2</span>秒钟后结束</span><br><span class="line">Process finished <span class="keyword">with</span> exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><p><strong>总结</strong></p><ul><li>当有1个变量保存了对象的引用时，此对象的引用计数就会加1</li><li>当使用del删除变量指向的对象时，如果对象的引用计数不会1，比如3，那么此时只会让这个引用计数减1，即变为2，当再次调用del时，变为1，如果再调用1次del，此时会真的把对象进行删除</li></ul><p>补充：</p><p>在python中我们可以通过sys.getrefcount()方法来测试对象的引用计数器，通过sys.getrefcount()方法得到的引用计数比实际个数多一个</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="comment"># 初始化方法</span></span><br><span class="line">    <span class="comment"># 创建完对象后会自动被调用</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        print(<span class="string">'__init__方法被调用'</span>)</span><br><span class="line">        self.__name = name</span><br><span class="line">    <span class="comment"># 析构方法</span></span><br><span class="line">    <span class="comment"># 当对象被删除时，会自动被调用</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"__del__方法被调用"</span>)</span><br><span class="line">        print(<span class="string">"%s对象马上被干掉了..."</span>%self.__name)</span><br><span class="line">cat = Animal(<span class="string">"波斯猫"</span>)</span><br><span class="line">cat2 = cat</span><br><span class="line">cat3 = cat</span><br><span class="line">print(sys.getrefcount(cat3))</span><br><span class="line"><span class="keyword">del</span> cat3</span><br><span class="line">print(sys.getrefcount(cat2))</span><br><span class="line"><span class="keyword">del</span> cat2</span><br><span class="line">print(sys.getrefcount(cat))</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/Users/jinzhong/PycharmProjects/hello3/venv/bin/python /Users/jinzhong/PycharmProjects/hello3/demo/test16.py</span><br><span class="line">__init__方法被调用</span><br><span class="line">4</span><br><span class="line">3</span><br><span class="line">2</span><br><span class="line">__del__方法被调用</span><br><span class="line">波斯猫对象马上被干掉了...</span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><h2><span id="ji-cheng-jie-shao-yi-ji-dan-ji-cheng">继承介绍以及单继承</span><a href="#ji-cheng-jie-shao-yi-ji-dan-ji-cheng" class="header-anchor">#</a></h2><p><strong>继承的概念</strong></p><p>在现实生活中，继承一般指的是子女继承父辈的财产</p><p>在程序中，继承描述的是事物之间的所属关系，例如猫和狗都属于动物，程序中便可以描述为猫和狗继承自动物；同理，波斯猫和巴厘猫都继承自猫，而沙皮狗和斑点狗都继承狗</p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1525766153.png?imageMogr2/thumbnail/!70p" alt=""></p><p><strong>2.继承实例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义一个父类，如下:</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, color=<span class="string">"白色"</span>)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.color = color</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"%s--在跑"</span>%self.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个子类，继承Cat类如下:</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bosi</span><span class="params">(Cat)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setNewName</span><span class="params">(self, newName)</span>:</span></span><br><span class="line">        self.name = newName</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"%s--在吃"</span>%self.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">bs = Bosi(<span class="string">"印度猫"</span>)</span><br><span class="line">print(<span class="string">'bs的名字为:%s'</span>%bs.name)</span><br><span class="line">print(<span class="string">'bs的颜色为:%s'</span>%bs.color)</span><br><span class="line">bs.eat()</span><br><span class="line">bs.setNewName(<span class="string">'波斯'</span>)</span><br><span class="line">bs.run()</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/Users/jinzhong/PycharmProjects/hello3/venv/bin/python /Users/jinzhong/PycharmProjects/hello3/demo/test16.py</span><br><span class="line">bs的名字为:印度猫</span><br><span class="line">bs的颜色为:白色</span><br><span class="line">印度猫--在吃</span><br><span class="line">波斯--在跑</span><br><span class="line">Process finished <span class="keyword">with</span> exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>虽然子类没有定义<code>__init__</code>方法，但是父类有，所以在子类继承父类的时候这个方法就被继承了，所以只要创建Bosi的对象，就默认执行了那个继承过来的<code>__init__</code>方法</li></ul><p><strong>总结</strong></p><ul><li>子类在继承的时候，在定义类时，小括号()中为父类的名字</li><li>父类的属性、方法，会被继承给子类</li></ul><p><strong>注意点</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name=<span class="string">'动物'</span>, color=<span class="string">'白色'</span>)</span>:</span></span><br><span class="line">        self.__name = name</span><br><span class="line">        self.color = color</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__test</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.__name)</span><br><span class="line">        print(self.color)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.__name)</span><br><span class="line">        print(self.color)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">(Animal)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dogTest1</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment">#print(self.__name) #不能访问到父类的私有属性</span></span><br><span class="line">        print(self.color)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dogTest2</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment">#self.__test() #不能访问父类中的私有方法</span></span><br><span class="line">        self.test()</span><br><span class="line">A = Animal()</span><br><span class="line"><span class="comment">#print(A.__name) #程序出现异常，不能访问私有属性</span></span><br><span class="line">print(A.color)</span><br><span class="line"><span class="comment">#A.__test() #程序出现异常，不能访问私有方法</span></span><br><span class="line">A.test()</span><br><span class="line">print(<span class="string">"------分割线-----"</span>)</span><br><span class="line">D = Dog(name = <span class="string">"小花狗"</span>, color = <span class="string">"黄色"</span>)</span><br><span class="line">D.dogTest1()</span><br><span class="line">D.dogTest2()</span><br></pre></td></tr></table></figure><ul><li>私有的属性，不能通过对象直接访问，但是可以通过方法访问</li><li>私有的方法，不能通过对象直接访问</li><li>私有的属性、方法，不会被子类继承，也不能被访问</li><li>一般情况下，私有的属性、方法都是不对外公布的，往往用来做内部的事情，起到安全的作用</li></ul><h2><span id="duo-ji-cheng">多继承</span><a href="#duo-ji-cheng" class="header-anchor">#</a></h2><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1525766716.png?imageMogr2/thumbnail/!70p" alt=""></p><p>从图中能够看出，所谓多继承，即子类有多个父类，并且具有它们的特征</p><p>Python中多继承的格式如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义一个父类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printA</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'----A----'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个父类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printB</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'----B----'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个子类，继承自A、B</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(A,B)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printC</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'----C----'</span>)</span><br><span class="line"></span><br><span class="line">obj_C = C()</span><br><span class="line">obj_C.printA()</span><br><span class="line">obj_C.printB()</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">----A----</span><br><span class="line">----B----</span><br></pre></td></tr></table></figure><p><strong>说明</strong></p><blockquote><ul><li>python中是可以多继承的</li><li>父类中的方法、属性，子类会继承</li></ul></blockquote><p><strong>注意点</strong></p><ul><li><blockquote><p>如果在上面的多继承例子中，如果父类A和父类B中，有一个同名的方法，那么通过子类去调用的时候，调用哪个？</p></blockquote></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">base</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'----base test----'</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(base)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'----A test----'</span>)</span><br><span class="line"><span class="comment"># 定义一个父类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(base)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'----B test----'</span>)</span><br><span class="line"><span class="comment"># 定义一个子类，继承自A、B</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(A,B)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">obj_C = C()</span><br><span class="line">obj_C.test()</span><br><span class="line">print(C.__mro__) <span class="comment">#可以查看C类的对象搜索方法时的先后顺序</span></span><br></pre></td></tr></table></figure><h2><span id="chong-xie-fu-lei-fang-fa-yu-diao-yong-fu-lei-fang-fa">重写父类方法与调用父类方法</span><a href="#chong-xie-fu-lei-fang-fa-yu-diao-yong-fu-lei-fang-fa" class="header-anchor">#</a></h2><p><strong>1.重写父类方法</strong></p><p>所谓重写，就是子类中，有一个和父类相同名字的方法，在子类中的方法会覆盖掉父类中同名的方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sayHello</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"haha"</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bosi</span><span class="params">(Cat)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sayHello</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"hehe"</span>)</span><br><span class="line">bosi = Bosi()</span><br><span class="line">bosi.sayHello()</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/Users/jinzhong/PycharmProjects/hello3/venv/bin/python /Users/jinzhong/PycharmProjects/hello3/demo/test16.py</span><br><span class="line">hehe</span><br><span class="line">Process finished <span class="keyword">with</span> exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><p><strong>2.调用方法</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.color = <span class="string">'yellow'</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bosi</span><span class="params">(Cat)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name)</span>:</span></span><br><span class="line">        <span class="comment"># 调用父类的__init__方法1(python2)</span></span><br><span class="line">        <span class="comment">#Cat.__init__(self,name)</span></span><br><span class="line">        <span class="comment"># 调用父类的__init__方法2</span></span><br><span class="line">        <span class="comment"># super(Bosi,self).__init__(name)</span></span><br><span class="line">        <span class="comment"># 调用父类的__init__方法3</span></span><br><span class="line">        super().__init__(name)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getName</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line">bosi = Bosi(<span class="string">'妮妮'</span>)</span><br><span class="line">print(bosi.name)</span><br><span class="line">print(bosi.color)</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/Users/jinzhong/PycharmProjects/hello3/venv/bin/python /Users/jinzhong/PycharmProjects/hello3/demo/test16.py</span><br><span class="line">妮妮</span><br><span class="line">yellow</span><br><span class="line">Process finished <span class="keyword">with</span> exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><h2><span id="duo-tai">多态</span><a href="#duo-tai" class="header-anchor">#</a></h2><p>多态的概念是应用于Java和C#这一类强类型语言中，而Python崇尚“鸭子类型”。</p><p>所谓多态：定义时的类型和运行时的类型不一样，此时就成为多态</p><p>Python伪代码实现Java或C#的多态</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">F1</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'F1.show'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">S1</span><span class="params">(F1)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'S1.show'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">S2</span><span class="params">(F1)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'S2.show'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 由于在Java或C#中定义函数参数时，必须指定参数的类型</span></span><br><span class="line"><span class="comment"># 为了让Func函数既可以执行S1对象的show方法，又可以执行S2对象的show方法，所以，定义了一个S1和S2类的父类</span></span><br><span class="line"><span class="comment"># 而实际传入的参数是：S1对象和S2对象</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Func</span><span class="params">(F1 obj)</span>:</span></span><br><span class="line">    <span class="string">"""Func函数需要接收一个F1类型或者F1子类的类型"""</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">print</span> obj.show()</span><br><span class="line"></span><br><span class="line">s1_obj = S1()</span><br><span class="line">Func(s1_obj) <span class="comment"># 在Func函数中传入S1类的对象 s1_obj，执行 S1 的show方法，结果：S1.show</span></span><br><span class="line"></span><br><span class="line">s2_obj = S2()</span><br><span class="line">Func(s2_obj) <span class="comment"># 在Func函数中传入Ss类的对象 ss_obj，执行 Ss 的show方法，结果：S2.show</span></span><br></pre></td></tr></table></figure><p>Python “鸭子类型”</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">F1</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'F1.show'</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">S1</span><span class="params">(F1)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'S1.show'</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">S2</span><span class="params">(F1)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'S2.show'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Func</span><span class="params">(obj)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> obj.show()</span><br><span class="line">s1_obj = S1()</span><br><span class="line">Func(s1_obj) </span><br><span class="line"></span><br><span class="line">s2_obj = S2()</span><br><span class="line">Func(s2_obj)</span><br></pre></td></tr></table></figure><h2><span id="lei-shu-xing-shi-li-shu-xing">类属性、实例属性</span><a href="#lei-shu-xing-shi-li-shu-xing" class="header-anchor">#</a></h2><p>了解了类基本的东西之后，下面看一下python中这几个概念的区别</p><p>先来谈一下类属性和实例属性</p><p>在前面的例子中我们接触到的就是实例属性（对象属性），顾名思义，类属性就是类对象</p><p>所拥有的属性，它被所有类对象的实例对象所共有，在内存中只存在一个副本，这个和C++中类的静态成员变量有点类似。对于公有的类属性，在类外可以通过类对象和实例对象访问</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span><span class="params">(object)</span>:</span></span><br><span class="line">    name = <span class="string">'Tom'</span>  <span class="comment">#公有的类属性</span></span><br><span class="line">    __age = <span class="number">12</span>     <span class="comment">#私有的类属性</span></span><br><span class="line">p = People()</span><br><span class="line">print(p.name)           <span class="comment">#正确</span></span><br><span class="line">print(People.name)      <span class="comment">#正确</span></span><br><span class="line">print(p.__age)            <span class="comment">#错误，不能在类外通过实例对象访问私有的类属性</span></span><br><span class="line">print(People.__age)        <span class="comment">#错误，不能在类外通过类对象访问私有的类属性</span></span><br></pre></td></tr></table></figure><p><strong>实例属性（对象属性）</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span><span class="params">(object)</span>:</span></span><br><span class="line">    address = <span class="string">'山东'</span> <span class="comment">#类属性</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.name = <span class="string">'xiaowang'</span> <span class="comment">#实例属性</span></span><br><span class="line">        self.age = <span class="number">20</span> <span class="comment">#实例属性</span></span><br><span class="line">p = People()</span><br><span class="line">p.age =<span class="number">12</span> <span class="comment">#实例属性</span></span><br><span class="line">print(p.address) <span class="comment">#正确</span></span><br><span class="line">print(p.name)    <span class="comment">#正确</span></span><br><span class="line">print(p.age)     <span class="comment">#正确</span></span><br><span class="line">print(People.address) <span class="comment">#正确</span></span><br><span class="line">print(People.name)    <span class="comment">#错误</span></span><br><span class="line">print(People.age)     <span class="comment">#错误</span></span><br></pre></td></tr></table></figure><p><strong>通过实例对象去修改类属性</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span><span class="params">(object)</span>:</span></span><br><span class="line">    country = <span class="string">'china'</span> <span class="comment">#类属性</span></span><br><span class="line">print(People.country)</span><br><span class="line">p = People()</span><br><span class="line">print(p.country)</span><br><span class="line">p.country = <span class="string">'japan'</span></span><br><span class="line">print(p.country)      <span class="comment">#实例属性会屏蔽掉同名的类属性</span></span><br><span class="line">print(People.country)</span><br><span class="line"><span class="keyword">del</span> p.country    <span class="comment">#删除实例属性</span></span><br><span class="line">print(p.country)</span><br></pre></td></tr></table></figure><p><strong>总结</strong></p><p>如果需要在类外修改类属性，必须通过类对象去引用然后进行修改。如果通过实例对象去引用，会产生一个同名的实例属性，这种方式修改的是实例属性，不会影响到类属性，并且之后如果通过实例对象去引用该名称的属性，实例属性会强制屏蔽掉类属性，即引用的是实例属性，除非删除了该实例属性。</p><h2><span id="jing-tai-fang-fa-he-lei-fang-fa">静态方法和类方法</span><a href="#jing-tai-fang-fa-he-lei-fang-fa" class="header-anchor">#</a></h2><p><strong>1.类方法</strong></p><p>是类对象所拥有的方法，需要用修饰器<code>@classmethod</code>来标识其为类方法，对于类方法，第一个参数必须是类对象，一般以<code>cls</code>作为第一个参数（当然可以用其他名称的变量作为其第一个参数，但是大部分人都习惯以’cls’作为第一个参数的名字，就最好用’cls’了），能够通过实例对象和类对象去访问。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span><span class="params">(object)</span>:</span></span><br><span class="line">    country = <span class="string">'china'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#类方法，用classmethod来进行修饰</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getCountry</span><span class="params">(cls)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> cls.country</span><br><span class="line"></span><br><span class="line">p = People()</span><br><span class="line"><span class="keyword">print</span> p.getCountry()    <span class="comment">#可以用过实例对象引用</span></span><br><span class="line"><span class="keyword">print</span> People.getCountry()    <span class="comment">#可以通过类对象引用</span></span><br></pre></td></tr></table></figure><p>类方法还有一个用途就是可以对类属性进行修改：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span><span class="params">(object)</span>:</span></span><br><span class="line">    country = <span class="string">'china'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#类方法，用classmethod来进行修饰</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getCountry</span><span class="params">(cls)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> cls.country</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setCountry</span><span class="params">(cls,country)</span>:</span></span><br><span class="line">        cls.country = country</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = People()</span><br><span class="line"><span class="keyword">print</span> p.getCountry()    <span class="comment">#可以用过实例对象引用</span></span><br><span class="line"><span class="keyword">print</span> People.getCountry()    <span class="comment">#可以通过类对象引用</span></span><br><span class="line"></span><br><span class="line">p.setCountry(<span class="string">'japan'</span>)   </span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> p.getCountry()   </span><br><span class="line"><span class="keyword">print</span> People.getCountry()</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">china</span><br><span class="line">china</span><br><span class="line">japan</span><br><span class="line">japan</span><br></pre></td></tr></table></figure><p>结果显示在用类方法对类属性修改之后，通过类对象和实例对象访问都发生了改变</p><p><strong>2.静态方法</strong></p><p>需要通过修饰器<code>@staticmethod</code>来进行修饰，静态方法不需要多定义参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span><span class="params">(object)</span>:</span></span><br><span class="line">    country = <span class="string">'china'</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="comment">#静态方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getCountry</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">return</span> People.country</span><br><span class="line"><span class="keyword">print</span> People.getCountry()</span><br></pre></td></tr></table></figure><h2><span id="zong-jie">总结</span><a href="#zong-jie" class="header-anchor">#</a></h2><p>从类方法和实例方法以及静态方法的定义形式就可以看出来，类方法的第一个参数是类对象cls，那么通过cls引用的必定是类对象的属性和方法；而实例方法的第一个参数是实例对象self，那么通过self引用的可能是类属性、也有可能是实例属性（这个需要具体分析），不过在存在相同名称的类属性和实例属性的情况下，实例属性优先级更高。静态方法中不需要额外定义参数，因此在静态方法中引用类属性的话，必须通过类对象来引用</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;toc&quot;&gt;

&lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#mian-xiang-dui-xiang-er&quot;&gt;面向对象（二）&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#bao-hu-dui-xiang-shu-xing&quot;&gt;保护对象属性&lt;
      
    
    </summary>
    
      <category term="Python" scheme="http://baofengketang.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://baofengketang.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python基础(七)</title>
    <link href="http://baofengketang.com/2018/05/08/python_base/python_07/"/>
    <id>http://baofengketang.com/2018/05/08/python_base/python_07/</id>
    <published>2018-05-08T02:00:07.000Z</published>
    <updated>2018-05-08T04:41:15.000Z</updated>
    
    <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#mian-xiang-dui-xiang">面向对象</a><ul><li><a href="#mian-xiang-dui-xiang-bian-cheng-jie-shao">面向对象编程介绍</a></li><li><a href="#lei-he-dui-xiang">类和对象</a></li><li><a href="#ding-yi-lei">定义类</a></li><li><a href="#chuang-jian-dui-xiang">创建对象</a></li><li><a href="#init-fang-fa">__init__()方法</a></li><li><a href="#mo-fa-fang-fa">魔法方法</a></li><li><a href="#self">self</a></li><li><a href="#mian-xiang-dui-xiang-an-li-1">面向对象案例1</a></li><li><a href="#mian-xiang-dui-xiang-an-li-2">面向对象案例2</a></li></ul></li></ul><!-- tocstop --></div><h1><span id="mian-xiang-dui-xiang">面向对象</span><a href="#mian-xiang-dui-xiang" class="header-anchor">#</a></h1><h2><span id="mian-xiang-dui-xiang-bian-cheng-jie-shao">面向对象编程介绍</span><a href="#mian-xiang-dui-xiang-bian-cheng-jie-shao" class="header-anchor">#</a></h2><p><strong>想一想:用程序描述以下事情</strong></p><ul><li>A同学报道登记信息</li><li>B同学报道登记信息</li><li>C同学报道登记信息</li><li>A同学做自我介绍</li><li>B同学做自我介绍</li><li>C同学做自我介绍</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">stu_a = &#123;</span><br><span class="line">        <span class="string">"name"</span>:<span class="string">"A"</span>,</span><br><span class="line">        <span class="string">"age"</span>:<span class="number">21</span>,</span><br><span class="line">        <span class="string">"gender"</span>:<span class="number">1</span>,</span><br><span class="line">        <span class="string">"hometown"</span>:<span class="string">"河北"</span></span><br><span class="line">&#125;</span><br><span class="line">stu_b = &#123;</span><br><span class="line">        <span class="string">"name"</span>:<span class="string">"B"</span>,</span><br><span class="line">        <span class="string">"age"</span>:<span class="number">22</span>,</span><br><span class="line">        <span class="string">"gender"</span>:<span class="number">0</span>,</span><br><span class="line">        <span class="string">"hometown"</span>:<span class="string">"山东"</span></span><br><span class="line">&#125;</span><br><span class="line">stu_c = &#123;</span><br><span class="line">        <span class="string">"name"</span>:<span class="string">"C"</span>,</span><br><span class="line">        <span class="string">"age"</span>:<span class="number">20</span>,</span><br><span class="line">        <span class="string">"gender"</span>:<span class="number">1</span>,</span><br><span class="line">        <span class="string">"hometown"</span>:<span class="string">"安徽"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">stu_intro</span><span class="params">(stu)</span>:</span></span><br><span class="line">        <span class="string">"""自我介绍"""</span></span><br><span class="line">        <span class="keyword">for</span> key, value <span class="keyword">in</span> stu.items():</span><br><span class="line">                print(<span class="string">"key=%s, value=%d"</span>%(key,value))</span><br><span class="line"></span><br><span class="line">stu_intro(stu_a)</span><br><span class="line">stu_intro(stu_b)</span><br><span class="line">stu_intro(stu_c)</span><br></pre></td></tr></table></figure><p>考虑现实生活中，我们的思维方式是放在学生这个个人上，是学生做了自我介绍。而不是像我们刚刚写出的代码，先有了介绍的行为，再去看介绍了谁。</p><p>用我们的现实思维方式该怎么用程序表达呢？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">stu_a = Student(个人信息)</span><br><span class="line">stu_b = Student(个人信息)</span><br><span class="line">stu_c = Student(个人信息)</span><br><span class="line">stu_a.intro()</span><br><span class="line">stu_a.intro()</span><br><span class="line">stu_a.intro()</span><br></pre></td></tr></table></figure><ul><li>面向过程：根据业务逻辑从上到下写代码</li><li>面向对象：将数据与函数绑定到一起，进行封装，这样能够更快速的开发程序，减少了重复代码的重写过程</li></ul><p>面向过程编程最易被初学者接受，其往往用一长段代码来实现指定功能，开发过程的思路是将数据与函数按照执行的逻辑顺序组织在一起，数据与函数分开考虑。</p><p>今天我们来学习一种新的编程方式：面向对象编程（Object Oriented Programming，OOP，面向对象程序设计）</p><p>今天我们来学习一种新的编程方式：面向对象编程（Object Oriented Programming，OOP，面向对象程序设计）</p><ul><li><p>1）解决菜鸟买电脑的故事</p><p>第一种方式:</p><blockquote><p>   1)在网上查找资料</p><p>   2)根据自己预算和需求定电脑的型号 MacBook 15 顶配 1W8</p><p>   3)去市场找到苹果店各种店无法甄别真假 随便找了一家</p><p>   4)找到业务员,业务员推荐了另外一款 配置更高价格便宜,也是苹果系统的 1W</p><p>   5)砍价30分钟 付款9999</p><p>   6)成交</p><p>   回去之后发现各种问题 </p></blockquote><p>第二种方式 : </p><blockquote><p>1)找一个靠谱的电脑高手</p><p>2)给钱交易</p></blockquote></li></ul><p>面向对象和面向过程都是解决问题的一种思路而已</p><ul><li>买电脑的第一种方式:<ul><li>强调的是步骤、过程、每一步都是自己亲自去实现的</li><li>这种解决问题的思路我们就叫做面向过程</li></ul></li><li>买电脑的第二种方式:<ul><li>强调的是电脑高手,  电脑高手是处理这件事的主角,对我们而言,我们并不必亲自实现整个步骤只需要调用电脑高手就可以解决问题</li><li>这种解决问题的思路就 是面向对象</li></ul></li><li>用面向对象的思维解决问题的重点<ul><li>当遇到一个需求的时候不用自己去实现，如果自己一步步实现那就是面向过程</li><li>应该找一个专门做这个事的人来做</li><li>面向对象是基于面向过程的</li></ul></li></ul><p>面向对象(object-oriented ;简称: OO) 至今还没有统一的概念 我这里把它定义为: 按人们认识客观世界的系统思维方式,采用基于对象(实体) 的概念建立模型,模拟客观世界分析、设 计、实现软件的办法。</p><p>面向对象编程(Object Oriented Programming-OOP) 是一种解决软件复用的设计和编程方法。   这种方法把软件系统中相近相似的操作逻辑和操作   应用数据、状态,以类的型式描述出来,以对象实例的形式在软件系统中复用,以达到提高软件开发效率的作用。</p><h2><span id="lei-he-dui-xiang">类和对象</span><a href="#lei-he-dui-xiang" class="header-anchor">#</a></h2><p>面向对象编程的2个非常重要的概念：类和对象</p><p>对象是面向对象编程的核心，在使用对象的过程中，为了将具有共同特征和行为的一组对象抽象定义，提出了另外一个新的概念——类</p><p>类就相当于制造飞机时的图纸，用它来进行创建的飞机就相当于对象</p><p><strong>1.类</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">人以类聚 物以群分。</span><br><span class="line">具有相似内部状态和运动规律的实体的集合(或统称为抽象)。 </span><br><span class="line">具有相同属性和行为事物的统称</span><br></pre></td></tr></table></figure><p>类是抽象的,在使用的时候通常会找到这个类的一个具体的存在,使用这个具体的存在。一个类可以找到多个对象</p><p><strong>2.对象</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">某一个具体事物的存在 ,在现实世界中可以是看得见摸得着的。</span><br><span class="line">可以是直接使用的</span><br></pre></td></tr></table></figure><p><strong>3.类与对象的关系</strong></p><p>类就是创建对象的模板</p><p><strong>4.类的构成</strong></p><p>类(Class) 由3个部分构成</p><ul><li>类的名称:类名</li><li>类的属性:一组数据</li><li>类的方法:允许对进行操作的方法 (行为) </li></ul><p><strong>举例：</strong></p><p>1）人类设计,只关心3样东西: </p><ul><li>事物名称(类名):人(Person) </li><li>属性:身高(height)、年龄(age) </li><li>方法(行为/功能):跑(run)、打架(fight) </li></ul><p>2）狗类的设计 </p><ul><li>类名:狗(Dog)</li><li>属性:品种 、毛色、性别、名字、 腿儿的数量</li><li>方法(行为/功能):叫 、跑、咬人、吃、摇尾巴</li></ul><h2><span id="ding-yi-lei">定义类</span><a href="#ding-yi-lei" class="header-anchor">#</a></h2><p>定义一个类，格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 类名:</span></span><br><span class="line">    方法列表</span><br></pre></td></tr></table></figure><p>demo：定义一个Car类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>:</span></span><br><span class="line">    <span class="comment"># 方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getCarInfo</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'车轮子个数:%d, 颜色%s'</span>%(self.wheelNum, self.color))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">move</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"车正在移动..."</span>)</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>定义类时有2种：新式类和经典类，上面的Car为经典类，如果是Car(object)则为新式类</li><li>类名 的命名规则按照”大驼峰”</li></ul><h2><span id="chuang-jian-dui-xiang">创建对象</span><a href="#chuang-jian-dui-xiang" class="header-anchor">#</a></h2><p>定义了一个Car类；就好比有车一个张图纸，那么接下来就应该把图纸交给生成工人们去生成了</p><p>python中，可以根据已经定义的类去创建出一个个对象</p><p>创建对象的格式为:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对象名 = 类名()</span><br></pre></td></tr></table></figure><p>创建对象demo:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>:</span></span><br><span class="line">    <span class="comment"># 移动</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">move</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'车在奔跑...'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 鸣笛</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">toot</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"车在鸣笛...嘟嘟.."</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个对象，并用变量BMW来保存它的引用</span></span><br><span class="line">BMW = Car()</span><br><span class="line">BMW.color = <span class="string">'黑色'</span></span><br><span class="line">BMW.wheelNum = <span class="number">4</span> <span class="comment">#轮子数量</span></span><br><span class="line">BMW.move()</span><br><span class="line">BMW.toot()</span><br><span class="line">print(BMW.color)</span><br><span class="line">print(BMW.wheelNum)</span><br></pre></td></tr></table></figure><p><strong>总结</strong></p><p>BMW = Car()，这样就产生了一个Car的实例对象，此时也可以通过实例对象BMW来访问属性或者方法</p><p>第一次使用BMW.color = ‘黑色’表示给BMW这个对象添加属性，如果后面再次出现BMW.color = xxx表示对属性进行修改</p><p>BMW是一个对象，它拥有属性（数据）和方法（函数）</p><p>当创建一个对象时，就是用一个模子，来制造一个实物</p><h2><span id="init-fang-fa">__init__()方法</span><a href="#init-fang-fa" class="header-anchor">#</a></h2><p>想一想:</p><blockquote><p>在上一小节的demo中，我们已经给BMW这个对象添加了2个属性，wheelNum（车的轮胎数量）以及color（车的颜色），试想如果再次创建一个对象的话，肯定也需要进行添加属性，显然这样做很费事，那么有没有办法能够在创建对象的时候，就顺便把车这个对象的属性给设置呢？</p><p>__init__()方法</p></blockquote><p><strong>1.使用方式</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> 类名:</span></span><br><span class="line">    <span class="comment">#初始化函数，用来完成一些默认的设定</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p><strong>2.__init__()方法的调用</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义汽车类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.wheelNum = <span class="number">4</span></span><br><span class="line">        self.color = <span class="string">'蓝色'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">move</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'车在跑，目标:夏威夷'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建对象</span></span><br><span class="line">BMW = Car()</span><br><span class="line">print(<span class="string">'车的颜色为:%s'</span>%BMW.color)</span><br><span class="line">print(<span class="string">'车轮胎数量为:%d'</span>%BMW.wheelNum)</span><br></pre></td></tr></table></figure><p><strong>总结</strong></p><blockquote><p>当创建Car对象后，在没有调用<code>__init__()</code>方法的前提下，BMW就默认拥有了2个属性wheelNum和color，原因是<code>__init__()</code>方法是在创建对象后，就立刻被默认调用了</p></blockquote><blockquote><p>既然在创建完对象后<code>__init__()</code>方法已经被默认的执行了，那么能否让对象在调用<code>__init__()</code>方法的时候传递一些参数呢？如果可以，那怎样传递呢？</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义汽车类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, newWheelNum, newColor)</span>:</span></span><br><span class="line">        self.wheelNum = newWheelNum</span><br><span class="line">        self.color = newColor</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">move</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'车在跑，目标:夏威夷'</span>)</span><br><span class="line"><span class="comment"># 创建对象</span></span><br><span class="line">BMW = Car(<span class="number">4</span>, <span class="string">'green'</span>)</span><br><span class="line">print(<span class="string">'车的颜色为:%s'</span>%BMW.color)</span><br><span class="line">print(<span class="string">'车轮子数量为:%d'</span>%BMW.wheelNum)</span><br></pre></td></tr></table></figure><p><strong>总结</strong></p><ul><li><code>__init__()</code>方法，在创建一个对象时默认被调用，不需要手动调用</li><li><code>__init__(self)</code>中，默认有1个参数名字为self，如果在创建对象时传递了2个实参，那么<code>__init__(self)</code>中出了self作为第一个形参外还需要2个形参，例如<code>__init__(self,x,y)</code></li><li><code>__init__(self)</code>中的self参数，不需要开发者传递，python解释器会自动把当前的对象引用传递进去‘’</li></ul><h2><span id="mo-fa-fang-fa">魔法方法</span><a href="#mo-fa-fang-fa" class="header-anchor">#</a></h2><p>先看一个例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span>:</span></span><br><span class="line">    <span class="comment">#属性</span></span><br><span class="line">    <span class="comment">#方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"猫在吃鱼...."</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">drink</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"猫正在喝kele....."</span>)</span><br><span class="line">cat =Cat()</span><br><span class="line">print(cat)</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/Users/jinzhong/PycharmProjects/hello3/venv/bin/python /Users/jinzhong/PycharmProjects/hello3/day07/01-定义一个类.py</span><br><span class="line">&lt;__main__.Cat object at 0x100994048&gt;</span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><p>直接打印某个对象，我们看到打印出来的是某个对象的地址</p><p><strong>定义__str__()方法</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,health,love,strain)</span>:</span></span><br><span class="line">        self.name=name</span><br><span class="line">        self.health=health</span><br><span class="line">        self.love = love</span><br><span class="line">        self.strain=strain</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"狗狗的名字:%s,狗狗的亲密度%d,狗狗的健康值:%d,狗狗的品种:%s"</span>%(self.name,self.love,self.health,self.strain)</span><br><span class="line"></span><br><span class="line">dog =Dog(<span class="string">"安倍晋三"</span>,<span class="number">50</span>,<span class="number">50</span>,<span class="string">"草狗"</span>)</span><br><span class="line">print(dog)</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/Users/jinzhong/PycharmProjects/hello3/venv/bin/python /Users/jinzhong/PycharmProjects/hello3/demo/test/Dog.py</span><br><span class="line">狗狗的名字:安倍晋三,狗狗的亲密度50,狗狗的健康值:50,狗狗的品种:草狗</span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><p><strong>总结</strong></p><ul><li>在python中方法名如果是<code>__xxxx__()</code>的，那么就有特殊的功能，因此叫做“魔法”方法</li><li>当使用print输出对象的时候，只要自己定义了<code>__str__(self)</code>方法，那么就会打印从在这个方法中return的数据</li></ul><h2><span id="self">self</span><a href="#self" class="header-anchor">#</a></h2><p><strong>1.理解self</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义一个类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span>:</span></span><br><span class="line">    <span class="comment"># 方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printName</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'名字为:%s'</span>%self.name)</span><br><span class="line"><span class="comment"># 定义一个函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myPrint</span><span class="params">(animal)</span>:</span></span><br><span class="line">    animal.printName()</span><br><span class="line">dog1 = Animal(<span class="string">'草狗'</span>)</span><br><span class="line">myPrint(dog1)</span><br><span class="line">dog2 = Animal(<span class="string">'狼狗'</span>)</span><br><span class="line">myPrint(dog2)</span><br></pre></td></tr></table></figure><p><strong>总结</strong></p><ul><li>所谓的self，可以理解为自己</li><li>可以把self当做C++中类里面的this指针一样理解，就是对象自身的意思</li><li>某个对象调用其方法时，python解释器会把这个对象作为第一个参数传递给self，所以开发者只需要传递后面的参数即可</li></ul><h2><span id="mian-xiang-dui-xiang-an-li-1">面向对象案例1</span><a href="#mian-xiang-dui-xiang-an-li-1" class="header-anchor">#</a></h2><p>为了更好的理解面向对象编程，下面以“烤地瓜”为案例，进行分析</p><p><strong>1.分析“烤地瓜”的属性和方法</strong></p><blockquote><p>属性</p></blockquote><ul><li>cookedLevel : 这是数字；0~3表示还是生的，超过3表示半生不熟，超过5表示已经烤好了，超过8表示已经烤成木炭了！我们的地瓜开始时时生的</li><li>cookedString : 这是字符串；描述地瓜的生熟程度</li><li>condiments : 这是地瓜的配料列表，比如番茄酱、芥末酱等</li></ul><blockquote><p>方法</p></blockquote><ul><li><code>cook()</code> : 把地瓜烤一段时间</li><li><code>addCondiments()</code> : 给地瓜添加配料</li><li><code>__init__()</code> : 设置默认的属性</li><li><code>__str__()</code> : 让print的结果看起来更好一些</li></ul><p><strong>2.定义类和方法</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SweetPotato</span>:</span></span><br><span class="line">    <span class="string">"这是烤地瓜的类"</span></span><br><span class="line">    <span class="comment">#定义初始化方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.cookedLevel = <span class="number">0</span></span><br><span class="line">        self.cookedString = <span class="string">"生的"</span></span><br><span class="line">        self.condiments = []</span><br><span class="line">    <span class="comment">#定制print时的显示内容</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        msg = self.cookedString + <span class="string">" 地瓜"</span></span><br><span class="line">        <span class="keyword">if</span> len(self.condiments) &gt; <span class="number">0</span>:</span><br><span class="line">            msg = msg + <span class="string">"("</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> temp <span class="keyword">in</span> self.condiments:</span><br><span class="line">                msg = msg + temp + <span class="string">", "</span></span><br><span class="line">            msg = msg.strip(<span class="string">", "</span>)</span><br><span class="line"></span><br><span class="line">            msg = msg + <span class="string">")"</span></span><br><span class="line">        <span class="keyword">return</span> msg</span><br><span class="line">    <span class="comment">#烤地瓜方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cook</span><span class="params">(self, time)</span>:</span></span><br><span class="line">        self.cookedLevel += time</span><br><span class="line">        <span class="keyword">if</span> self.cookedLevel &gt; <span class="number">8</span>:</span><br><span class="line">            self.cookedString = <span class="string">"烤成灰了"</span></span><br><span class="line">        <span class="keyword">elif</span> self.cookedLevel &gt; <span class="number">5</span>:</span><br><span class="line">            self.cookedString = <span class="string">"烤好了"</span>    </span><br><span class="line">        <span class="keyword">elif</span> self.cookedLevel &gt; <span class="number">3</span>:</span><br><span class="line">            self.cookedString = <span class="string">"半生不熟"</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.cookedString = <span class="string">"生的"</span></span><br><span class="line">    <span class="comment">#添加配料</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addCondiments</span><span class="params">(self, condiments)</span>:</span></span><br><span class="line">        self.condiments.append(condiments)</span><br><span class="line"><span class="comment"># 用来进行测试</span></span><br><span class="line">mySweetPotato = SweetPotato()</span><br><span class="line">print(<span class="string">"------有了一个地瓜，还没有烤-----"</span>)</span><br><span class="line">print(mySweetPotato.cookedLevel)</span><br><span class="line">print(mySweetPotato.cookedString)</span><br><span class="line">print(mySweetPotato.condiments)</span><br><span class="line">print(<span class="string">"------接下来要进行烤地瓜了-----"</span>)</span><br><span class="line">print(<span class="string">"------地瓜经烤了4分钟-----"</span>)</span><br><span class="line">mySweetPotato.cook(<span class="number">4</span>) <span class="comment">#烤4分钟</span></span><br><span class="line">print(mySweetPotato)</span><br><span class="line">print(<span class="string">"------地瓜又经烤了3分钟-----"</span>)</span><br><span class="line">mySweetPotato.cook(<span class="number">3</span>) <span class="comment">#又烤了3分钟</span></span><br><span class="line">print(mySweetPotato)</span><br><span class="line">print(<span class="string">"------接下来要添加配料-番茄酱------"</span>)</span><br><span class="line">mySweetPotato.addCondiments(<span class="string">"番茄酱"</span>)</span><br><span class="line">print(mySweetPotato)</span><br><span class="line">print(<span class="string">"------地瓜又经烤了5分钟-----"</span>)</span><br><span class="line">mySweetPotato.cook(<span class="number">5</span>) <span class="comment">#又烤了5分钟</span></span><br><span class="line">print(mySweetPotato)</span><br><span class="line">print(<span class="string">"------接下来要添加配料-芥末酱------"</span>)</span><br><span class="line">mySweetPotato.addCondiments(<span class="string">"芥末酱"</span>)</span><br><span class="line">print(mySweetPotato)</span><br></pre></td></tr></table></figure><h2><span id="mian-xiang-dui-xiang-an-li-2">面向对象案例2</span><a href="#mian-xiang-dui-xiang-an-li-2" class="header-anchor">#</a></h2><p><strong>向一个房子中添加家具</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义一个home类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Home</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, area)</span>:</span></span><br><span class="line">        self.area = area <span class="comment">#房间剩余的可用面积</span></span><br><span class="line">        <span class="comment">#self.light = 'on' #灯默认是亮的</span></span><br><span class="line">        self.containsItem = []</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        msg = <span class="string">"当前房间可用面积为:"</span> + str(self.area)</span><br><span class="line">        <span class="keyword">if</span> len(self.containsItem) &gt; <span class="number">0</span>:</span><br><span class="line">            msg = msg + <span class="string">" 容纳的物品有: "</span></span><br><span class="line">            <span class="keyword">for</span> temp <span class="keyword">in</span> self.containsItem:</span><br><span class="line">                msg = msg + temp.getName() + <span class="string">", "</span></span><br><span class="line">            msg = msg.strip(<span class="string">", "</span>)</span><br><span class="line">        <span class="keyword">return</span> msg</span><br><span class="line">    <span class="comment">#容纳物品</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">accommodateItem</span><span class="params">(self,item)</span>:</span></span><br><span class="line">        <span class="comment">#如果可用面积大于物品的占用面积</span></span><br><span class="line">        needArea = item.getUsedArea()</span><br><span class="line">        <span class="keyword">if</span> self.area &gt; needArea:</span><br><span class="line">            self.containsItem.append(item)</span><br><span class="line">            self.area -= needArea</span><br><span class="line">            print(<span class="string">"ok:已经存放到房间中"</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"err:房间可用面积为:%d,但是当前要存放的物品需要的面积为%d"</span>%(self.area, needArea))</span><br><span class="line"><span class="comment">#定义bed类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bed</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,area,name = <span class="string">'床'</span>)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.area = area</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        msg = <span class="string">'床的面积为:'</span> + str(self.area)</span><br><span class="line">        <span class="keyword">return</span> msg</span><br><span class="line">    <span class="comment">#获取床的占用面积</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getUsedArea</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.area</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getName</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"><span class="comment">#创建一个新家对象</span></span><br><span class="line">newHome = Home(<span class="number">100</span>)<span class="comment">#100平米</span></span><br><span class="line">print(newHome)</span><br><span class="line"><span class="comment">#创建一个床对象</span></span><br><span class="line">newBed = Bed(<span class="number">20</span>)</span><br><span class="line">print(newBed)</span><br><span class="line"><span class="comment">#把床安放到家里</span></span><br><span class="line">newHome.accommodateItem(newBed)</span><br><span class="line">print(newHome)</span><br><span class="line"><span class="comment">#创建一个床对象</span></span><br><span class="line">newBed2 = Bed(<span class="number">30</span>,<span class="string">'席梦思'</span>)</span><br><span class="line">print(newBed2)</span><br><span class="line"><span class="comment">#把床安放到家里</span></span><br><span class="line">newHome.accommodateItem(newBed2)</span><br><span class="line">print(newHome)</span><br></pre></td></tr></table></figure><p><strong>总结</strong></p><ul><li>如果一个对象与另外一个对象有一定的关系，那么一个对象可以是另外一个对象的属性</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;toc&quot;&gt;

&lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#mian-xiang-dui-xiang&quot;&gt;面向对象&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#mian-xiang-dui-xiang-bian-cheng-jie-shao
      
    
    </summary>
    
      <category term="Python" scheme="http://baofengketang.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://baofengketang.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python基础(六)</title>
    <link href="http://baofengketang.com/2018/05/07/python_base/python_06/"/>
    <id>http://baofengketang.com/2018/05/07/python_base/python_06/</id>
    <published>2018-05-07T09:41:10.000Z</published>
    <updated>2018-05-08T01:08:40.000Z</updated>
    
    <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#wen-jian-cao-zuo">文件操作</a><ul><li><a href="#wen-jian-jie-shao">文件介绍</a></li><li><a href="#wen-jian-de-da-kai-yu-guan-bi">文件的打开与关闭</a></li><li><a href="#wen-jian-du-xie">文件读写</a></li><li><a href="#wen-jian-kao-bei">文件拷贝</a></li><li><a href="#wen-jian-de-ding-wei-du-xie">文件的定位读写</a></li><li><a href="#wen-jian-de-chong-ming-ming-shan-chu">文件的重命名、删除</a></li><li><a href="#wen-jian-jia-de-xiang-guan-cao-zuo">文件夹的相关操作</a></li><li><a href="#pi-liang-xiu-gai-wen-jian-ming">批量修改文件名</a></li></ul></li></ul><!-- tocstop --></div><h1><span id="wen-jian-cao-zuo">文件操作</span><a href="#wen-jian-cao-zuo" class="header-anchor">#</a></h1><h2><span id="wen-jian-jie-shao">文件介绍</span><a href="#wen-jian-jie-shao" class="header-anchor">#</a></h2><p><strong>1.文件的作用</strong></p><p>大家应该听说过一句话：“好记性不如烂笔头”。</p><p>不仅人的大脑会遗忘事情，计算机也会如此，比如一个程序在运行过程中用了九牛二虎之力终于计算出了结果，试想一下如果不把这些数据存放起来，相比重启电脑之后，“哭都没地方哭了”</p><p>可见，在把数据存储起来有做么大的价值</p><p>使用文件的目的：</p><blockquote><p>就是把一些存储存放起来，可以让程序下一次执行的时候直接使用，而不必重新制作一份，省时省力</p></blockquote><h2><span id="wen-jian-de-da-kai-yu-guan-bi">文件的打开与关闭</span><a href="#wen-jian-de-da-kai-yu-guan-bi" class="header-anchor">#</a></h2><p>想一想：</p><blockquote><p>如果想用word编写一份简历，应该有哪些流程呢？</p><ol><li>打开word软件，新建一个word文件</li><li>写入个人简历信息</li><li>保存文件</li><li>关闭word软件</li></ol></blockquote><p>同样，在操作文件的整体过程与使用word编写一份简历的过程是很相似的</p><blockquote><ol><li>打开文件，或者新建立一个文件</li><li>读/写数据</li><li>关闭文件</li></ol></blockquote><p><strong>1.打开文件</strong></p><p>在python，使用open函数，可以打开一个已经存在的文件，或者创建一个新文件</p><p>open(文件名，访问模式)</p><p>示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f = open(<span class="string">'test.txt'</span>, <span class="string">'w'</span>)</span><br></pre></td></tr></table></figure><p>说明:</p><table><thead><tr><th>访问模式</th><th>说明</th></tr></thead><tbody><tr><td>r</td><td>以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。</td></tr><tr><td>w</td><td>打开一个文件只用于写入。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</td></tr><tr><td>a</td><td>打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr><tr><td>rb</td><td>以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。</td></tr><tr><td>wb</td><td>以二进制格式打开一个文件只用于写入。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</td></tr><tr><td>ab</td><td>以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr><tr><td>r+</td><td>打开一个文件用于读写。文件指针将会放在文件的开头。</td></tr><tr><td>w+</td><td>打开一个文件用于读写。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</td></tr><tr><td>a+</td><td>打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。</td></tr><tr><td>rb+</td><td>以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。</td></tr><tr><td>wb+</td><td>以二进制格式打开一个文件用于读写。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</td></tr><tr><td>ab+</td><td>以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。</td></tr></tbody></table><p><strong>2.关闭文件</strong></p><p>close( )</p><p>示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新建一个文件，文件名为:test.txt</span></span><br><span class="line">f = open(<span class="string">'test.txt'</span>, <span class="string">'w'</span>)</span><br><span class="line"><span class="comment"># 关闭这个文件</span></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><h2><span id="wen-jian-du-xie">文件读写</span><a href="#wen-jian-du-xie" class="header-anchor">#</a></h2><p><strong>1.写数据（write）</strong></p><p>使用write()可以完成向文件写入数据</p><p>demo:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f = open(<span class="string">'/Users/jinzhong/hello.txt'</span>,<span class="string">'w'</span>);</span><br><span class="line">f.write(<span class="string">'helloworld,my name is jinzhong'</span>)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>运行结果</p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1525687414.png?imageMogr2/thumbnail/!70p" alt=""></p><p>注意：</p><ul><li>如果文件不存在那么创建，如果存在那么就先清空，然后写入数据</li></ul><p><strong>2.读数据（read）</strong></p><p>使用read(num)可以从文件中读取数据，num表示要从文件中读取的数据的长度（单位是字节），如果没有传入num，那么就表示读取文件中所有的数据</p><p>demo:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">f=open(<span class="string">"hello.txt"</span>,<span class="string">"r"</span>)</span><br><span class="line">content =f.read(<span class="number">5</span>)</span><br><span class="line">print(content)</span><br><span class="line">content=f.read()</span><br><span class="line">print(content)</span><br><span class="line">f.close();</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/Users/jinzhong/PycharmProjects/hello3/venv/bin/python /Users/jinzhong/PycharmProjects/hello3/demo/test11.py</span><br><span class="line">hello</span><br><span class="line">world,my name <span class="keyword">is</span> jinzhong</span><br><span class="line">Process finished <span class="keyword">with</span> exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>如果open是打开一个文件，那么可以不用写打开的模式，即只写 <code>open(&#39;test.txt&#39;)</code></li><li>如果使用读了多次，那么后面读取的数据是从上次读完后的位置开始的</li></ul><p><strong>3.读数据(readlines)</strong></p><p>就像read没有参数时一样，readlines可以按照行的方式把整个文件中的内容进行一次性读取，并且返回的是一个列表，其中每一行的数据为一个元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line">f = open(<span class="string">'test.txt'</span>, <span class="string">'r'</span>)</span><br><span class="line">content = f.readlines()</span><br><span class="line">print(type(content))</span><br><span class="line">i=<span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> temp <span class="keyword">in</span> content:</span><br><span class="line">    print(<span class="string">"%d:%s"</span>%(i, temp))</span><br><span class="line">    i+=<span class="number">1</span></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">/Users/jinzhong/PycharmProjects/hello3/venv/bin/python /Users/jinzhong/PycharmProjects/hello3/demo/test11.py</span><br><span class="line">&lt;class &apos;list&apos;&gt;</span><br><span class="line">1:helloworld,my name is jinzhong</span><br><span class="line"></span><br><span class="line">2:helloworld,my name is jinzhong</span><br><span class="line"></span><br><span class="line">3:helloworld,my name is jinzhong</span><br><span class="line"></span><br><span class="line">4:helloworld,my name is jinzhong</span><br><span class="line"></span><br><span class="line">5:helloworld,my name is jinzhong</span><br><span class="line"></span><br><span class="line">6:helloworld,my name is jinzhong</span><br><span class="line"></span><br><span class="line">7:helloworld,my name is jinzhong</span><br><span class="line"></span><br><span class="line">8:helloworld,my name is jinzhong</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><p><strong>4.读数据(readline)</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line">f = open(<span class="string">'test.txt'</span>, <span class="string">'r'</span>)</span><br><span class="line">content = f.readline()</span><br><span class="line">print(<span class="string">"1:%s"</span>%content)</span><br><span class="line">content = f.readline()</span><br><span class="line">print(<span class="string">"2:%s"</span>%content)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/Users/jinzhong/PycharmProjects/hello3/venv/bin/python /Users/jinzhong/PycharmProjects/hello3/demo/test11.py</span><br><span class="line">&lt;class &apos;list&apos;&gt;</span><br><span class="line">1:helloworld,my name is jinzhong</span><br><span class="line">2:helloworld,my name is jinzhong</span><br></pre></td></tr></table></figure><h2><span id="wen-jian-kao-bei">文件拷贝</span><a href="#wen-jian-kao-bei" class="header-anchor">#</a></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"></span><br><span class="line">oldFileName = input(<span class="string">"请输入要拷贝的文件名字:"</span>)</span><br><span class="line"></span><br><span class="line">oldFile = open(oldFileName,<span class="string">'r'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果打开文件</span></span><br><span class="line"><span class="keyword">if</span> oldFile:</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 提取文件的后缀</span></span><br><span class="line">    fileFlagNum = oldFileName.rfind(<span class="string">'.'</span>)</span><br><span class="line">    <span class="keyword">if</span> fileFlagNum &gt; <span class="number">0</span>:</span><br><span class="line">        fileFlag = oldFileName[fileFlagNum:]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 组织新的文件名字</span></span><br><span class="line">    newFileName = oldFileName[:fileFlagNum] + <span class="string">'[复件]'</span> + fileFlag</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建新文件</span></span><br><span class="line">    newFile = open(newFileName, <span class="string">'w'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 把旧文件中的数据，一行一行的进行复制到新文件中</span></span><br><span class="line">    <span class="keyword">for</span> lineContent <span class="keyword">in</span> oldFile.readlines():</span><br><span class="line">        newFile.write(lineContent)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 关闭文件</span></span><br><span class="line">    oldFile.close()</span><br><span class="line">    newFile.close()</span><br></pre></td></tr></table></figure><h2><span id="wen-jian-de-ding-wei-du-xie">文件的定位读写</span><a href="#wen-jian-de-ding-wei-du-xie" class="header-anchor">#</a></h2><p><strong>1.获取当前读写的位置</strong></p><p>在读写文件的过程中，如果想知道当前的位置，可以使用tell()来获取</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打开一个已经存在的文件</span></span><br><span class="line">f = open(<span class="string">"hello.txt"</span>, <span class="string">"r"</span>)</span><br><span class="line">str = f.read(<span class="number">3</span>)</span><br><span class="line">print(<span class="string">"读取的数据是 : "</span>, str)</span><br><span class="line"><span class="comment"># 查找当前位置</span></span><br><span class="line">position = f.tell()</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"当前文件位置 : "</span>, position)</span><br><span class="line">str = f.read(<span class="number">3</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"读取的数据是 : "</span>, str)</span><br><span class="line"><span class="comment"># 查找当前位置</span></span><br><span class="line">position = f.tell()</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"当前文件位置 : "</span>, position)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>运行结果</p><blockquote><p>/Users/jinzhong/PycharmProjects/hello3/venv/bin/python /Users/jinzhong/PycharmProjects/hello3/demo/test12.py<br>读取的数据是 :  hel<br>当前文件位置 :  3<br>读取的数据是 :  low<br>当前文件位置 :  6</p><p>Process finished with exit code 0</p></blockquote><p><strong>2.定位到某个位置</strong></p><p>如果在读写文件的过程中，需要从另外一个位置进行操作的话，可以使用seek()</p><p>seek(offset, from)有2个参数</p><p>offset:偏移量</p><p>from:方向</p><ul><li>0:表示文件开头</li><li>1:表示当前位置</li><li>2:表示文件末尾</li></ul><p>demo:把位置设置为：从文件开头，偏移5个字节</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打开一个已经存在的文件</span></span><br><span class="line">f = open(<span class="string">"hello.txt"</span>, <span class="string">"r"</span>)</span><br><span class="line">str = f.read(<span class="number">5</span>)</span><br><span class="line">print(<span class="string">"读取的数据是"</span>,str)</span><br><span class="line"><span class="comment"># 查找当前位置</span></span><br><span class="line">position = f.tell()</span><br><span class="line">print(<span class="string">"当前文件位置是"</span>,position)</span><br><span class="line"><span class="comment"># 重新设置位置</span></span><br><span class="line">f.seek(<span class="number">10</span>,<span class="number">0</span>)</span><br><span class="line"><span class="comment"># 查找当前位置</span></span><br><span class="line">position = f.tell()</span><br><span class="line">print(<span class="string">"当前文件位置是"</span>,position)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>demo:把位置设置为：离文件末尾</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打开一个已经存在的文件</span></span><br><span class="line">f = open(<span class="string">"hello.txt"</span>, <span class="string">"r"</span>)</span><br><span class="line"><span class="comment"># 查找当前位置</span></span><br><span class="line">position = f.tell()</span><br><span class="line">print(<span class="string">"当前文件位置是"</span>,position)</span><br><span class="line"><span class="comment"># 重新设置位置</span></span><br><span class="line">f.seek(<span class="number">0</span>, <span class="number">2</span>)</span><br><span class="line">print(<span class="string">"当前文件位置是"</span>,position)</span><br><span class="line"><span class="comment"># 读取到的数据为：文件最后3个字节数据</span></span><br><span class="line">str = f.read()</span><br><span class="line">print(<span class="string">"读取的数据是："</span>,str)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><h2><span id="wen-jian-de-chong-ming-ming-shan-chu">文件的重命名、删除</span><a href="#wen-jian-de-chong-ming-ming-shan-chu" class="header-anchor">#</a></h2><p>有些时候，需要对文件进行重命名、删除等一些操作，python的os模块中都有这么功能</p><p><strong>1.文件重命名</strong></p><p>os模块中的rename()可以完成对文件的重命名操作</p><p>rename(需要修改的文件名, 新的文件名)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">os.rename(<span class="string">"毕业论文.txt"</span>, <span class="string">"毕业论文-最终版.txt"</span>)</span><br></pre></td></tr></table></figure><p><strong>2.删除文件</strong></p><p>os模块中的remove()可以完成对文件的删除操作</p><p>remove(待删除的文件名)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.remove(<span class="string">"毕业论文.txt"</span>)</span><br></pre></td></tr></table></figure><h2><span id="wen-jian-jia-de-xiang-guan-cao-zuo">文件夹的相关操作</span><a href="#wen-jian-jia-de-xiang-guan-cao-zuo" class="header-anchor">#</a></h2><p>实际开发中，有时需要用程序的方式对文件夹进行一定的操作，比如创建、删除等</p><p>就像对文件操作需要os模块一样，如果要操作文件夹，同样需要os模块</p><p><strong>1.创建文件夹</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">os.mkdir(<span class="string">"test"</span>)</span><br></pre></td></tr></table></figure><p><strong>2.获取当前目录</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.getcwd()</span><br></pre></td></tr></table></figure><p><strong>3.改变默认目录</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.chdir(<span class="string">"../"</span>)</span><br></pre></td></tr></table></figure><p><strong>4.获取目录列表</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.listdir(<span class="string">"./"</span>)</span><br></pre></td></tr></table></figure><p><strong>5.删除文件夹</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.rmdir(<span class="string">"test"</span>)</span><br></pre></td></tr></table></figure><h2><span id="pi-liang-xiu-gai-wen-jian-ming">批量修改文件名</span><a href="#pi-liang-xiu-gai-wen-jian-ming" class="header-anchor">#</a></h2><p>参考代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="comment"># 批量在文件名前加前缀</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">folderName = <span class="string">'./test'</span></span><br><span class="line"><span class="comment"># 获取指定路径的所有文件名字</span></span><br><span class="line">dirList = os.listdir(folderName)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历输出所有文件名字</span></span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> dirList:</span><br><span class="line">    <span class="keyword">print</span> (name)</span><br><span class="line">    newName = <span class="string">'[sky]-'</span> + name</span><br><span class="line">    <span class="keyword">print</span> (newName)</span><br><span class="line">    os.rename(folderName+<span class="string">"/"</span>+name, folderName+<span class="string">"/"</span>+newName)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;toc&quot;&gt;

&lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#wen-jian-cao-zuo&quot;&gt;文件操作&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#wen-jian-jie-shao&quot;&gt;文件介绍&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href
      
    
    </summary>
    
      <category term="Python" scheme="http://baofengketang.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://baofengketang.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python基础(五)</title>
    <link href="http://baofengketang.com/2018/05/07/python_base/python_05/"/>
    <id>http://baofengketang.com/2018/05/07/python_base/python_05/</id>
    <published>2018-05-07T03:14:24.000Z</published>
    <updated>2018-05-07T09:35:12.000Z</updated>
    
    <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#han-shu">函数</a><ul><li><a href="#han-shu-jie-shao">函数介绍</a></li><li><a href="#han-shu-de-ding-yi-yu-diao-yong">函数的定义与调用</a></li><li><a href="#han-shu-de-wen-dang-shuo-ming">函数的文档说明</a></li><li><a href="#han-shu-can-shu-yi">函数参数（一）</a></li><li><a href="#han-shu-fan-hui-zhi-yi">函数返回值（一）</a></li><li><a href="#han-shu-de-lei-xing">函数的类型</a></li><li><a href="#han-shu-de-qian-tao-diao-yong">函数的嵌套调用</a></li><li><a href="#han-shu-de-ying-yong">函数的应用</a></li><li><a href="#ju-bu-bian-liang-he-quan-ju-bian-liang">局部变量和全局变量</a></li><li><a href="#han-shu-fan-hui-zhi-er">函数返回值（二）</a></li><li><a href="#han-shu-can-shu-er">函数参数（二）</a></li><li><a href="#di-gui-han-shu">递归函数</a></li><li><a href="#ni-ming-han-shu">匿名函数</a></li><li><a href="#han-shu-zong-jie">函数总结</a><ul><li><a href="#zi-ding-yi-han-shu">自定义函数</a></li><li><a href="#diao-yong-han-shu">调用函数</a></li><li><a href="#zuo-yong-yu">作用域</a></li></ul></li></ul></li></ul><!-- tocstop --></div><h1><span id="han-shu">函数</span><a href="#han-shu" class="header-anchor">#</a></h1><h2><span id="han-shu-jie-shao">函数介绍</span><a href="#han-shu-jie-shao" class="header-anchor">#</a></h2><p><strong>什么是函数</strong></p><p>先看如下代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> <span class="string">"                            _ooOoo_  "</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"                           o8888888o  "</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"                           88  .  88  "</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"                           (| -_- |)  "</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"                            O\\ = /O  "</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"                        ____/`---'\\____  "</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"                      .   ' \\| |// `.  "</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"                       / \\||| : |||// \\  "</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"                     / _||||| -:- |||||- \\  "</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"                       | | \\\\\\ - /// | |  "</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"                     | \\_| ''\\---/'' | |  "</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"                      \\ .-\\__ `-` ___/-. /  "</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"                   ___`. .' /--.--\\ `. . __  "</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"                ."</span><span class="string">" '&lt; `.___\\_&lt;|&gt;_/___.' &gt;'"</span><span class="string">".  "</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"               | | : `- \\`.;`\\ _ /`;.`/ - ` : | |  "</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"                 \\ \\ `-. \\_ __\\ /__ _/ .-` / /  "</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"         ======`-.____`-.___\\_____/___.-`____.-'======  "</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"                            `=---='  "</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"  "</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"         .............................................  "</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"                  佛祖镇楼                  BUG辟易  "</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"          佛曰:  "</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"                  写字楼里写字间，写字间里程序员；  "</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"                  程序人员写程序，又拿程序换酒钱。  "</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"                  酒醒只在网上坐，酒醉还来网下眠；  "</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"                  酒醉酒醒日复日，网上网下年复年。  "</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"                  但愿老死电脑间，不愿鞠躬老板前；  "</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"                  奔驰宝马贵者趣，公交自行程序员。  "</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"                  别人笑我忒疯癫，我笑自己命太贱；  "</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"                  不见满街漂亮妹，哪个归得程序员？"</span></span><br></pre></td></tr></table></figure><p>运行结果</p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1525663070.png?imageMogr2/thumbnail/!70p" alt=""></p><p>想一想：</p><blockquote><p>如果一个程序在不同的地方需要输出“佛祖镇楼”，程序应该怎样设计？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;     if 条件1:</span><br><span class="line">&gt;         输出‘佛祖镇楼’</span><br><span class="line">&gt; </span><br><span class="line">&gt;     ...(省略)...</span><br><span class="line">&gt; </span><br><span class="line">&gt;     if 条件2:</span><br><span class="line">&gt;         输出‘佛祖镇楼’</span><br><span class="line">&gt; </span><br><span class="line">&gt;     ...(省略)...</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>如果需要输出多次，是否意味着要编写这块代码多次呢？</p></blockquote><p><strong>小总结:</strong></p><p>如果在开发程序时，需要某块代码多次，但是为了提高编写的效率以及代码的重用，所以把具有独立功能的代码块组织为一个小模块，这就是函数</p><h2><span id="han-shu-de-ding-yi-yu-diao-yong">函数的定义与调用</span><a href="#han-shu-de-ding-yi-yu-diao-yong" class="header-anchor">#</a></h2><p><strong>定义函数</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def 函数名():</span><br><span class="line">        代码</span><br></pre></td></tr></table></figure><p>demo</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义一个函数，能够完成打印信息的功能</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printInfo</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'------------------------------------'</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'         人生苦短，我用Python'</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'------------------------------------'</span></span><br></pre></td></tr></table></figure><p><strong>调用函数</strong></p><p>定义了函数之后，就相当于有了一个具有某些功能的代码，想要让这些代码能够执行，需要调用它</p><p>调用函数很简单的，通过  <strong>函数名()</strong>  即可完成调用</p><p>demo:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义完函数后，函数是不会自动执行的，需要调用它才可以</span></span><br><span class="line">   printInfo()</span><br></pre></td></tr></table></figure><blockquote><p>练一练</p><p>要求：定义一个函数，能够输出自己的姓名和年龄，并且调用这个函数让它执行</p><ul><li>使用def定义函数</li><li>编写完函数之后，通过 <strong>函数名()</strong>  进行调用</li></ul></blockquote><h2><span id="han-shu-de-wen-dang-shuo-ming">函数的文档说明</span><a href="#han-shu-de-wen-dang-shuo-ming" class="header-anchor">#</a></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(a,b)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="string">"用来完成对2个数求和"</span></span><br><span class="line"><span class="meta">... </span>    print(<span class="string">"%d"</span>%(a+b))</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>test(<span class="number">11</span>,<span class="number">22</span>)</span><br><span class="line"><span class="number">33</span></span><br></pre></td></tr></table></figure><p>如果执行，以下代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>help(test)</span><br></pre></td></tr></table></figure><p>能够看到test函数的相关说明</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Help on function test <span class="keyword">in</span> module __main__:</span><br><span class="line"></span><br><span class="line">test(a, b)</span><br><span class="line">    用来完成对<span class="number">2</span>个数求和</span><br><span class="line">(END)</span><br></pre></td></tr></table></figure><h2><span id="han-shu-can-shu-yi">函数参数（一）</span><a href="#han-shu-can-shu-yi" class="header-anchor">#</a></h2><p>思考一个问题，如下：</p><blockquote><p>现在需要定义一个函数，这个函数能够完成2个数的加法运算，并且把结果打印出来，该怎样设计？下面的代码可以吗？有什么缺陷吗？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;    <span class="function"><span class="keyword">def</span> <span class="title">add2num</span><span class="params">()</span>:</span></span><br><span class="line">&gt;        a = <span class="number">11</span></span><br><span class="line">&gt;        b = <span class="number">22</span></span><br><span class="line">&gt;        c = a+b</span><br><span class="line">&gt;        <span class="keyword">print</span> c</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>为了让一个函数更通用，即想让它计算哪两个数的和，就让它计算哪两个数的和，在定义函数的时候可以让函数接收数据，就解决了这个问题，这就是 函数的参数</p><p><strong>1.定义一个带参数的函数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add2num</span><span class="params">(a, b)</span>:</span></span><br><span class="line">        c = a+b</span><br><span class="line">        <span class="keyword">print</span> c</span><br></pre></td></tr></table></figure><p><strong>2.调用带参数的函数</strong></p><p>以调用上面的add2num(a, b)函数为例:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add2num</span><span class="params">(a, b)</span>:</span></span><br><span class="line">        c = a+b</span><br><span class="line">        <span class="keyword">print</span> c</span><br><span class="line">add2num(<span class="number">11</span>, <span class="number">22</span>) <span class="comment">#调用带有参数的函数时，需要在小括号中，传递数据</span></span><br></pre></td></tr></table></figure><blockquote><p>练一练</p><p>要求：定义一个函数，完成前2个数完成加法运算，然后对第3个数，进行减法；然后调用这个函数</p><ul><li>使用def定义函数，要注意有3个参数</li><li>调用的时候，这个函数定义时有几个参数，那么就需要传递几个参数</li></ul></blockquote><p><strong>3.调用函数时参数的顺序</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(a,b)</span>:</span></span><br><span class="line"><span class="meta">... </span>    print(a,b)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>test(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>test(b=<span class="number">1</span>,a=<span class="number">2</span>)</span><br><span class="line"><span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>test(b=<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span></span><br><span class="line">SyntaxError: positional argument follows keyword argument</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p><strong>总结：</strong></p><blockquote><ul><li>定义时小括号中的参数，用来接收参数用的，称为 “形参”</li><li>调用时小括号中的参数，用来传递给函数用的，称为 “实参”</li></ul></blockquote><h2><span id="han-shu-fan-hui-zhi-yi">函数返回值（一）</span><a href="#han-shu-fan-hui-zhi-yi" class="header-anchor">#</a></h2><p><strong>1、返回值介绍</strong></p><p>现实生活中的场景:</p><blockquote><p>我给儿子10块钱，让他给我买包烟。这个例子中，10块钱是我给儿子的，就相当于调用函数时传递到参数，让儿子买烟这个事情最终的目标是，让他把烟给你带回来然后给你对么，，，此时烟就是返回值</p></blockquote><p>开发中的场景：</p><blockquote><p>定义了一个函数，完成了获取室内温度，想一想是不是应该把这个结果给调用者，只有调用者拥有了这个返回值，才能够根据当前的温度做适当的调整</p></blockquote><p>综上所述：</p><ul><li>所谓“返回值”，就是程序中函数完成一件事情后，最后给调用者的结果</li></ul><p><strong>2、带返回值的函数</strong></p><p>想要在函数中把结果返回给调用者，需要在函数中使用return</p><p>如下示例:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add2num</span><span class="params">(a, b)</span>:</span></span><br><span class="line">        c = a+b</span><br><span class="line">        <span class="keyword">return</span> c</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add2num</span><span class="params">(a, b)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> a+b</span><br></pre></td></tr></table></figure><p><strong>3、保存函数的返回值</strong></p><p>刚刚买烟的例子中，最后儿子给你烟时，你一定是从儿子手中接过来 对么，程序也是如此，如果一个函数返回了一个数据，那么想要用这个数据，那么就需要保存</p><p>保存函数的返回值示例如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add2num</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> a+b</span><br><span class="line"><span class="comment">#调用函数，顺便保存函数的返回值</span></span><br><span class="line">result = add2num(<span class="number">100</span>,<span class="number">98</span>)</span><br><span class="line"><span class="comment">#因为result已经保存了add2num的返回值，所以接下来就可以使用了</span></span><br><span class="line"><span class="keyword">print</span> result</span><br></pre></td></tr></table></figure><h2><span id="han-shu-de-lei-xing">函数的类型</span><a href="#han-shu-de-lei-xing" class="header-anchor">#</a></h2><p>函数根据有没有参数，有没有返回值，可以相互组合，一共有4种</p><ul><li>无参数，无返回值</li><li>无参数，又反悔</li><li>有参数，无返回值</li><li>有参数，有返回值</li></ul><p><strong>1.无参数，无返回值的函数</strong></p><p>此类函数，不能接收参数，也没有返回值，一般情况下，打印提示灯类似的功能，使用这类的函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printMenu</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'--------------------------'</span>)</span><br><span class="line">    print(<span class="string">'      xx涮涮锅 点菜系统'</span>)</span><br><span class="line">    print(<span class="string">''</span>)</span><br><span class="line">    print(<span class="string">'  1.  羊肉涮涮锅'</span>)</span><br><span class="line">    print(<span class="string">'  2.  牛肉涮涮锅'</span>)</span><br><span class="line">    print(<span class="string">'  3.  猪肉涮涮锅'</span>)</span><br><span class="line">    print(<span class="string">'--------------------------'</span>)</span><br></pre></td></tr></table></figure><p><strong>2.无参数，有返回值的函数</strong></p><p>此类函数，不能接收参数，但是可以返回某个数据，一般情况下，像采集数据，用此类函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取温度</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">getTemperature</span><span class="params">()</span>:</span></span><br><span class="line">      <span class="comment">#这里是获取温度的一些处理过程</span></span><br><span class="line">      <span class="comment">#为了简单起见，先模拟返回一个数据</span></span><br><span class="line">      <span class="keyword">return</span> <span class="number">24</span></span><br><span class="line">  temperature = getTemperature()</span><br><span class="line">  print(<span class="string">'当前的温度为:%d'</span>%temperature)</span><br></pre></td></tr></table></figure><p><strong>3.有参数，无返回值的函数</strong></p><p>此类函数，能接收参数，但不可以返回数据，一般情况下，对某些变量设置数据而不需结果时，用此类函数</p><p><strong>4.有参数，有返回值的函数</strong></p><p>此类函数，不仅能接收参数，还可以返回某个数据，一般情况下，像数据处理并需要结果的应用，用此类函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 计算1~num的累积和</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">calculateNum</span><span class="params">(num)</span>:</span></span><br><span class="line">        result = <span class="number">0</span></span><br><span class="line">        i = <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> i&lt;=num:</span><br><span class="line">            result = result + i</span><br><span class="line">            i+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    result = calculateNum(<span class="number">100</span>)</span><br><span class="line">    print(<span class="string">'1~100的累积和为:%d'</span>%result)</span><br></pre></td></tr></table></figure><p><strong>总结</strong></p><blockquote><ul><li>函数根据有没有参数，有没有返回值可以相互组合</li><li>定义函数时，是根据实际的功能需求来设计的，所以不同开发人员编写的函数类型各不相同</li></ul></blockquote><h2><span id="han-shu-de-qian-tao-diao-yong">函数的嵌套调用</span><a href="#han-shu-de-qian-tao-diao-yong" class="header-anchor">#</a></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">testB</span><span class="params">()</span>:</span></span><br><span class="line">       print(<span class="string">'---- testB start----'</span>)</span><br><span class="line">       print(<span class="string">'这里是testB函数执行的代码...(省略)...'</span>)</span><br><span class="line">       print(<span class="string">'---- testB end----'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">testA</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">       print(<span class="string">'---- testA start----'</span>)</span><br><span class="line"></span><br><span class="line">       testB()</span><br><span class="line"></span><br><span class="line">       print(<span class="string">'---- testA end----'</span>)</span><br><span class="line"></span><br><span class="line">   testA()</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---- testA start----</span><br><span class="line">---- testB start----</span><br><span class="line">这里是testB函数执行的代码...(省略)...</span><br><span class="line">---- testB end----</span><br><span class="line">---- testA end----</span><br></pre></td></tr></table></figure><p><strong>总结</strong></p><blockquote><p>一个函数里面又调用了另外一个函数，这就是所谓的函数嵌套调用 </p><p>如果函数A中，调用了另外一个函数B，那么先把函数B中的任务都执行完毕之后才会回到上次 函数A执行的位置</p></blockquote><h2><span id="han-shu-de-ying-yong">函数的应用</span><a href="#han-shu-de-ying-yong" class="header-anchor">#</a></h2><p>练习1:</p><blockquote><p>写一个函数打印一条横线</p><p>打印自定义行数的横线</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打印一条横线</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printOneLine</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"-"</span>*<span class="number">30</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印多条横线</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printNumLine</span><span class="params">(num)</span>:</span></span><br><span class="line">    i=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 因为printOneLine函数已经完成了打印横线的功能，</span></span><br><span class="line">    <span class="comment"># 只需要多次调用此函数即可</span></span><br><span class="line">    <span class="keyword">while</span> i&lt;num:</span><br><span class="line">        printOneLine()</span><br><span class="line">        i+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">printNumLine(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>练习2:</p><blockquote><p>写一个函数求三个数的和 </p><p>写一个函数求三个数的平均值</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 求3个数的和</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum3Number</span><span class="params">(a,b,c)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> a+b+c <span class="comment"># return 的后面可以是数值，也可是一个表达式</span></span><br><span class="line"><span class="comment"># 完成对3个数求平均值</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">average3Number</span><span class="params">(a,b,c)</span>:</span></span><br><span class="line">    <span class="comment"># 因为sum3Number函数已经完成了3个数的就和，所以只需调用即可</span></span><br><span class="line">    <span class="comment"># 即把接收到的3个数，当做实参传递即可</span></span><br><span class="line">    sumResult = sum3Number(a,b,c)</span><br><span class="line">    aveResult = sumResult/<span class="number">3.0</span></span><br><span class="line">    <span class="keyword">return</span> aveResult</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用函数，完成对3个数求平均值</span></span><br><span class="line">result = average3Number(<span class="number">11</span>,<span class="number">2</span>,<span class="number">55</span>)</span><br><span class="line">print(<span class="string">"average is %d"</span>%result)</span><br></pre></td></tr></table></figure><h2><span id="ju-bu-bian-liang-he-quan-ju-bian-liang">局部变量和全局变量</span><a href="#ju-bu-bian-liang-he-quan-ju-bian-liang" class="header-anchor">#</a></h2><p><strong>1.局部变量</strong></p><blockquote><p>局部变量，就是在函数内部定义的变量</p><p>不同的函数，可以定义相同的名字的局部变量，但是各用个的不会产生影响</p><p>局部变量的作用，为了临时保存数据需要在函数中定义变量来进行存储，这就是它的作用</p></blockquote><p>案例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">    a=<span class="number">100</span></span><br><span class="line">    print(a)</span><br><span class="line">    a=<span class="number">200</span></span><br><span class="line">    print(a)</span><br><span class="line">test()</span><br></pre></td></tr></table></figure><p><strong>2.全局变量</strong></p><p>如果一个变量，既能在一个函数中使用，也能在其他的函数中使用，这样的变量就是全局变量</p><p>案例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义全局变量</span></span><br><span class="line">a = <span class="number">100</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test1</span><span class="params">()</span>:</span></span><br><span class="line">    print(a)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test2</span><span class="params">()</span>:</span></span><br><span class="line">    print(a)</span><br><span class="line"><span class="comment"># 调用函数</span></span><br><span class="line">test1()</span><br><span class="line">test2()</span><br></pre></td></tr></table></figure><p><strong>3.全局变量和局部变量相同问题</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">100</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test1</span><span class="params">()</span>:</span></span><br><span class="line">    a =<span class="number">200</span></span><br><span class="line">    print(a)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test2</span><span class="params">()</span>:</span></span><br><span class="line">    a=<span class="number">300</span></span><br><span class="line">    print(a)</span><br><span class="line"><span class="comment"># 调用函数</span></span><br><span class="line">test1()</span><br></pre></td></tr></table></figure><p>优先访问局部变量</p><p><strong>4.修改全局变量</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义全局变量</span></span><br><span class="line">a = <span class="number">100</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> a</span><br><span class="line">    a =<span class="number">200</span></span><br><span class="line">    print(a)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test2</span><span class="params">()</span>:</span></span><br><span class="line">    print(a)</span><br><span class="line"><span class="comment"># 调用函数</span></span><br><span class="line">test1()</span><br><span class="line">test2()</span><br></pre></td></tr></table></figure><p><strong>4.总结</strong></p><blockquote><ul><li>在函数外边定义的变量叫做全局变量</li><li>全局变量能够在所有的函数中进行访问</li><li>如果在函数中修改全局变量，那么就需要使用<code>global</code>进行声明，否则出错</li><li>如果全局变量的名字和局部变量的名字相同，那么使用的是局部变量的</li></ul></blockquote><p><strong>可变类型的局部变量</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">... </span>    a += <span class="number">1</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">print</span> a</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f()</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">2</span>, <span class="keyword">in</span> f</span><br><span class="line">UnboundLocalError: local variable <span class="string">'a'</span> referenced before assignment</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>li = [<span class="number">1</span>,]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">... </span>    li.append(<span class="number">1</span>)</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">print</span> li</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f2()</span><br><span class="line">[<span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>li</span><br><span class="line">[<span class="number">1</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure><p><strong>总结</strong></p><blockquote><ul><li>在函数中不使用global声明全局变量时不能修改全局变量的本质是不能修改全局变量的指向，即不能将全局变量指向新的数据。</li><li>对于不可变类型的全局变量来说，因其指向的数据不能修改，所以不使用global时无法修改全局变量。</li><li>对于可变类型的全局变量来说，因其指向的数据可以修改，所以不使用global时也可修改全局变量。</li></ul></blockquote><h2><span id="han-shu-fan-hui-zhi-er">函数返回值（二）</span><a href="#han-shu-fan-hui-zhi-er" class="header-anchor">#</a></h2><p><strong>在函数中我们可不可以返回多个值</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">divid</span><span class="params">(a, b)</span>:</span></span><br><span class="line"><span class="meta">... </span>    shang = a//b</span><br><span class="line"><span class="meta">... </span>    yushu = a%b </span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> shang, yushu</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sh, yu = divid(<span class="number">5</span>, <span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sh</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>yu</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>本质是利用了元组</p><h2><span id="han-shu-can-shu-er">函数参数（二）</span><a href="#han-shu-can-shu-er" class="header-anchor">#</a></h2><p><strong>1.缺省参数</strong></p><p>调用函数时，缺省参数的值如果没有传入，则被认为是默认值。下例会打印默认的age，如果age没有被传入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printinfo</span><span class="params">( name, age = <span class="number">35</span> )</span>:</span></span><br><span class="line">   <span class="comment"># 打印任何传入的字符串</span></span><br><span class="line">   <span class="keyword">print</span> <span class="string">"Name: "</span>, name</span><br><span class="line">   <span class="keyword">print</span> <span class="string">"Age "</span>, age</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用printinfo函数</span></span><br><span class="line">printinfo(name=<span class="string">"miki"</span> )</span><br><span class="line">printinfo( age=<span class="number">9</span>,name=<span class="string">"miki"</span> )</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Name:  miki</span><br><span class="line">Age  35</span><br><span class="line">Name:  miki</span><br><span class="line">Age  9</span><br></pre></td></tr></table></figure><p><strong>注意：带有默认值的参数一定要位于参数列表的最后面。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">printinfo</span><span class="params">(name, age=<span class="number">35</span>, sex)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">print</span> name</span><br><span class="line">...</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span></span><br><span class="line">SyntaxError: non-default argument follows default argument</span><br></pre></td></tr></table></figure><p><strong>2.不定长参数</strong></p><p>有时可能需要一个函数能处理比当初声明时更多的参数。这些参数叫做不定长参数，声明时不会命名。</p><p>基本语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">functionname</span><span class="params">([formal_args,] *args, **kwargs)</span>:</span></span><br><span class="line">       <span class="string">"函数_文档字符串"</span></span><br><span class="line">       function_suite</span><br><span class="line">       <span class="keyword">return</span> [expression]</span><br></pre></td></tr></table></figure><p>加了星号（*）的变量args会存放所有未命名的变量参数，args为元组；而加**的变量kwargs会存放命名参数，即形如key=value的参数， kwargs为字典。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(a, b, *args, **kwargs)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="string">"""可变参数演示示例"""</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">print</span> <span class="string">"a ="</span>, a</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">print</span> <span class="string">"b ="</span>, b</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">print</span> <span class="string">"args ="</span>, args</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">print</span> <span class="string">"kwargs: "</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">for</span> key, value <span class="keyword">in</span> kwargs.items():</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">print</span> key, <span class="string">"="</span>, value</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fun(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, m=<span class="number">6</span>, n=<span class="number">7</span>, p=<span class="number">8</span>)  <span class="comment"># 注意传递的参数对应</span></span><br><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="number">2</span></span><br><span class="line">args = (<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">kwargs: </span><br><span class="line">p = <span class="number">8</span></span><br><span class="line">m = <span class="number">6</span></span><br><span class="line">n = <span class="number">7</span></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = (<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = &#123;<span class="string">"m"</span>:<span class="number">6</span>, <span class="string">"n"</span>:<span class="number">7</span>, <span class="string">"p"</span>:<span class="number">8</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fun(<span class="number">1</span>, <span class="number">2</span>, *c, **d)    <span class="comment"># 注意元组与字典的传参方式</span></span><br><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="number">2</span></span><br><span class="line">args = (<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">kwargs: </span><br><span class="line">p = <span class="number">8</span></span><br><span class="line">m = <span class="number">6</span></span><br><span class="line">n = <span class="number">7</span></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fun(<span class="number">1</span>, <span class="number">2</span>, c, d) <span class="comment"># 注意不加星号与上面的区别</span></span><br><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="number">2</span></span><br><span class="line">args = ((<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>), &#123;<span class="string">'p'</span>: <span class="number">8</span>, <span class="string">'m'</span>: <span class="number">6</span>, <span class="string">'n'</span>: <span class="number">7</span>&#125;)</span><br><span class="line">kwargs:</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p><strong>3.引用传参</strong></p><ul><li>可变类型与不可变类型的变量分别作为函数参数时，会有什么不同吗？</li><li>Python有没有类似C语言中的指针传参呢？</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">selfAdd</span><span class="params">(a)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="string">"""自增"""</span></span><br><span class="line"><span class="meta">... </span>    a += a</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a_int = <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a_int</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>selfAdd(a_int)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a_int</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a_list = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a_list</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>selfAdd(a_list)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a_list</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br></pre></td></tr></table></figure><p><strong>Python中函数参数是引用传递（注意不是值传递）。对于不可变类型，因变量不能修改，所以运算不会影响到变量自身；而对于可变类型来说，函数体中的运算有可能会更改传入的参数变量。</strong></p><p><strong>想一想为什么</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">selfAdd</span><span class="params">(a)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="string">"""自增"""</span></span><br><span class="line"><span class="meta">... </span>    a = a + a   <span class="comment"># 我们更改了函数体的这句话</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a_int = <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a_int</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>selfAdd(a_int)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a_int</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a_list = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a_list</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>selfAdd(a_list)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a_list</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>]      <span class="comment"># 想一想为什么没有变呢？</span></span><br></pre></td></tr></table></figure><h2><span id="di-gui-han-shu">递归函数</span><a href="#di-gui-han-shu" class="header-anchor">#</a></h2><p><strong>1.什么是递归函数</strong></p><p>通过前面的学习知道一个函数可以调用其他函数。</p><p>如果一个函数在内部不调用其它的函数，而是自己本身的话，这个函数就是递归函数。</p><p><strong>2.递归的作用</strong></p><p>举个例子，我们来计算阶乘 <code>n! = 1 * 2 * 3 * ... * n</code></p><p>解决办法1:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getJieCheng</span><span class="params">(n)</span>:</span></span><br><span class="line"></span><br><span class="line">    i=<span class="number">1</span></span><br><span class="line">    sum=<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> i&lt;=n:</span><br><span class="line">        sum=sum*i</span><br><span class="line">        i=i+<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line">print(getJieCheng(<span class="number">5</span>))</span><br><span class="line">print(getJieCheng(<span class="number">4</span>))</span><br><span class="line">print(getJieCheng(<span class="number">3</span>))</span><br><span class="line">print(getJieCheng(<span class="number">2</span>))</span><br><span class="line">print(getJieCheng(<span class="number">1</span>))</span><br></pre></td></tr></table></figure><p>看阶乘的规律</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1! = 1</span><br><span class="line">2! = 2 × 1 = 2 × 1!</span><br><span class="line">3! = 3 × 2 × 1 = 3 × 2!</span><br><span class="line">4! = 4 × 3 × 2 × 1 = 4 × 3!</span><br><span class="line">...</span><br><span class="line">n! = n × (n-1)!</span><br></pre></td></tr></table></figure><p>解决办法2:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getJieCheng2</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> n*getJieCheng2(n<span class="number">-1</span>)</span><br><span class="line">print(getJieCheng2(<span class="number">5</span>))</span><br><span class="line">print(getJieCheng2(<span class="number">4</span>))</span><br><span class="line">print(getJieCheng2(<span class="number">3</span>))</span><br><span class="line">print(getJieCheng2(<span class="number">2</span>))</span><br></pre></td></tr></table></figure><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1525682328.png?imageMogr2/thumbnail/!70p" alt=""></p><h2><span id="ni-ming-han-shu">匿名函数</span><a href="#ni-ming-han-shu" class="header-anchor">#</a></h2><p>用lambda关键词能创建小型匿名函数。这种函数得名于省略了用def声明函数的标准步骤。</p><p>lambda函数的语法只包含一个语句，如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lambda</span> [arg1 [,arg2,.....argn]]:expression</span><br></pre></td></tr></table></figure><p>如下实例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sum = <span class="keyword">lambda</span> arg1, arg2: arg1 + arg2</span><br><span class="line"><span class="comment">#调用sum函数</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"Value of total : "</span>, sum( <span class="number">10</span>, <span class="number">20</span> )</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Value of total : "</span>, sum( <span class="number">20</span>, <span class="number">20</span> )</span><br></pre></td></tr></table></figure><p>以上实例的输出结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Value of total :  30</span><br><span class="line">Value of total :  40</span><br></pre></td></tr></table></figure><p>Lambda函数能接收任何数量的参数但只能返回一个表达式的值</p><p>匿名函数不能直接调用print，因为lambda需要一个表达式</p><p><strong>应用场合</strong></p><blockquote><p>函数作为参数传递</p><p>1.自己定义函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; &gt;&gt;&gt; <span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(a, b, opt)</span>:</span></span><br><span class="line">&gt; ...     <span class="keyword">print</span> <span class="string">"a ="</span>, a</span><br><span class="line">&gt; ...     <span class="keyword">print</span> <span class="string">"b ="</span>, b</span><br><span class="line">&gt; ...     <span class="keyword">print</span> <span class="string">"result ="</span>, opt(a, b)</span><br><span class="line">&gt; ...</span><br><span class="line">&gt; &gt;&gt;&gt; fun(<span class="number">1</span>, <span class="number">2</span>, <span class="keyword">lambda</span> x,y:x+y)</span><br><span class="line">&gt; a = <span class="number">1</span></span><br><span class="line">&gt; b = <span class="number">2</span></span><br><span class="line">&gt; result = <span class="number">3</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>2、作为内置函数的参数</p><p>想一想，下面的数据如何指定按age或name排序？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; stus = [</span><br><span class="line">&gt;     &#123;<span class="string">"name"</span>:<span class="string">"zhangsan"</span>, <span class="string">"age"</span>:<span class="number">18</span>&#125;, </span><br><span class="line">&gt;     &#123;<span class="string">"name"</span>:<span class="string">"lisi"</span>, <span class="string">"age"</span>:<span class="number">19</span>&#125;, </span><br><span class="line">&gt;     &#123;<span class="string">"name"</span>:<span class="string">"wangwu"</span>, <span class="string">"age"</span>:<span class="number">17</span>&#125;</span><br><span class="line">&gt; ]</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>按name排序：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; &gt;&gt;&gt; stus.sort(key = <span class="keyword">lambda</span> x:x[<span class="string">'name'</span>])</span><br><span class="line">&gt; &gt;&gt;&gt; stus</span><br><span class="line">&gt; [&#123;<span class="string">'age'</span>: <span class="number">19</span>, <span class="string">'name'</span>: <span class="string">'lisi'</span>&#125;, &#123;<span class="string">'age'</span>: <span class="number">17</span>, <span class="string">'name'</span>: <span class="string">'wangwu'</span>&#125;, &#123;<span class="string">'age'</span>: <span class="number">18</span>, <span class="string">'name'</span>: <span class="string">'zhangsan'</span>&#125;]</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>按age排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; &gt;&gt;&gt; stus.sort(key = <span class="keyword">lambda</span> x:x[<span class="string">'age'</span>])</span><br><span class="line">&gt; &gt;&gt;&gt; stus</span><br><span class="line">&gt; [&#123;<span class="string">'age'</span>: <span class="number">17</span>, <span class="string">'name'</span>: <span class="string">'wangwu'</span>&#125;, &#123;<span class="string">'age'</span>: <span class="number">18</span>, <span class="string">'name'</span>: <span class="string">'zhangsan'</span>&#125;, &#123;<span class="string">'age'</span>: <span class="number">19</span>, <span class="string">'name'</span>: <span class="string">'lisi'</span>&#125;]</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h2><span id="han-shu-zong-jie">函数总结</span><a href="#han-shu-zong-jie" class="header-anchor">#</a></h2><h3><span id="zi-ding-yi-han-shu">自定义函数</span><a href="#zi-ding-yi-han-shu" class="header-anchor">#</a></h3><p><strong>1.无参数、无返回值</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> 函数名<span class="params">()</span>:</span></span><br><span class="line">       语句</span><br></pre></td></tr></table></figure><p><strong>2.无参数、有返回值</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> 函数名<span class="params">()</span>:</span></span><br><span class="line">        语句</span><br><span class="line">        <span class="keyword">return</span> 需要返回的数值</span><br></pre></td></tr></table></figure><p>注意:</p><ul><li>一个函数到底有没有返回值，就看有没有return，因为只有return才可以返回数据</li><li>在开发中往往根据需求来设计函数需不需要返回值</li><li>函数中，可以有多个return语句，但是只要执行到一个return语句，那么就意味着这个函数的调用完成</li></ul><p><strong>3.有参数、无返回值</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> 函数名<span class="params">(形参列表)</span>:</span></span><br><span class="line">       语句</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>在调用函数时，如果需要把一些数据一起传递过去，被调用函数就需要用参数来接收</li><li>参数列表中变量的个数根据实际传递的数据的多少来确定</li></ul><p><strong>4.有参数，有返回值</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> 函数名<span class="params">(形参列表)</span>:</span></span><br><span class="line">       语句</span><br><span class="line">       <span class="keyword">return</span> 需要返回的数值</span><br></pre></td></tr></table></figure><p><strong>注意：函数名不能同名</strong></p><h3><span id="diao-yong-han-shu">调用函数</span><a href="#diao-yong-han-shu" class="header-anchor">#</a></h3><p><strong>调用的方式为：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">函数名([实参列表])</span><br></pre></td></tr></table></figure><p><strong>调用时，到底写不写实参</strong></p><ul><li>如果调用的函数 在定义时有形参，那么在调用的时候就应该传递参数</li></ul><p><strong>调用时，实参的个数和先后顺序应该和定义函数中要求的一致</strong></p><p><strong>如果调用的函数有返回值，那么就可以用一个变量来进行保存这个值</strong></p><h3><span id="zuo-yong-yu">作用域</span><a href="#zuo-yong-yu" class="header-anchor">#</a></h3><blockquote><p>在一个函数中定义的变量，只能在本函数中用(局部变量)</p><p>在函数外定义的变量，可以在所有的函数中使用(全局变量)</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;toc&quot;&gt;

&lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#han-shu&quot;&gt;函数&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#han-shu-jie-shao&quot;&gt;函数介绍&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#han-shu-d
      
    
    </summary>
    
      <category term="Python" scheme="http://baofengketang.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://baofengketang.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Linux基础(一)</title>
    <link href="http://baofengketang.com/2018/05/04/linux/linux_01/"/>
    <id>http://baofengketang.com/2018/05/04/linux/linux_01/</id>
    <published>2018-05-04T08:20:36.000Z</published>
    <updated>2018-05-13T04:43:10.000Z</updated>
    
    <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#linux-xi-tong-de-fa-zhan-shi">Linux系统的发展史</a><ul><li><a href="#unix-xi-tong">Unix系统</a></li><li><a href="#minix">Minix</a></li><li><a href="#liunx">Liunx</a></li><li><a href="#zong-jie">总结</a></li></ul></li></ul><!-- tocstop --></div><h1><span id="linux-xi-tong-de-fa-zhan-shi">Linux系统的发展史</span><a href="#linux-xi-tong-de-fa-zhan-shi" class="header-anchor">#</a></h1><h2><span id="unix-xi-tong">Unix系统</span><a href="#unix-xi-tong" class="header-anchor">#</a></h2><p>1965年之前的时候， 电脑并不像现在⼀样普遍， 它可不是⼀般⼈能碰的起的， 除⾮是军事或者学院的研究机构， ⽽且当时⼤型主机⾄多能提供30台终端（30个键盘、 显示器)， 连接⼀台电脑</p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1523518478.png?imageMogr2/thumbnail/!70p" alt=""></p><p>为了解决数量不够⽤的问题，1965年左后由⻉尔实验室、 麻省理⼯学院以及通⽤电⽓共同发起了<strong>Multics</strong>项⽬， 想让⼤型主机⽀持300台终端</p><p>1969年前后这个项⽬进度缓慢， 资⾦短缺， ⻉尔实验室退出了研究</p><p>1969年从这个项⽬中退出的Ken Thompson当时在实验室⽆聊时， 为了让⼀台空闲的电脑上能够运⾏“星际旅⾏”游⾏， 在8⽉份左右趁着其妻⼦探亲的时间， ⽤了1个⽉的时间编写出了Unix操作系统的原型</p><p>1970年， 美国⻉尔实验室的 <strong>Ken Thompson</strong>， 以 BCPL语⾔ 为基础， 设计出很简单且很接近硬件的 B语⾔（取BCPL的⾸字⺟） ， 并且他⽤B语⾔写了第⼀个UNIX操作系统。因为B语⾔的跨平台性较差， 为了能够在其他的电脑上也能够运⾏这个⾮常棒的Unix操作系统， Dennis Ritchie和Ken Thompson 从B语⾔的基础上准备研究⼀个更好的语言</p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1523518810.png?imageMogr2/thumbnail/!70p" alt=""></p><p>1972年， 美国⻉尔实验室的 Dennis Ritchie在B语⾔的基础上最终设计出了⼀种新的语⾔， 他取了BCPL的第⼆个字⺟作为这种语⾔的名字， 这就是C语⾔</p><p>1973年初， C语⾔的主体完成。 Thompson和Ritchie迫不及待地开始⽤它完全重写了现在⼤名鼎鼎的Unix操作系统</p><h2><span id="minix">Minix</span><a href="#minix" class="header-anchor">#</a></h2><p>因为AT&amp;T(通⽤电⽓)的政策改变， 在Version 7 Unix推出之后， 发布新的使⽤条款， 将UNIX源代码私有化， 在⼤学中不再能使⽤UNIX源代码。 Andrew S. Tanenbaum(塔能鲍姆)教授为了能在课堂上教授学⽣操作系统运作的实务细节， 决定在不使⽤任何AT&amp;T的源代码前提下， ⾃⾏开发与UNIX兼容的操作系统， 以避免版权上的争议。 他以⼩型UNIX（mini-UNIX） 之意， 将它称为MINIX(仅用于教学，不做商用)</p><h2><span id="liunx">Liunx</span><a href="#liunx" class="header-anchor">#</a></h2><p>因为Minix只是教学使⽤， 因此功能并不强， 因此Torvalds利⽤GNU的bash当做开发环境， gcc当做编译⼯具， 编写了Linux内核-v0.02， 但是⼀开始Linux并不能兼容Unix， 即Unix上跑的应⽤程序不能在Linux上跑， 即应⽤程序与内核之间的接⼝不⼀致， 因为Unix是遵循POSIX规范的， 因此Torvalds修改了Linux， 并遵循POSIX（Portable OperatingSystem Interface， 他规范了应⽤程序与内核的接⼝规范） ； ⼀开始Linux只适⽤于386，后来经过全世界的⽹友的帮助， 最终能够兼容多种硬件；</p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1523521142.png?imageMogr2/thumbnail/!70p" alt=""></p><h2><span id="zong-jie">总结</span><a href="#zong-jie" class="header-anchor">#</a></h2><p><strong>Minix没有⽕起来的原因</strong></p><blockquote><p>Minix的创始⼈说， MINIX 3没有统治世界是源于他在1992年犯下的⼀个错误， 当时他认为BSD必然会⼀统天下， 因为它是⼀个更稳定和更成熟的系统， 其它操作系统难以与之竞争。 因此他的MINIX的重⼼集中在教育上。 四名BSD开发者已经成⽴了⼀家公司销售BSD系统， 他们甚⾄还有⼀个有趣的电话号码1-800-ITS-UNIX。 然⽽他们正因为这个电话号码⽽惹⽕上身。 美国电话电报公司因电话号码⽽提起诉讼。官司打了三年才解决。 在此期间， BSD陷于停滞， ⽽Linux则借此⼀⻜冲天。 他的错误在于没有意识官司竟然持续了如此⻓的时间， 以及BSD会因此受到削弱。 如果美国电话电报公司没有起诉， Linux永远不会流⾏起来， BSD将统治世界。</p></blockquote><p><strong>Linux现在版本</strong><br><strong>_<code></code>_</strong><br><img src="http://p6wdo7p1v.bkt.clouddn.com/1523524203.png?imageMogr2/thumbnail/!70p" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;toc&quot;&gt;

&lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#linux-xi-tong-de-fa-zhan-shi&quot;&gt;Linux系统的发展史&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#unix-xi-tong&quot;&gt;Unix系统&lt;/a&gt;&lt;
      
    
    </summary>
    
      <category term="linux" scheme="http://baofengketang.com/categories/linux/"/>
    
    
      <category term="linux" scheme="http://baofengketang.com/tags/linux/"/>
    
      <category term="操作系统" scheme="http://baofengketang.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>解决Ubuntu中vi命令的编辑模式下不能正常使用方向键和退格键的问题</title>
    <link href="http://baofengketang.com/2018/05/04/vim/vim_02/"/>
    <id>http://baofengketang.com/2018/05/04/vim/vim_02/</id>
    <published>2018-05-04T02:43:05.000Z</published>
    <updated>2018-05-04T02:45:44.000Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="jie-jue-ubuntu-zhong-vi-ming-ling-de-bian-ji-mo-shi-xia-bu-neng-zheng-chang-shi-yong-fang-xiang-jian-he-tui-ge-jian-de-wen-ti">解决Ubuntu中vi命令的编辑模式下不能正常使用方向键和退格键的问题</span><a href="#jie-jue-ubuntu-zhong-vi-ming-ling-de-bian-ji-mo-shi-xia-bu-neng-zheng-chang-shi-yong-fang-xiang-jian-he-tui-ge-jian-de-wen-ti" class="header-anchor">#</a></h1><p>在Ubuntu中，进入vi命令的编辑模式，发现按方向键不能移动光标，而是会输出ABCD，以及退格键也不能正常删除字符。这是由于Ubuntu预装的是vim-tiny，而我们需要使用vim-full，解决方法很简单，只需要以下两步：<br>　　<br>步骤一，输入下述命令以卸载vim-tiny：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get remove vim-common</span><br></pre></td></tr></table></figure><p>步骤二，输入下述命令以安装vim-full：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install vim</span><br></pre></td></tr></table></figure><p>现在在vi命令的编辑模式即可正常使用方向键和退格键。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;&lt;span id=&quot;jie-jue-ubuntu-zhong-vi-ming-ling-de-bian-ji-mo-shi-xia-bu-neng-zheng-chang-shi-yong-fang-xiang-jian-he-tui-ge-jian-de-wen-ti&quot;
      
    
    </summary>
    
      <category term="vim" scheme="http://baofengketang.com/categories/vim/"/>
    
    
      <category term="vim" scheme="http://baofengketang.com/tags/vim/"/>
    
      <category term="编辑器" scheme="http://baofengketang.com/tags/%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用服务器构建-ftp服务器</title>
    <link href="http://baofengketang.com/2018/05/03/linux/linux_06/"/>
    <id>http://baofengketang.com/2018/05/03/linux/linux_06/</id>
    <published>2018-05-03T09:22:14.000Z</published>
    <updated>2018-05-03T09:59:54.000Z</updated>
    
    <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#ftp-fu-wu-qi">ftp服务器</a></li></ul><!-- tocstop --></div><h3><span id="ftp-fu-wu-qi">ftp服务器</span><a href="#ftp-fu-wu-qi" class="header-anchor">#</a></h3><p>FTP 是File Transfer Protocol（文件传输协议）的英文简称，而中文简称为“文传协议”。用于Internet上的控制文件的双向传输。同时，它也是一个应用程序（Application）。基于不同的操作系统有不同的FTP应用程序，而所有这些应用程序都遵守同一种协议以传输文件。</p><p>在FTP的使用当中，用户经常遇到两个概念：”下载”（Download）和”上传”（Upload）。</p><p>“下载”文件就是从远程主机拷贝文件至自己的计算机上；</p><p>“上传”文件就是将文件从自己的计算机中拷贝至远程主机上。用Internet语言来说，用户可通过客户机程序向（从）远程主机上传（下载）文件。</p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1525339849.png?imageMogr2/thumbnail/!70p" alt=""></p><p>1、安装vsftpd服务器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install vsftpd</span><br></pre></td></tr></table></figure><p>2、配置vsftpd.conf文件</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;toc&quot;&gt;

&lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#ftp-fu-wu-qi&quot;&gt;ftp服务器&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tocstop --&gt;
&lt;/div&gt;

&lt;h3&gt;&lt;span id=&quot;ftp-fu-wu-qi&quot;&gt;
      
    
    </summary>
    
      <category term="linux" scheme="http://baofengketang.com/categories/linux/"/>
    
    
      <category term="linux" scheme="http://baofengketang.com/tags/linux/"/>
    
      <category term="操作系统" scheme="http://baofengketang.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu软件安装与卸载</title>
    <link href="http://baofengketang.com/2018/05/03/linux/linux_05/"/>
    <id>http://baofengketang.com/2018/05/03/linux/linux_05/</id>
    <published>2018-05-03T08:46:25.000Z</published>
    <updated>2018-05-03T09:21:44.000Z</updated>
    
    <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#geng-xin-ubuntu-ruan-jian-xia-zai-di-zhi">更新Ubuntu软件下载地址</a><ul><li><a href="#xun-zhao-guo-nei-jing-xiang-yuan">寻找国内镜像源</a></li><li><a href="#bei-fen-ubuntu-mo-ren-de-yuan-di-zhi">备份Ubuntu默认的源地址</a></li><li><a href="#geng-xin-yuan-fu-wu-qi-lie-biao">更新源服务器列表</a></li><li><a href="#geng-xin-yuan">更新源</a></li></ul></li><li><a href="#ubuntu-ruan-jian-cao-zuo-de-xiang-guan-ming-ling">Ubuntu软件操作的相关命令</a></li></ul><!-- tocstop --></div><h2><span id="geng-xin-ubuntu-ruan-jian-xia-zai-di-zhi">更新Ubuntu软件下载地址</span><a href="#geng-xin-ubuntu-ruan-jian-xia-zai-di-zhi" class="header-anchor">#</a></h2><h3><span id="xun-zhao-guo-nei-jing-xiang-yuan">寻找国内镜像源</span><a href="#xun-zhao-guo-nei-jing-xiang-yuan" class="header-anchor">#</a></h3><p>所谓的镜像源：可以理解为提供下载软件的地方，比如Android手机上可以下载软件的91手机助手；iOS手机上可以下载软件的AppStore</p><p><a href="https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/</a></p><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1525337909.png?imageMogr2/thumbnail/!70p" alt=""></p><p>注意：一定要选择好你的ubuntu的版本号</p><h3><span id="bei-fen-ubuntu-mo-ren-de-yuan-di-zhi">备份Ubuntu默认的源地址</span><a href="#bei-fen-ubuntu-mo-ren-de-yuan-di-zhi" class="header-anchor">#</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp /etc/apt/sources.list /etc/apt/sources.list.backup</span><br></pre></td></tr></table></figure><h3><span id="geng-xin-yuan-fu-wu-qi-lie-biao">更新源服务器列表</span><a href="#geng-xin-yuan-fu-wu-qi-lie-biao" class="header-anchor">#</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi sources.list</span><br></pre></td></tr></table></figure><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1525338282.png?imageMogr2/thumbnail/!70p" alt=""></p><h3><span id="geng-xin-yuan">更新源</span><a href="#geng-xin-yuan" class="header-anchor">#</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><p><img src="http://p6wdo7p1v.bkt.clouddn.com/1525338410.png?imageMogr2/thumbnail/!70p" alt=""></p><p>看到此图就表示成功了</p><h2><span id="ubuntu-ruan-jian-cao-zuo-de-xiang-guan-ming-ling">Ubuntu软件操作的相关命令</span><a href="#ubuntu-ruan-jian-cao-zuo-de-xiang-guan-ming-ling" class="header-anchor">#</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update  更新源</span><br><span class="line"></span><br><span class="line">sudo apt-get install package 安装包</span><br><span class="line"></span><br><span class="line">sudo apt-get remove package 删除包</span><br><span class="line"></span><br><span class="line">sudo apt-cache search package 搜索软件包</span><br><span class="line"></span><br><span class="line">sudo apt-cache show package  获取包的相关信息，如说明、大小、版本等</span><br><span class="line"></span><br><span class="line">sudo apt-get install package --reinstall   重新安装包</span><br><span class="line"></span><br><span class="line">sudo apt-get -f install   修复安装</span><br><span class="line"></span><br><span class="line">sudo apt-get remove package --purge 删除包，包括配置文件等</span><br><span class="line"></span><br><span class="line">sudo apt-get build-dep package 安装相关的编译环境</span><br><span class="line"></span><br><span class="line">sudo apt-get upgrade 更新已安装的包</span><br><span class="line"></span><br><span class="line">sudo apt-get dist-upgrade 升级系统</span><br><span class="line"></span><br><span class="line">sudo apt-cache depends package 了解使用该包依赖那些包</span><br><span class="line"></span><br><span class="line">sudo apt-cache rdepends package 查看该包被哪些包依赖</span><br><span class="line"></span><br><span class="line">sudo apt-get source package  下载该包的源代码</span><br><span class="line"></span><br><span class="line">sudo apt-get clean &amp;&amp; sudo apt-get autoclean 清理无用的包</span><br><span class="line"></span><br><span class="line">sudo apt-get check 检查是否有损坏的依赖</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;toc&quot;&gt;

&lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#geng-xin-ubuntu-ruan-jian-xia-zai-di-zhi&quot;&gt;更新Ubuntu软件下载地址&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#xun-zhao-g
      
    
    </summary>
    
      <category term="linux" scheme="http://baofengketang.com/categories/linux/"/>
    
    
      <category term="linux" scheme="http://baofengketang.com/tags/linux/"/>
    
      <category term="操作系统" scheme="http://baofengketang.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
</feed>
